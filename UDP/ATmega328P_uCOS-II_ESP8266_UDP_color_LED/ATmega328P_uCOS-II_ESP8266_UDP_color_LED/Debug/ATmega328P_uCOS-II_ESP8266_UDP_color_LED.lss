
ATmega328P_uCOS-II_ESP8266_UDP_color_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800100  0000186e  00001902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000186e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000414  00800274  00800274  00001a76  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000470  00000000  00000000  00002210  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004337  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d8  00000000  00000000  000069b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001239  00000000  00000000  00007e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000934  00000000  00000000  000090c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000af8  00000000  00000000  000099fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000274b  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c8  00000000  00000000  0000cc3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e6       	ldi	r30, 0x6E	; 110
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 37       	cpi	r26, 0x74	; 116
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a4 e7       	ldi	r26, 0x74	; 116
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 38       	cpi	r26, 0x88	; 136
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <main>
      9e:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CPUGetSR>:
	.equ SREG, 0x3F
	.equ SP_H, 0x3E
	.equ SP_L, 0x3D

CPUGetSR:
	in r24, SREG
      a6:	8f b7       	in	r24, 0x3f	; 63
	cli
      a8:	f8 94       	cli
	ret
      aa:	08 95       	ret

000000ac <CPUSetSR>:

CPUSetSR:
	out SREG, r24
      ac:	8f bf       	out	0x3f, r24	; 63
	ret
      ae:	08 95       	ret

000000b0 <OSStartHighRdy>:

OSStartHighRdy:
;	call OSTaskSwHook
	ldi r24, 0x01
      b0:	81 e0       	ldi	r24, 0x01	; 1
	sts OSRunning, r24
      b2:	80 93 87 04 	sts	0x0487, r24
	lds r26, OSTCBHighRdy
      b6:	a0 91 cf 04 	lds	r26, 0x04CF
	lds r27, OSTCBHighRdy + 1
      ba:	b0 91 d0 04 	lds	r27, 0x04D0
	ld r28, X+
      be:	cd 91       	ld	r28, X+
	ld r29, X+
      c0:	dd 91       	ld	r29, X+
	out SP_L, r28
      c2:	cd bf       	out	0x3d, r28	; 61
	out SP_H, r29
      c4:	de bf       	out	0x3e, r29	; 62
	pop r0
      c6:	0f 90       	pop	r0
	out SREG, r0
      c8:	0f be       	out	0x3f, r0	; 63
	pop r31
      ca:	ff 91       	pop	r31
	pop r30
      cc:	ef 91       	pop	r30
	pop r29
      ce:	df 91       	pop	r29
	pop r28
      d0:	cf 91       	pop	r28
	pop r27
      d2:	bf 91       	pop	r27
	pop r26
      d4:	af 91       	pop	r26
	pop r25
      d6:	9f 91       	pop	r25
	pop r24
      d8:	8f 91       	pop	r24
	pop r23
      da:	7f 91       	pop	r23
	pop r22
      dc:	6f 91       	pop	r22
	pop r21
      de:	5f 91       	pop	r21
	pop r20
      e0:	4f 91       	pop	r20
	pop r19
      e2:	3f 91       	pop	r19
	pop r18
      e4:	2f 91       	pop	r18
	pop r17
      e6:	1f 91       	pop	r17
	pop r16
      e8:	0f 91       	pop	r16
	pop r15
      ea:	ff 90       	pop	r15
	pop r14
      ec:	ef 90       	pop	r14
	pop r13
      ee:	df 90       	pop	r13
	pop r12
      f0:	cf 90       	pop	r12
	pop r11
      f2:	bf 90       	pop	r11
	pop r10
      f4:	af 90       	pop	r10
	pop r9
      f6:	9f 90       	pop	r9
	pop r8
      f8:	8f 90       	pop	r8
	pop r7
      fa:	7f 90       	pop	r7
	pop r6
      fc:	6f 90       	pop	r6
	pop r5
      fe:	5f 90       	pop	r5
	pop r4
     100:	4f 90       	pop	r4
	pop r3
     102:	3f 90       	pop	r3
	pop r2
     104:	2f 90       	pop	r2
	pop r1
     106:	1f 90       	pop	r1
	pop r0
     108:	0f 90       	pop	r0
	ret
     10a:	08 95       	ret

0000010c <OSCtxSw>:

OSCtxSw:
	push r0
     10c:	0f 92       	push	r0
	push r1
     10e:	1f 92       	push	r1
	push r2
     110:	2f 92       	push	r2
	push r3
     112:	3f 92       	push	r3
	push r4
     114:	4f 92       	push	r4
	push r5
     116:	5f 92       	push	r5
	push r6
     118:	6f 92       	push	r6
	push r7
     11a:	7f 92       	push	r7
	push r8
     11c:	8f 92       	push	r8
	push r9
     11e:	9f 92       	push	r9
	push r10
     120:	af 92       	push	r10
	push r11
     122:	bf 92       	push	r11
	push r12
     124:	cf 92       	push	r12
	push r13
     126:	df 92       	push	r13
	push r14
     128:	ef 92       	push	r14
	push r15
     12a:	ff 92       	push	r15
	push r16
     12c:	0f 93       	push	r16
	push r17
     12e:	1f 93       	push	r17
	push r18
     130:	2f 93       	push	r18
	push r19
     132:	3f 93       	push	r19
	push r20
     134:	4f 93       	push	r20
	push r21
     136:	5f 93       	push	r21
	push r22
     138:	6f 93       	push	r22
	push r23
     13a:	7f 93       	push	r23
	push r24
     13c:	8f 93       	push	r24
	push r25
     13e:	9f 93       	push	r25
	push r26
     140:	af 93       	push	r26
	push r27
     142:	bf 93       	push	r27
	push r28
     144:	cf 93       	push	r28
	push r29
     146:	df 93       	push	r29
	push r30
     148:	ef 93       	push	r30
	push r31
     14a:	ff 93       	push	r31
	in r0, SREG
     14c:	0f b6       	in	r0, 0x3f	; 63
	push r0
     14e:	0f 92       	push	r0
	in r28, SP_L
     150:	cd b7       	in	r28, 0x3d	; 61
	in r29, SP_H
     152:	de b7       	in	r29, 0x3e	; 62
	lds r26, OSTCBCur
     154:	a0 91 d9 04 	lds	r26, 0x04D9
	lds r27, OSTCBCur + 1
     158:	b0 91 da 04 	lds	r27, 0x04DA
	st X+, r28
     15c:	cd 93       	st	X+, r28
	st X+, r29
     15e:	dd 93       	st	X+, r29
;	call OSTaskSwHook
	lds r24, OSPrioHighRdy
     160:	80 91 8c 04 	lds	r24, 0x048C
	sts OSPrioCur, r24
     164:	80 93 8d 04 	sts	0x048D, r24
	lds r26, OSTCBHighRdy
     168:	a0 91 cf 04 	lds	r26, 0x04CF
	lds r27, OSTCBHighRdy + 1
     16c:	b0 91 d0 04 	lds	r27, 0x04D0
	sts OSTCBCur, r26
     170:	a0 93 d9 04 	sts	0x04D9, r26
	sts OSTCBCur + 1, r27
     174:	b0 93 da 04 	sts	0x04DA, r27
	ld r28, X+
     178:	cd 91       	ld	r28, X+
	ld r29, X+
     17a:	dd 91       	ld	r29, X+
	out SP_L, r28
     17c:	cd bf       	out	0x3d, r28	; 61
	out SP_H, r29
     17e:	de bf       	out	0x3e, r29	; 62
	pop r0
     180:	0f 90       	pop	r0
	out SREG, r0
     182:	0f be       	out	0x3f, r0	; 63
	pop r31
     184:	ff 91       	pop	r31
	pop r30
     186:	ef 91       	pop	r30
	pop r29
     188:	df 91       	pop	r29
	pop r28
     18a:	cf 91       	pop	r28
	pop r27
     18c:	bf 91       	pop	r27
	pop r26
     18e:	af 91       	pop	r26
	pop r25
     190:	9f 91       	pop	r25
	pop r24
     192:	8f 91       	pop	r24
	pop r23
     194:	7f 91       	pop	r23
	pop r22
     196:	6f 91       	pop	r22
	pop r21
     198:	5f 91       	pop	r21
	pop r20
     19a:	4f 91       	pop	r20
	pop r19
     19c:	3f 91       	pop	r19
	pop r18
     19e:	2f 91       	pop	r18
	pop r17
     1a0:	1f 91       	pop	r17
	pop r16
     1a2:	0f 91       	pop	r16
	pop r15
     1a4:	ff 90       	pop	r15
	pop r14
     1a6:	ef 90       	pop	r14
	pop r13
     1a8:	df 90       	pop	r13
	pop r12
     1aa:	cf 90       	pop	r12
	pop r11
     1ac:	bf 90       	pop	r11
	pop r10
     1ae:	af 90       	pop	r10
	pop r9
     1b0:	9f 90       	pop	r9
	pop r8
     1b2:	8f 90       	pop	r8
	pop r7
     1b4:	7f 90       	pop	r7
	pop r6
     1b6:	6f 90       	pop	r6
	pop r5
     1b8:	5f 90       	pop	r5
	pop r4
     1ba:	4f 90       	pop	r4
	pop r3
     1bc:	3f 90       	pop	r3
	pop r2
     1be:	2f 90       	pop	r2
	pop r1
     1c0:	1f 90       	pop	r1
	pop r0
     1c2:	0f 90       	pop	r0
	ret
     1c4:	08 95       	ret

000001c6 <strCmp>:
boolean strCmp(char *example, char *test)
{
	char e;
	uint8 i;
	
	i = 0;
     1c6:	40 e0       	ldi	r20, 0x00	; 0
	do {
		e = example[i];
     1c8:	24 2f       	mov	r18, r20
     1ca:	30 e0       	ldi	r19, 0x00	; 0
		if (e != test[i]) {
     1cc:	fb 01       	movw	r30, r22
     1ce:	e2 0f       	add	r30, r18
     1d0:	f3 1f       	adc	r31, r19
     1d2:	50 81       	ld	r21, Z
	char e;
	uint8 i;
	
	i = 0;
	do {
		e = example[i];
     1d4:	fc 01       	movw	r30, r24
     1d6:	e2 0f       	add	r30, r18
     1d8:	f3 1f       	adc	r31, r19
		if (e != test[i]) {
     1da:	20 81       	ld	r18, Z
     1dc:	52 13       	cpse	r21, r18
     1de:	05 c0       	rjmp	.+10     	; 0x1ea <strCmp+0x24>
			return FALSE;
		}
		i++;
     1e0:	4f 5f       	subi	r20, 0xFF	; 255
	} while (e != '\0');
     1e2:	51 11       	cpse	r21, r1
     1e4:	f1 cf       	rjmp	.-30     	; 0x1c8 <strCmp+0x2>
	return TRUE;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	08 95       	ret
	
	i = 0;
	do {
		e = example[i];
		if (e != test[i]) {
			return FALSE;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
		}
		i++;
	} while (e != '\0');
	return TRUE;
}
     1ec:	08 95       	ret

000001ee <strCpy>:
{
	char e;
	uint8 i;
	
	i = 0;
	e = *example;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
	*buf = e;
     1f2:	fb 01       	movw	r30, r22
     1f4:	20 83       	st	Z, r18
	while (e != '\0') {
     1f6:	22 23       	and	r18, r18
     1f8:	71 f0       	breq	.+28     	; 0x216 <strCpy+0x28>
void strCpy(char *example, char *buf)
{
	char e;
	uint8 i;
	
	i = 0;
     1fa:	40 e0       	ldi	r20, 0x00	; 0
	e = *example;
	*buf = e;
	while (e != '\0') {
		i++;
     1fc:	4f 5f       	subi	r20, 0xFF	; 255
		e = example[i];
     1fe:	24 2f       	mov	r18, r20
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	e2 0f       	add	r30, r18
     206:	f3 1f       	adc	r31, r19
     208:	50 81       	ld	r21, Z
		buf[i] = e;
     20a:	fb 01       	movw	r30, r22
     20c:	e2 0f       	add	r30, r18
     20e:	f3 1f       	adc	r31, r19
     210:	50 83       	st	Z, r21
	uint8 i;
	
	i = 0;
	e = *example;
	*buf = e;
	while (e != '\0') {
     212:	51 11       	cpse	r21, r1
     214:	f3 cf       	rjmp	.-26     	; 0x1fc <strCpy+0xe>
     216:	08 95       	ret

00000218 <strLen>:
		buf[i] = e;
	}
}

uint8 strLen(char *str)
{
     218:	dc 01       	movw	r26, r24
	uint8 i;
	
	i = 0;
	while(str[i] != '\0') {
     21a:	8c 91       	ld	r24, X
     21c:	88 23       	and	r24, r24
     21e:	49 f0       	breq	.+18     	; 0x232 <strLen+0x1a>

uint8 strLen(char *str)
{
	uint8 i;
	
	i = 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
	while(str[i] != '\0') {
		i++;
     222:	8f 5f       	subi	r24, 0xFF	; 255
uint8 strLen(char *str)
{
	uint8 i;
	
	i = 0;
	while(str[i] != '\0') {
     224:	fd 01       	movw	r30, r26
     226:	e8 0f       	add	r30, r24
     228:	f1 1d       	adc	r31, r1
     22a:	90 81       	ld	r25, Z
     22c:	91 11       	cpse	r25, r1
     22e:	f9 cf       	rjmp	.-14     	; 0x222 <strLen+0xa>
     230:	08 95       	ret

uint8 strLen(char *str)
{
	uint8 i;
	
	i = 0;
     232:	80 e0       	ldi	r24, 0x00	; 0
	while(str[i] != '\0') {
		i++;
	}
	return i;
}
     234:	08 95       	ret

00000236 <enablePullup>:

void enablePullup(void)
{
	MCUCR &= rex(PUD);
     236:	85 b7       	in	r24, 0x35	; 53
     238:	8f 7e       	andi	r24, 0xEF	; 239
     23a:	85 bf       	out	0x35, r24	; 53
     23c:	08 95       	ret

0000023e <ledInit>:
	MCUCR |= ex(PUD);
}

void ledInit(void)
{
	DDRB |= ex(5);
     23e:	25 9a       	sbi	0x04, 5	; 4
     240:	08 95       	ret

00000242 <ledOn>:
}

void ledOn(void)
{
	PORTB |= ex(5);
     242:	2d 9a       	sbi	0x05, 5	; 5
     244:	08 95       	ret

00000246 <ledOff>:
}

void ledOff(void)
{
	PORTB &= rex(5);
     246:	2d 98       	cbi	0x05, 5	; 5
     248:	08 95       	ret

0000024a <esp8266RxBufferFlash>:
#include "esp8266.h"
#include "basic.h"
#include "usart0.h"

static void esp8266RxBufferFlash()
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	00 d0       	rcall	.+0      	; 0x250 <esp8266RxBufferFlash+0x6>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	INT8U err;
	char *str;
	
	do {
		err = usart0Read(&str, ESP8266_FLUSH_TIMEOUT);
     254:	4f e0       	ldi	r20, 0x0F	; 15
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	ce 01       	movw	r24, r28
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
	} while (err == OS_ERR_NONE);
     264:	88 23       	and	r24, r24
     266:	b1 f3       	breq	.-20     	; 0x254 <esp8266RxBufferFlash+0xa>
}
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <esp8266Cmd>:

boolean esp8266Cmd(char *cmd, char *response)
{
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	00 d0       	rcall	.+0      	; 0x280 <esp8266Cmd+0xe>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	7c 01       	movw	r14, r24
     286:	8b 01       	movw	r16, r22
	INT8U err;
	char *str;
	
	esp8266RxBufferFlash();
     288:	0e 94 25 01 	call	0x24a	; 0x24a <esp8266RxBufferFlash>
	usart0Print(cmd);
     28c:	c7 01       	movw	r24, r14
     28e:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print("\r\n");
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	while (1) {
		err = usart0Read(&str, ESP8266_SHORT_TIMEOUT);
     29a:	4f ef       	ldi	r20, 0xFF	; 255
     29c:	53 e0       	ldi	r21, 0x03	; 3
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	ce 01       	movw	r24, r28
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (err == OS_ERR_TIMEOUT) {
     2aa:	8a 30       	cpi	r24, 0x0A	; 10
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <esp8266Cmd+0x4e>
			return FALSE;
		} else if (strCmp(str, response)) {
     2ae:	b8 01       	movw	r22, r16
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     2b8:	88 23       	and	r24, r24
     2ba:	79 f3       	breq	.-34     	; 0x29a <esp8266Cmd+0x28>
			return TRUE;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <esp8266Cmd+0x50>
	usart0Print(cmd);
	usart0Print("\r\n");
	while (1) {
		err = usart0Read(&str, ESP8266_SHORT_TIMEOUT);
		if (err == OS_ERR_TIMEOUT) {
			return FALSE;
     2c0:	80 e0       	ldi	r24, 0x00	; 0
		} else if (strCmp(str, response)) {
			return TRUE;
		}
	}
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	08 95       	ret

000002d4 <esp8266ConnectAP>:

boolean esp8266ConnectAP(char *name, char *password)
{
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <esp8266ConnectAP+0xe>
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	7c 01       	movw	r14, r24
     2e8:	8b 01       	movw	r16, r22
	INT8U err;
	char *str;
	
	esp8266RxBufferFlash();
     2ea:	0e 94 25 01 	call	0x24a	; 0x24a <esp8266RxBufferFlash>
	usart0Print("AT+CWJAP=\"");
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print(name);
     2f6:	c7 01       	movw	r24, r14
     2f8:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print("\",\"");
     2fc:	8b e0       	ldi	r24, 0x0B	; 11
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print(password);
     304:	c8 01       	movw	r24, r16
     306:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print("\"\r\n");
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	while (1) {
		err = usart0Read(&str, ESP8266_LONG_TIMEOUT);
     312:	4f ef       	ldi	r20, 0xFF	; 255
     314:	5f e3       	ldi	r21, 0x3F	; 63
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	ce 01       	movw	r24, r28
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (err == OS_ERR_TIMEOUT) {
     322:	8a 30       	cpi	r24, 0x0A	; 10
     324:	91 f0       	breq	.+36     	; 0x34a <esp8266ConnectAP+0x76>
			return FALSE;
		} else if (strCmp(str, "OK")) {
     326:	63 e1       	ldi	r22, 0x13	; 19
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     332:	81 11       	cpse	r24, r1
     334:	0c c0       	rjmp	.+24     	; 0x34e <esp8266ConnectAP+0x7a>
			return TRUE;
		} else if (strCmp(str, "FAIL")) {
     336:	66 e1       	ldi	r22, 0x16	; 22
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     342:	88 23       	and	r24, r24
     344:	31 f3       	breq	.-52     	; 0x312 <esp8266ConnectAP+0x3e>
			return FALSE;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	03 c0       	rjmp	.+6      	; 0x350 <esp8266ConnectAP+0x7c>
	usart0Print(password);
	usart0Print("\"\r\n");
	while (1) {
		err = usart0Read(&str, ESP8266_LONG_TIMEOUT);
		if (err == OS_ERR_TIMEOUT) {
			return FALSE;
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	01 c0       	rjmp	.+2      	; 0x350 <esp8266ConnectAP+0x7c>
		} else if (strCmp(str, "OK")) {
			return TRUE;
     34e:	81 e0       	ldi	r24, 0x01	; 1
		} else if (strCmp(str, "FAIL")) {
			return FALSE;
		}
	}
}
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	08 95       	ret

00000362 <esp8266GetIP>:

boolean esp8266GetIP(char *buf)
{
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <esp8266GetIP+0xe>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	8c 01       	movw	r16, r24
	INT8U err;
	char *str;
	boolean result;
	
	result = FALSE;
	esp8266RxBufferFlash();
     376:	0e 94 25 01 	call	0x24a	; 0x24a <esp8266RxBufferFlash>
	usart0Print("AT+CIFSR\r\n");
     37a:	8b e1       	ldi	r24, 0x1B	; 27
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
{
	INT8U err;
	char *str;
	boolean result;
	
	result = FALSE;
     382:	f1 2c       	mov	r15, r1
		if (err == OS_ERR_TIMEOUT || strCmp(str, "OK")) {
			break;
		} else if (*str >= '0' && *str <= '9') {
			if (!strCmp(str, "192.168.4.1")) {
				strCpy(str, buf);
				result = TRUE;
     384:	ee 24       	eor	r14, r14
     386:	e3 94       	inc	r14
	
	result = FALSE;
	esp8266RxBufferFlash();
	usart0Print("AT+CIFSR\r\n");
	while (1) {
		err = usart0Read(&str, ESP8266_SHORT_TIMEOUT);
     388:	4f ef       	ldi	r20, 0xFF	; 255
     38a:	53 e0       	ldi	r21, 0x03	; 3
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (err == OS_ERR_TIMEOUT || strCmp(str, "OK")) {
     398:	8a 30       	cpi	r24, 0x0A	; 10
     39a:	e1 f0       	breq	.+56     	; 0x3d4 <esp8266GetIP+0x72>
     39c:	63 e1       	ldi	r22, 0x13	; 19
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     3a8:	81 11       	cpse	r24, r1
     3aa:	14 c0       	rjmp	.+40     	; 0x3d4 <esp8266GetIP+0x72>
			break;
		} else if (*str >= '0' && *str <= '9') {
     3ac:	e9 81       	ldd	r30, Y+1	; 0x01
     3ae:	fa 81       	ldd	r31, Y+2	; 0x02
     3b0:	90 81       	ld	r25, Z
     3b2:	90 53       	subi	r25, 0x30	; 48
     3b4:	9a 30       	cpi	r25, 0x0A	; 10
     3b6:	40 f7       	brcc	.-48     	; 0x388 <esp8266GetIP+0x26>
			if (!strCmp(str, "192.168.4.1")) {
     3b8:	66 e2       	ldi	r22, 0x26	; 38
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	cf 01       	movw	r24, r30
     3be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     3c2:	81 11       	cpse	r24, r1
     3c4:	e1 cf       	rjmp	.-62     	; 0x388 <esp8266GetIP+0x26>
				strCpy(str, buf);
     3c6:	b8 01       	movw	r22, r16
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	9a 81       	ldd	r25, Y+2	; 0x02
     3cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <strCpy>
				result = TRUE;
     3d0:	fe 2c       	mov	r15, r14
     3d2:	da cf       	rjmp	.-76     	; 0x388 <esp8266GetIP+0x26>
			}
		}
	}
	return result;
}
     3d4:	8f 2d       	mov	r24, r15
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <esp8266Rx>:

char *esp8266Rx(void)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <esp8266Rx+0x6>
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	char *str;
	do {
		usart0Read(&str, ESP8266_INFINITE_TIMEOUT);
     3f2:	4f ef       	ldi	r20, 0xFF	; 255
     3f4:	5f ef       	ldi	r21, 0xFF	; 255
     3f6:	ba 01       	movw	r22, r20
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (*str == '+') {
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	9a 81       	ldd	r25, Y+2	; 0x02
     404:	dc 01       	movw	r26, r24
     406:	2c 91       	ld	r18, X
     408:	2b 32       	cpi	r18, 0x2B	; 43
     40a:	a1 f4       	brne	.+40     	; 0x434 <esp8266Rx+0x4c>
			str += 8;
     40c:	fc 01       	movw	r30, r24
     40e:	38 96       	adiw	r30, 0x08	; 8
     410:	fa 83       	std	Y+2, r31	; 0x02
     412:	e9 83       	std	Y+1, r30	; 0x01
			while (*str != ':') {
     414:	18 96       	adiw	r26, 0x08	; 8
     416:	2c 91       	ld	r18, X
     418:	2a 33       	cpi	r18, 0x3A	; 58
     41a:	41 f0       	breq	.+16     	; 0x42c <esp8266Rx+0x44>
		}
	}
	return result;
}

char *esp8266Rx(void)
     41c:	09 96       	adiw	r24, 0x09	; 9
	do {
		usart0Read(&str, ESP8266_INFINITE_TIMEOUT);
		if (*str == '+') {
			str += 8;
			while (*str != ':') {
				str++;
     41e:	fc 01       	movw	r30, r24
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	01 96       	adiw	r24, 0x01	; 1
	char *str;
	do {
		usart0Read(&str, ESP8266_INFINITE_TIMEOUT);
		if (*str == '+') {
			str += 8;
			while (*str != ':') {
     426:	20 81       	ld	r18, Z
     428:	2a 33       	cpi	r18, 0x3A	; 58
     42a:	c9 f7       	brne	.-14     	; 0x41e <esp8266Rx+0x36>
				str++;
			}
			str++;
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	fa 83       	std	Y+2, r31	; 0x02
     430:	e9 83       	std	Y+1, r30	; 0x01
			break;
     432:	06 c0       	rjmp	.+12     	; 0x440 <esp8266Rx+0x58>
		}
	} while (strCmp(str, "OK"));
     434:	63 e1       	ldi	r22, 0x13	; 19
     436:	71 e0       	ldi	r23, 0x01	; 1
     438:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     43c:	81 11       	cpse	r24, r1
     43e:	d9 cf       	rjmp	.-78     	; 0x3f2 <esp8266Rx+0xa>
	return str;
}
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <esp8266Tx>:

void esp8266Tx(char *str)
{
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	ec 01       	movw	r28, r24
	usart0Print("AT+CIPSEND=0,");
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0LongInt(strLen(str));
     45c:	ce 01       	movw	r24, r28
     45e:	0e 94 0c 01 	call	0x218	; 0x218 <strLen>
     462:	68 2f       	mov	r22, r24
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 40 03 	call	0x680	; 0x680 <usart0LongInt>
	usart0Print("\r\n");
     46e:	80 e1       	ldi	r24, 0x10	; 16
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	/* How to make sure get ">"? */
	usart0Print(str);
     476:	ce 01       	movw	r24, r28
     478:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <hueToRed>:

uint16 hueToRed(uint16 hue)
{
	uint16 red;
	
	if (hue < 40) {
     482:	88 32       	cpi	r24, 0x28	; 40
     484:	91 05       	cpc	r25, r1
     486:	00 f1       	brcs	.+64     	; 0x4c8 <hueToRed+0x46>
		red = 240;
	} else if (hue < 80) {
     488:	80 35       	cpi	r24, 0x50	; 80
     48a:	91 05       	cpc	r25, r1
     48c:	60 f4       	brcc	.+24     	; 0x4a6 <hueToRed+0x24>
		red = 480 - hue * 6;
     48e:	9c 01       	movw	r18, r24
     490:	22 0f       	add	r18, r18
     492:	33 1f       	adc	r19, r19
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	20 ee       	ldi	r18, 0xE0	; 224
     49e:	31 e0       	ldi	r19, 0x01	; 1
     4a0:	28 1b       	sub	r18, r24
     4a2:	39 0b       	sbc	r19, r25
     4a4:	19 c0       	rjmp	.+50     	; 0x4d8 <hueToRed+0x56>
	} else if (hue < 160) {
     4a6:	80 3a       	cpi	r24, 0xA0	; 160
     4a8:	91 05       	cpc	r25, r1
     4aa:	88 f0       	brcs	.+34     	; 0x4ce <hueToRed+0x4c>
		red = 0;
	} else if (hue < 200) {
     4ac:	88 3c       	cpi	r24, 0xC8	; 200
     4ae:	91 05       	cpc	r25, r1
     4b0:	88 f4       	brcc	.+34     	; 0x4d4 <hueToRed+0x52>
		red = hue * 6 - 960;
     4b2:	9c 01       	movw	r18, r24
     4b4:	22 0f       	add	r18, r18
     4b6:	33 1f       	adc	r19, r19
     4b8:	82 0f       	add	r24, r18
     4ba:	93 1f       	adc	r25, r19
     4bc:	9c 01       	movw	r18, r24
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	20 5c       	subi	r18, 0xC0	; 192
     4c4:	33 40       	sbci	r19, 0x03	; 3
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <hueToRed+0x56>
uint16 hueToRed(uint16 hue)
{
	uint16 red;
	
	if (hue < 40) {
		red = 240;
     4c8:	20 ef       	ldi	r18, 0xF0	; 240
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <hueToRed+0x56>
	} else if (hue < 80) {
		red = 480 - hue * 6;
	} else if (hue < 160) {
		red = 0;
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <hueToRed+0x56>
	} else if (hue < 200) {
		red = hue * 6 - 960;
	} else {
		red = 240;
     4d4:	20 ef       	ldi	r18, 0xF0	; 240
     4d6:	30 e0       	ldi	r19, 0x00	; 0
	}
	return red;
}
     4d8:	82 2f       	mov	r24, r18
     4da:	93 2f       	mov	r25, r19
     4dc:	08 95       	ret

000004de <hueToGreen>:

uint16 hueToGreen(uint16 hue)
{
	uint16 green;
	
	if (hue < 40) {
     4de:	88 32       	cpi	r24, 0x28	; 40
     4e0:	91 05       	cpc	r25, r1
     4e2:	48 f4       	brcc	.+18     	; 0x4f6 <hueToGreen+0x18>
		green = hue * 6;
     4e4:	9c 01       	movw	r18, r24
     4e6:	22 0f       	add	r18, r18
     4e8:	33 1f       	adc	r19, r19
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	9c 01       	movw	r18, r24
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	18 c0       	rjmp	.+48     	; 0x526 <hueToGreen+0x48>
	} else if (hue < 120) {
     4f6:	88 37       	cpi	r24, 0x78	; 120
     4f8:	91 05       	cpc	r25, r1
     4fa:	80 f0       	brcs	.+32     	; 0x51c <hueToGreen+0x3e>
		green = 240;
	} else if (hue < 160) {
     4fc:	80 3a       	cpi	r24, 0xA0	; 160
     4fe:	91 05       	cpc	r25, r1
     500:	80 f4       	brcc	.+32     	; 0x522 <hueToGreen+0x44>
		green = 960 - hue * 6;
     502:	ac 01       	movw	r20, r24
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	84 0f       	add	r24, r20
     50a:	95 1f       	adc	r25, r21
     50c:	ac 01       	movw	r20, r24
     50e:	44 0f       	add	r20, r20
     510:	55 1f       	adc	r21, r21
     512:	20 ec       	ldi	r18, 0xC0	; 192
     514:	33 e0       	ldi	r19, 0x03	; 3
     516:	24 1b       	sub	r18, r20
     518:	35 0b       	sbc	r19, r21
     51a:	05 c0       	rjmp	.+10     	; 0x526 <hueToGreen+0x48>
	uint16 green;
	
	if (hue < 40) {
		green = hue * 6;
	} else if (hue < 120) {
		green = 240;
     51c:	20 ef       	ldi	r18, 0xF0	; 240
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <hueToGreen+0x48>
	} else if (hue < 160) {
		green = 960 - hue * 6;
	} else {
		green = 0;
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
	}
	return green;
}
     526:	82 2f       	mov	r24, r18
     528:	93 2f       	mov	r25, r19
     52a:	08 95       	ret

0000052c <hueToBlue>:

uint16 hueToBlue(uint16 hue)
{
	uint16 blue;
	
	if (hue < 80) {
     52c:	80 35       	cpi	r24, 0x50	; 80
     52e:	91 05       	cpc	r25, r1
     530:	e8 f0       	brcs	.+58     	; 0x56c <hueToBlue+0x40>
		blue = 0;
	} else if (hue < 120) {
     532:	88 37       	cpi	r24, 0x78	; 120
     534:	91 05       	cpc	r25, r1
     536:	58 f4       	brcc	.+22     	; 0x54e <hueToBlue+0x22>
		blue = hue * 6 - 480;
     538:	9c 01       	movw	r18, r24
     53a:	22 0f       	add	r18, r18
     53c:	33 1f       	adc	r19, r19
     53e:	82 0f       	add	r24, r18
     540:	93 1f       	adc	r25, r19
     542:	9c 01       	movw	r18, r24
     544:	22 0f       	add	r18, r18
     546:	33 1f       	adc	r19, r19
     548:	20 5e       	subi	r18, 0xE0	; 224
     54a:	31 40       	sbci	r19, 0x01	; 1
     54c:	14 c0       	rjmp	.+40     	; 0x576 <hueToBlue+0x4a>
	} else if (hue < 200) {
     54e:	88 3c       	cpi	r24, 0xC8	; 200
     550:	91 05       	cpc	r25, r1
     552:	78 f0       	brcs	.+30     	; 0x572 <hueToBlue+0x46>
		blue = 240;
	} else {
		blue = 1440 - hue * 6;
     554:	9c 01       	movw	r18, r24
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	82 0f       	add	r24, r18
     55c:	93 1f       	adc	r25, r19
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	20 ea       	ldi	r18, 0xA0	; 160
     564:	35 e0       	ldi	r19, 0x05	; 5
     566:	28 1b       	sub	r18, r24
     568:	39 0b       	sbc	r19, r25
     56a:	05 c0       	rjmp	.+10     	; 0x576 <hueToBlue+0x4a>
uint16 hueToBlue(uint16 hue)
{
	uint16 blue;
	
	if (hue < 80) {
		blue = 0;
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <hueToBlue+0x4a>
	} else if (hue < 120) {
		blue = hue * 6 - 480;
	} else if (hue < 200) {
		blue = 240;
     572:	20 ef       	ldi	r18, 0xF0	; 240
     574:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		blue = 1440 - hue * 6;
	}
	return blue;
}
     576:	82 2f       	mov	r24, r18
     578:	93 2f       	mov	r25, r19
     57a:	08 95       	ret

0000057c <ledRedSet>:
#include "led.h"
#include "pwm.h"

void ledRedSet(uint8 red)
{
	pwm2B(red);
     57c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <pwm2B>
     580:	08 95       	ret

00000582 <ledGreenSet>:
}

void ledGreenSet(uint8 green)
{
	pwm0B(green);
     582:	0e 94 e6 02 	call	0x5cc	; 0x5cc <pwm0B>
     586:	08 95       	ret

00000588 <ledBlueSet>:
}

void ledBlueSet(uint8 blue)
{
	pwm0A(blue);
     588:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <pwm0A>
     58c:	08 95       	ret

0000058e <pwmInit>:
	OCR2B = ~dutyCycle;
}

static void pwm0Init(void)
{
	TCNT0 = 0;
     58e:	16 bc       	out	0x26, r1	; 38
	OCR0A = 255;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255;
     594:	88 bd       	out	0x28, r24	; 40
	/* important to get 0 duty cycle */
	TCCR0A = 0xF3;
     596:	23 ef       	ldi	r18, 0xF3	; 243
     598:	24 bd       	out	0x24, r18	; 36
	TCCR0B = 0x03;
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0x00;
     59e:	10 92 6e 00 	sts	0x006E, r1
	DDRD |= ex(5) | ex(6);
     5a2:	3a b1       	in	r19, 0x0a	; 10
     5a4:	30 66       	ori	r19, 0x60	; 96
     5a6:	3a b9       	out	0x0a, r19	; 10
}

static void pwm2Init(void)
{
	TCNT2 = 0;
     5a8:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 255;
     5ac:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 255;
     5b0:	80 93 b4 00 	sts	0x00B4, r24
	/* important to get 0 duty cycle */
	TCCR2A = 0xF3;
     5b4:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = 0x03;
     5b8:	90 93 b1 00 	sts	0x00B1, r25
	TIMSK2 = 0x00;
     5bc:	10 92 70 00 	sts	0x0070, r1
	DDRB |= ex(3);
     5c0:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= ex(3);
     5c2:	53 9a       	sbi	0x0a, 3	; 10
     5c4:	08 95       	ret

000005c6 <pwm0A>:
	pwm2Init();
}

void pwm0A(uint8 dutyCycle)
{
	OCR0A = ~dutyCycle;
     5c6:	80 95       	com	r24
     5c8:	87 bd       	out	0x27, r24	; 39
     5ca:	08 95       	ret

000005cc <pwm0B>:
}

void pwm0B(uint8 dutyCycle)
{
	OCR0B = ~dutyCycle;
     5cc:	80 95       	com	r24
     5ce:	88 bd       	out	0x28, r24	; 40
     5d0:	08 95       	ret

000005d2 <pwm2B>:
	OCR2A = ~dutyCycle;
}

void pwm2B(uint8 dutyCycle)
{
	OCR2B = ~dutyCycle;
     5d2:	80 95       	com	r24
     5d4:	80 93 b4 00 	sts	0x00B4, r24
     5d8:	08 95       	ret

000005da <usart0Init>:
static void *usart0RxQPtr[ex(UART0_RX_Q_SIZE)];
static OS_EVENT *usart0RxQ;

void usart0Init(void)
{
	UCSR0A = 0x02;
     5da:	a0 ec       	ldi	r26, 0xC0	; 192
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	8c 93       	st	X, r24
	UCSR0B = 0x18;
     5e2:	e1 ec       	ldi	r30, 0xC1	; 193
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	88 e1       	ldi	r24, 0x18	; 24
     5e8:	80 83       	st	Z, r24
	UCSR0C = 0x06;
     5ea:	86 e0       	ldi	r24, 0x06	; 6
     5ec:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 207;
     5f0:	8f ec       	ldi	r24, 0xCF	; 207
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	90 93 c5 00 	sts	0x00C5, r25
     5f8:	80 93 c4 00 	sts	0x00C4, r24
	
	usart0TxIntFlagClr();
     5fc:	8c 91       	ld	r24, X
     5fe:	80 64       	ori	r24, 0x40	; 64
     600:	8c 93       	st	X, r24
	usart0TxIntEnable();
     602:	80 81       	ld	r24, Z
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 83       	st	Z, r24
	usart0RxIntEnable();
     608:	80 81       	ld	r24, Z
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	80 83       	st	Z, r24
	
	usart0TxRdy = OSSemCreate(0);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 56 09 	call	0x12ac	; 0x12ac <OSSemCreate>
     616:	90 93 75 02 	sts	0x0275, r25
     61a:	80 93 74 02 	sts	0x0274, r24
	usart0RxQ = OSQCreate(usart0RxQPtr, ex(UART0_RX_Q_SIZE));
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	86 e7       	ldi	r24, 0x76	; 118
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	0e 94 e6 07 	call	0xfcc	; 0xfcc <OSQCreate>
     62a:	90 93 7f 02 	sts	0x027F, r25
     62e:	80 93 7e 02 	sts	0x027E, r24
	usart0RxCnt = 0;
     632:	10 92 80 02 	sts	0x0280, r1
	usart0RxQCnt = 0;
     636:	10 92 81 02 	sts	0x0281, r1
     63a:	08 95       	ret

0000063c <usart0Print>:
}

INT8U usart0Print(char *str)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	1f 92       	push	r1
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	INT8U err;
	char temp;
	
	usart0TxCnt = 0;
     646:	10 92 82 02 	sts	0x0282, r1
	usart0TxPtr = str;
     64a:	90 93 84 02 	sts	0x0284, r25
     64e:	80 93 83 02 	sts	0x0283, r24
	temp = *str;
     652:	fc 01       	movw	r30, r24
     654:	80 81       	ld	r24, Z
	if (temp != '\0') {
     656:	88 23       	and	r24, r24
     658:	71 f0       	breq	.+28     	; 0x676 <usart0Print+0x3a>
		UDR0 = temp;
     65a:	80 93 c6 00 	sts	0x00C6, r24
		OSSemPend(usart0TxRdy, UART0_TX_TIMEOUT, &err);
     65e:	9e 01       	movw	r18, r28
     660:	2f 5f       	subi	r18, 0xFF	; 255
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	4f ef       	ldi	r20, 0xFF	; 255
     666:	5f ef       	ldi	r21, 0xFF	; 255
     668:	ba 01       	movw	r22, r20
     66a:	80 91 74 02 	lds	r24, 0x0274
     66e:	90 91 75 02 	lds	r25, 0x0275
     672:	0e 94 86 09 	call	0x130c	; 0x130c <OSSemPend>
	}
	return err;
}
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <usart0LongInt>:

INT8U usart0LongInt(uint32 x)
{
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	2b 97       	sbiw	r28, 0x0b	; 11
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	char digit[11];
	uint8 i;
	
	digit[10] = '\0';
     6a6:	1b 86       	std	Y+11, r1	; 0x0b
	i = 9;
     6a8:	0f 2e       	mov	r0, r31
     6aa:	f9 e0       	ldi	r31, 0x09	; 9
     6ac:	df 2e       	mov	r13, r31
     6ae:	f0 2d       	mov	r31, r0
	do {
		digit[i] = '0' + x%10;
     6b0:	0f 2e       	mov	r0, r31
     6b2:	fa e0       	ldi	r31, 0x0A	; 10
     6b4:	8f 2e       	mov	r8, r31
     6b6:	91 2c       	mov	r9, r1
     6b8:	a1 2c       	mov	r10, r1
     6ba:	b1 2c       	mov	r11, r1
     6bc:	f0 2d       	mov	r31, r0
     6be:	0d 2d       	mov	r16, r13
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	ee 24       	eor	r14, r14
     6c4:	e3 94       	inc	r14
     6c6:	f1 2c       	mov	r15, r1
     6c8:	ec 0e       	add	r14, r28
     6ca:	fd 1e       	adc	r15, r29
     6cc:	e0 0e       	add	r14, r16
     6ce:	f1 1e       	adc	r15, r17
     6d0:	a5 01       	movw	r20, r10
     6d2:	94 01       	movw	r18, r8
     6d4:	0e 94 13 0c 	call	0x1826	; 0x1826 <__udivmodsi4>
     6d8:	60 5d       	subi	r22, 0xD0	; 208
     6da:	f7 01       	movw	r30, r14
     6dc:	60 83       	st	Z, r22
		x /= 10;
     6de:	62 2f       	mov	r22, r18
     6e0:	73 2f       	mov	r23, r19
     6e2:	84 2f       	mov	r24, r20
     6e4:	95 2f       	mov	r25, r21
		i--;
     6e6:	da 94       	dec	r13
	} while (x != 0);
     6e8:	61 15       	cp	r22, r1
     6ea:	71 05       	cpc	r23, r1
     6ec:	81 05       	cpc	r24, r1
     6ee:	91 05       	cpc	r25, r1
     6f0:	31 f7       	brne	.-52     	; 0x6be <usart0LongInt+0x3e>
	i++;
	return usart0Print(&digit[i]);
     6f2:	c7 01       	movw	r24, r14
     6f4:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
}
     6f8:	2b 96       	adiw	r28, 0x0b	; 11
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	bf 90       	pop	r11
     714:	af 90       	pop	r10
     716:	9f 90       	pop	r9
     718:	8f 90       	pop	r8
     71a:	08 95       	ret

0000071c <usart0Read>:

INT8U usart0Read(char **str, INT32U timeout)
{
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	1f 92       	push	r1
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	8c 01       	movw	r16, r24
	INT8U err;
	
	*str = (char *)OSQPend(usart0RxQ, timeout, &err);
     72c:	9e 01       	movw	r18, r28
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	80 91 7e 02 	lds	r24, 0x027E
     736:	90 91 7f 02 	lds	r25, 0x027F
     73a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <OSQPend>
     73e:	f8 01       	movw	r30, r16
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
	return err;
}
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	0f 90       	pop	r0
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <__vector_20>:
		usart0RxCnt &= ex(UART0_RX_SIZE) - 1;
	}
}

ISR(USART_TX_vect)
{
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
	return err;
}

static void usart0TxISRHandler(void)
{
	usart0TxCnt++;
     774:	80 91 82 02 	lds	r24, 0x0282
     778:	8f 5f       	subi	r24, 0xFF	; 255
     77a:	80 93 82 02 	sts	0x0282, r24
	if (*(usart0TxPtr + usart0TxCnt) == 0) {
     77e:	e0 91 83 02 	lds	r30, 0x0283
     782:	f0 91 84 02 	lds	r31, 0x0284
     786:	e8 0f       	add	r30, r24
     788:	f1 1d       	adc	r31, r1
     78a:	80 81       	ld	r24, Z
     78c:	81 11       	cpse	r24, r1
     78e:	0b c0       	rjmp	.+22     	; 0x7a6 <__vector_20+0x54>
		OSIntEnter();
     790:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSIntEnter>
		OSSemPost(usart0TxRdy);
     794:	80 91 74 02 	lds	r24, 0x0274
     798:	90 91 75 02 	lds	r25, 0x0275
     79c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <OSSemPost>
		OSIntExit();
     7a0:	0e 94 42 05 	call	0xa84	; 0xa84 <OSIntExit>
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__vector_20+0x58>
	} else {
		UDR0 = usart0TxPtr[usart0TxCnt];
     7a6:	80 93 c6 00 	sts	0x00C6, r24
}

ISR(USART_TX_vect)
{
	usart0TxISRHandler();
}
     7aa:	ff 91       	pop	r31
     7ac:	ef 91       	pop	r30
     7ae:	bf 91       	pop	r27
     7b0:	af 91       	pop	r26
     7b2:	9f 91       	pop	r25
     7b4:	8f 91       	pop	r24
     7b6:	7f 91       	pop	r23
     7b8:	6f 91       	pop	r22
     7ba:	5f 91       	pop	r21
     7bc:	4f 91       	pop	r20
     7be:	3f 91       	pop	r19
     7c0:	2f 91       	pop	r18
     7c2:	0f 90       	pop	r0
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	0f 90       	pop	r0
     7c8:	1f 90       	pop	r1
     7ca:	18 95       	reti

000007cc <__vector_18>:

ISR(USART_RX_vect)
{
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31

static void usart0RxISRHandler(void)
{
	char usart0RxChar;
	
	usart0RxChar = UDR0;
     7ee:	80 91 c6 00 	lds	r24, 0x00C6
	if (usart0RxChar == '\r') {
     7f2:	8d 30       	cpi	r24, 0x0D	; 13
     7f4:	39 f5       	brne	.+78     	; 0x844 <__vector_18+0x78>
		if (usart0RxCnt != 0) {
     7f6:	80 91 80 02 	lds	r24, 0x0280
     7fa:	88 23       	and	r24, r24
     7fc:	b1 f1       	breq	.+108    	; 0x86a <__vector_18+0x9e>
			OSIntEnter();
     7fe:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSIntEnter>
			usart0RxBuf[usart0RxQCnt][usart0RxCnt] = '\0';
     802:	60 91 81 02 	lds	r22, 0x0281
     806:	80 91 80 02 	lds	r24, 0x0280
     80a:	20 e2       	ldi	r18, 0x20	; 32
     80c:	62 9f       	mul	r22, r18
     80e:	b0 01       	movw	r22, r0
     810:	11 24       	eor	r1, r1
     812:	fb 01       	movw	r30, r22
     814:	e8 0f       	add	r30, r24
     816:	f1 1d       	adc	r31, r1
     818:	eb 57       	subi	r30, 0x7B	; 123
     81a:	fd 4f       	sbci	r31, 0xFD	; 253
     81c:	10 82       	st	Z, r1
			usart0RxCnt = 0;
     81e:	10 92 80 02 	sts	0x0280, r1
			OSQPost(usart0RxQ, usart0RxBuf[usart0RxQCnt]);
     822:	6b 57       	subi	r22, 0x7B	; 123
     824:	7d 4f       	sbci	r23, 0xFD	; 253
     826:	80 91 7e 02 	lds	r24, 0x027E
     82a:	90 91 7f 02 	lds	r25, 0x027F
     82e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <OSQPost>
			usart0RxQCnt++;
     832:	80 91 81 02 	lds	r24, 0x0281
     836:	8f 5f       	subi	r24, 0xFF	; 255
			usart0RxQCnt &= ex(UART0_RX_Q_SIZE) - 1;
     838:	83 70       	andi	r24, 0x03	; 3
     83a:	80 93 81 02 	sts	0x0281, r24
			OSIntExit();
     83e:	0e 94 42 05 	call	0xa84	; 0xa84 <OSIntExit>
     842:	13 c0       	rjmp	.+38     	; 0x86a <__vector_18+0x9e>
		}
	} else if (usart0RxChar != '\n'){
     844:	8a 30       	cpi	r24, 0x0A	; 10
     846:	89 f0       	breq	.+34     	; 0x86a <__vector_18+0x9e>
		usart0RxBuf[usart0RxQCnt][usart0RxCnt] = usart0RxChar;
     848:	90 91 80 02 	lds	r25, 0x0280
     84c:	e0 91 81 02 	lds	r30, 0x0281
     850:	20 e2       	ldi	r18, 0x20	; 32
     852:	e2 9f       	mul	r30, r18
     854:	f0 01       	movw	r30, r0
     856:	11 24       	eor	r1, r1
     858:	e9 0f       	add	r30, r25
     85a:	f1 1d       	adc	r31, r1
     85c:	eb 57       	subi	r30, 0x7B	; 123
     85e:	fd 4f       	sbci	r31, 0xFD	; 253
     860:	80 83       	st	Z, r24
		usart0RxCnt++;
     862:	9f 5f       	subi	r25, 0xFF	; 255
		usart0RxCnt &= ex(UART0_RX_SIZE) - 1;
     864:	9f 71       	andi	r25, 0x1F	; 31
     866:	90 93 80 02 	sts	0x0280, r25
}

ISR(USART_RX_vect)
{
	usart0RxISRHandler();
}
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63
     886:	0f 90       	pop	r0
     888:	1f 90       	pop	r1
     88a:	18 95       	reti

0000088c <OSTaskStkInit>:
OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *ptos, INT16U opt)
{
	INT16U  tmp;

	(void)opt;                              /* 'opt' is not used, prevent warning                       */
	tmp      = (INT16U)OS_TaskReturn;       /* Put task start address on top of "hardware stack"        */
     88c:	2e e9       	ldi	r18, 0x9E	; 158
     88e:	3a e0       	ldi	r19, 0x0A	; 10
	*ptos--  = (INT8U)(tmp & 0xFF);
     890:	fa 01       	movw	r30, r20
     892:	20 83       	st	Z, r18
	tmp      = tmp >> 8;
	*ptos--  = (INT8U)(tmp & 0xFF);
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	30 83       	st	Z, r19
	tmp      = (INT16U)task;                /* Save PC return address                                   */
	*ptos--  = (INT8U)(tmp & 0xFF);
     898:	fa 01       	movw	r30, r20
     89a:	32 97       	sbiw	r30, 0x02	; 2
     89c:	80 83       	st	Z, r24
	tmp      = tmp >> 8;
	*ptos--  = (INT8U)(tmp & 0xFF);
     89e:	fa 01       	movw	r30, r20
     8a0:	33 97       	sbiw	r30, 0x03	; 3
     8a2:	90 83       	st	Z, r25

	*ptos--  = (INT8U)0x00;                 /* R0    = 0x00                                             */
     8a4:	fa 01       	movw	r30, r20
     8a6:	34 97       	sbiw	r30, 0x04	; 4
     8a8:	10 82       	st	Z, r1
	*ptos--  = (INT8U)0x00;                 /* R1    = 0x00                                             */
     8aa:	fa 01       	movw	r30, r20
     8ac:	35 97       	sbiw	r30, 0x05	; 5
     8ae:	10 82       	st	Z, r1
	*ptos--  = (INT8U)0x02;                 /* R2    = 0x02                                             */
     8b0:	fa 01       	movw	r30, r20
     8b2:	36 97       	sbiw	r30, 0x06	; 6
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x03;                 /* R3    = 0x03                                             */
     8b8:	fa 01       	movw	r30, r20
     8ba:	37 97       	sbiw	r30, 0x07	; 7
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x04;                 /* R4    = 0x04                                             */
     8c0:	fa 01       	movw	r30, r20
     8c2:	38 97       	sbiw	r30, 0x08	; 8
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x05;                 /* R5    = 0x05                                             */
     8c8:	fa 01       	movw	r30, r20
     8ca:	39 97       	sbiw	r30, 0x09	; 9
     8cc:	85 e0       	ldi	r24, 0x05	; 5
     8ce:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x06;                 /* R6    = 0x06                                             */
     8d0:	fa 01       	movw	r30, r20
     8d2:	3a 97       	sbiw	r30, 0x0a	; 10
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x07;                 /* R7    = 0x07                                             */
     8d8:	fa 01       	movw	r30, r20
     8da:	3b 97       	sbiw	r30, 0x0b	; 11
     8dc:	87 e0       	ldi	r24, 0x07	; 7
     8de:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x08;                 /* R8    = 0x08                                             */
     8e0:	fa 01       	movw	r30, r20
     8e2:	3c 97       	sbiw	r30, 0x0c	; 12
     8e4:	88 e0       	ldi	r24, 0x08	; 8
     8e6:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x09;                 /* R9    = 0x09                                             */
     8e8:	fa 01       	movw	r30, r20
     8ea:	3d 97       	sbiw	r30, 0x0d	; 13
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x10;                 /* R10   = 0x10                                             */
     8f0:	fa 01       	movw	r30, r20
     8f2:	3e 97       	sbiw	r30, 0x0e	; 14
     8f4:	80 e1       	ldi	r24, 0x10	; 16
     8f6:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x11;                 /* R11   = 0x11                                             */
     8f8:	fa 01       	movw	r30, r20
     8fa:	3f 97       	sbiw	r30, 0x0f	; 15
     8fc:	81 e1       	ldi	r24, 0x11	; 17
     8fe:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x12;                 /* R12   = 0x12                                             */
     900:	fa 01       	movw	r30, r20
     902:	70 97       	sbiw	r30, 0x10	; 16
     904:	82 e1       	ldi	r24, 0x12	; 18
     906:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x13;                 /* R13   = 0x13                                             */
     908:	fa 01       	movw	r30, r20
     90a:	71 97       	sbiw	r30, 0x11	; 17
     90c:	83 e1       	ldi	r24, 0x13	; 19
     90e:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x14;                 /* R14   = 0x14                                             */
     910:	fa 01       	movw	r30, r20
     912:	72 97       	sbiw	r30, 0x12	; 18
     914:	84 e1       	ldi	r24, 0x14	; 20
     916:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x15;                 /* R15   = 0x15                                             */
     918:	fa 01       	movw	r30, r20
     91a:	73 97       	sbiw	r30, 0x13	; 19
     91c:	85 e1       	ldi	r24, 0x15	; 21
     91e:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x16;                 /* R16   = 0x16                                             */
     920:	fa 01       	movw	r30, r20
     922:	74 97       	sbiw	r30, 0x14	; 20
     924:	86 e1       	ldi	r24, 0x16	; 22
     926:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x17;                 /* R17   = 0x17                                             */
     928:	fa 01       	movw	r30, r20
     92a:	75 97       	sbiw	r30, 0x15	; 21
     92c:	87 e1       	ldi	r24, 0x17	; 23
     92e:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x18;                 /* R18   = 0x18                                             */
     930:	fa 01       	movw	r30, r20
     932:	76 97       	sbiw	r30, 0x16	; 22
     934:	88 e1       	ldi	r24, 0x18	; 24
     936:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x19;                 /* R19   = 0x19                                             */
     938:	fa 01       	movw	r30, r20
     93a:	77 97       	sbiw	r30, 0x17	; 23
     93c:	89 e1       	ldi	r24, 0x19	; 25
     93e:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x20;                 /* R20   = 0x20                                             */
     940:	fa 01       	movw	r30, r20
     942:	78 97       	sbiw	r30, 0x18	; 24
     944:	80 e2       	ldi	r24, 0x20	; 32
     946:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x21;                 /* R21   = 0x21                                             */
     948:	fa 01       	movw	r30, r20
     94a:	79 97       	sbiw	r30, 0x19	; 25
     94c:	81 e2       	ldi	r24, 0x21	; 33
     94e:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x22;                 /* R22   = 0x22                                             */
     950:	fa 01       	movw	r30, r20
     952:	7a 97       	sbiw	r30, 0x1a	; 26
     954:	82 e2       	ldi	r24, 0x22	; 34
     956:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x23;                 /* R23   = 0x23                                             */
     958:	fa 01       	movw	r30, r20
     95a:	7b 97       	sbiw	r30, 0x1b	; 27
     95c:	83 e2       	ldi	r24, 0x23	; 35
     95e:	80 83       	st	Z, r24
	tmp      = (INT16U)pdata;
	*ptos--  = (INT8U)(tmp & 0xFF);         /* 'p_arg' passed in R24:R25                                */
     960:	fa 01       	movw	r30, r20
     962:	7c 97       	sbiw	r30, 0x1c	; 28
     964:	60 83       	st	Z, r22
	tmp      = tmp >> 8;
	*ptos--  = (INT8U)(tmp & 0xFF);
     966:	fa 01       	movw	r30, r20
     968:	7d 97       	sbiw	r30, 0x1d	; 29
     96a:	70 83       	st	Z, r23
	*ptos--  = (INT8U)0x26;                 /* R26 X = 0x26                                             */
     96c:	fa 01       	movw	r30, r20
     96e:	7e 97       	sbiw	r30, 0x1e	; 30
     970:	86 e2       	ldi	r24, 0x26	; 38
     972:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x27;                 /* R27   = 0x27                                             */
     974:	fa 01       	movw	r30, r20
     976:	7f 97       	sbiw	r30, 0x1f	; 31
     978:	87 e2       	ldi	r24, 0x27	; 39
     97a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x28;                 /* R28 Y = 0x28                                             */
     97c:	fa 01       	movw	r30, r20
     97e:	b0 97       	sbiw	r30, 0x20	; 32
     980:	88 e2       	ldi	r24, 0x28	; 40
     982:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x29;                 /* R29   = 0x29                                             */
     984:	fa 01       	movw	r30, r20
     986:	b1 97       	sbiw	r30, 0x21	; 33
     988:	89 e2       	ldi	r24, 0x29	; 41
     98a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x30;                 /* R30 Z = 0x30                                             */
     98c:	fa 01       	movw	r30, r20
     98e:	b2 97       	sbiw	r30, 0x22	; 34
     990:	80 e3       	ldi	r24, 0x30	; 48
     992:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x31;                 /* R31   = 0x31                                             */
     994:	fa 01       	movw	r30, r20
     996:	b3 97       	sbiw	r30, 0x23	; 35
     998:	81 e3       	ldi	r24, 0x31	; 49
     99a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x80;                 /* SREG  = Interrupts enabled                               */
     99c:	fa 01       	movw	r30, r20
     99e:	b4 97       	sbiw	r30, 0x24	; 36
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	80 83       	st	Z, r24
	
	return ((OS_STK *)ptos);
     9a4:	45 52       	subi	r20, 0x25	; 37
     9a6:	51 09       	sbc	r21, r1
}
     9a8:	84 2f       	mov	r24, r20
     9aa:	95 2f       	mov	r25, r21
     9ac:	08 95       	ret

000009ae <OSTaskCreateHook>:

/*******************************************************************************************************/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
     9ae:	08 95       	ret

000009b0 <OSTaskIdleHook>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
     9b0:	08 95       	ret

000009b2 <OSInitHookBegin>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
     9b2:	08 95       	ret

000009b4 <OSInitHookEnd>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
     9b4:	08 95       	ret

000009b6 <OSTCBInitHook>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
     9b6:	08 95       	ret

000009b8 <OSTaskReturnHook>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
     9b8:	08 95       	ret

000009ba <__vector_11>:
#endif
}
#endif

ISR(TIMER1_COMPA_vect)
{
     9ba:	1f 92       	push	r1
     9bc:	0f 92       	push	r0
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	af 93       	push	r26
     9d6:	bf 93       	push	r27
     9d8:	ef 93       	push	r30
     9da:	ff 93       	push	r31
	OSIntEnter();
     9dc:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSIntEnter>
	OSTimeTick();
     9e0:	0e 94 a2 05 	call	0xb44	; 0xb44 <OSTimeTick>
	OSIntExit();
     9e4:	0e 94 42 05 	call	0xa84	; 0xa84 <OSIntExit>
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	18 95       	reti

00000a0a <OS_SchedNew>:
{
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
     a0a:	e0 91 d3 04 	lds	r30, 0x04D3
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	e0 5c       	subi	r30, 0xC0	; 192
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	80 81       	ld	r24, Z
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
     a16:	e8 2f       	mov	r30, r24
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ec 52       	subi	r30, 0x2C	; 44
     a1c:	fb 4f       	sbci	r31, 0xFB	; 251
     a1e:	e0 81       	ld	r30, Z
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	e0 5c       	subi	r30, 0xC0	; 192
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	88 0f       	add	r24, r24
     a28:	88 0f       	add	r24, r24
     a2a:	88 0f       	add	r24, r24
     a2c:	90 81       	ld	r25, Z
     a2e:	89 0f       	add	r24, r25
     a30:	80 93 8c 04 	sts	0x048C, r24
     a34:	08 95       	ret

00000a36 <OS_TaskIdle>:



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     a36:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        OSIdleCtr++;
     a3a:	40 91 88 04 	lds	r20, 0x0488
     a3e:	50 91 89 04 	lds	r21, 0x0489
     a42:	60 91 8a 04 	lds	r22, 0x048A
     a46:	70 91 8b 04 	lds	r23, 0x048B
     a4a:	4f 5f       	subi	r20, 0xFF	; 255
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	6f 4f       	sbci	r22, 0xFF	; 255
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	40 93 88 04 	sts	0x0488, r20
     a56:	50 93 89 04 	sts	0x0489, r21
     a5a:	60 93 8a 04 	sts	0x048A, r22
     a5e:	70 93 8b 04 	sts	0x048B, r23
        OS_EXIT_CRITICAL();
     a62:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
     a66:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <OSTaskIdleHook>
     a6a:	e5 cf       	rjmp	.-54     	; 0xa36 <OS_TaskIdle>

00000a6c <OSIntEnter>:
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    if (OSRunning == OS_TRUE) {
     a6c:	80 91 87 04 	lds	r24, 0x0487
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	39 f4       	brne	.+14     	; 0xa82 <OSIntEnter+0x16>
        if (OSIntNesting < 255u) {
     a74:	80 91 d8 04 	lds	r24, 0x04D8
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	19 f0       	breq	.+6      	; 0xa82 <OSIntEnter+0x16>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	80 93 d8 04 	sts	0x04D8, r24
     a82:	08 95       	ret

00000a84 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
     a84:	cf 93       	push	r28
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSRunning == OS_TRUE) {
     a86:	80 91 87 04 	lds	r24, 0x0487
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	e9 f5       	brne	.+122    	; 0xb08 <OSIntExit+0x84>
        OS_ENTER_CRITICAL();
     a8e:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
     a92:	c8 2f       	mov	r28, r24
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
     a94:	90 91 d8 04 	lds	r25, 0x04D8
     a98:	99 23       	and	r25, r25
     a9a:	29 f0       	breq	.+10     	; 0xaa6 <OSIntExit+0x22>
            OSIntNesting--;
     a9c:	91 50       	subi	r25, 0x01	; 1
     a9e:	90 93 d8 04 	sts	0x04D8, r25
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
     aa2:	91 11       	cpse	r25, r1
     aa4:	2e c0       	rjmp	.+92     	; 0xb02 <OSIntExit+0x7e>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
     aa6:	80 91 86 04 	lds	r24, 0x0486
     aaa:	81 11       	cpse	r24, r1
     aac:	2a c0       	rjmp	.+84     	; 0xb02 <OSIntExit+0x7e>
                OS_SchedNew();
     aae:	0e 94 05 05 	call	0xa0a	; 0xa0a <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     ab2:	80 91 8c 04 	lds	r24, 0x048C
     ab6:	e8 2f       	mov	r30, r24
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	e8 59       	subi	r30, 0x98	; 152
     ac0:	f9 4f       	sbci	r31, 0xF9	; 249
     ac2:	20 81       	ld	r18, Z
     ac4:	31 81       	ldd	r19, Z+1	; 0x01
     ac6:	30 93 d0 04 	sts	0x04D0, r19
     aca:	20 93 cf 04 	sts	0x04CF, r18
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
     ace:	90 91 8d 04 	lds	r25, 0x048D
     ad2:	89 17       	cp	r24, r25
     ad4:	b1 f0       	breq	.+44     	; 0xb02 <OSIntExit+0x7e>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
     ad6:	40 91 90 04 	lds	r20, 0x0490
     ada:	50 91 91 04 	lds	r21, 0x0491
     ade:	60 91 92 04 	lds	r22, 0x0492
     ae2:	70 91 93 04 	lds	r23, 0x0493
     ae6:	4f 5f       	subi	r20, 0xFF	; 255
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	6f 4f       	sbci	r22, 0xFF	; 255
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	40 93 90 04 	sts	0x0490, r20
     af2:	50 93 91 04 	sts	0x0491, r21
     af6:	60 93 92 04 	sts	0x0492, r22
     afa:	70 93 93 04 	sts	0x0493, r23
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
     afe:	0e 94 86 00 	call	0x10c	; 0x10c <OSCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
     b02:	8c 2f       	mov	r24, r28
     b04:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    }
}
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <OSStart>:
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
     b0c:	80 91 87 04 	lds	r24, 0x0487
     b10:	81 11       	cpse	r24, r1
     b12:	17 c0       	rjmp	.+46     	; 0xb42 <OSStart+0x36>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
     b14:	0e 94 05 05 	call	0xa0a	; 0xa0a <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
     b18:	e0 91 8c 04 	lds	r30, 0x048C
     b1c:	e0 93 8d 04 	sts	0x048D, r30
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	e8 59       	subi	r30, 0x98	; 152
     b28:	f9 4f       	sbci	r31, 0xF9	; 249
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	90 93 d0 04 	sts	0x04D0, r25
     b32:	80 93 cf 04 	sts	0x04CF, r24
        OSTCBCur      = OSTCBHighRdy;
     b36:	90 93 da 04 	sts	0x04DA, r25
     b3a:	80 93 d9 04 	sts	0x04D9, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
     b3e:	0e 94 58 00 	call	0xb0	; 0xb0 <OSStartHighRdy>
     b42:	08 95       	ret

00000b44 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    OSTime++;
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
     b4a:	80 91 87 04 	lds	r24, 0x0487
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	09 f0       	breq	.+2      	; 0xb54 <OSTimeTick+0x10>
     b52:	41 c0       	rjmp	.+130    	; 0xbd6 <OSTimeTick+0x92>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
     b54:	c0 91 8e 04 	lds	r28, 0x048E
     b58:	d0 91 8f 04 	lds	r29, 0x048F
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
     b5c:	88 89       	ldd	r24, Y+16	; 0x10
     b5e:	8f 30       	cpi	r24, 0x0F	; 15
     b60:	d1 f1       	breq	.+116    	; 0xbd6 <OSTimeTick+0x92>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
     b62:	11 e0       	ldi	r17, 0x01	; 1
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
     b64:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
     b68:	4a 85       	ldd	r20, Y+10	; 0x0a
     b6a:	5b 85       	ldd	r21, Y+11	; 0x0b
     b6c:	6c 85       	ldd	r22, Y+12	; 0x0c
     b6e:	7d 85       	ldd	r23, Y+13	; 0x0d
     b70:	41 15       	cp	r20, r1
     b72:	51 05       	cpc	r21, r1
     b74:	61 05       	cpc	r22, r1
     b76:	71 05       	cpc	r23, r1
     b78:	31 f1       	breq	.+76     	; 0xbc6 <OSTimeTick+0x82>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
     b7a:	41 50       	subi	r20, 0x01	; 1
     b7c:	51 09       	sbc	r21, r1
     b7e:	61 09       	sbc	r22, r1
     b80:	71 09       	sbc	r23, r1
     b82:	4a 87       	std	Y+10, r20	; 0x0a
     b84:	5b 87       	std	Y+11, r21	; 0x0b
     b86:	6c 87       	std	Y+12, r22	; 0x0c
     b88:	7d 87       	std	Y+13, r23	; 0x0d
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
     b8a:	45 2b       	or	r20, r21
     b8c:	46 2b       	or	r20, r22
     b8e:	47 2b       	or	r20, r23
     b90:	d1 f4       	brne	.+52     	; 0xbc6 <OSTimeTick+0x82>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
     b92:	9e 85       	ldd	r25, Y+14	; 0x0e
     b94:	29 2f       	mov	r18, r25
     b96:	27 73       	andi	r18, 0x37	; 55
     b98:	21 f0       	breq	.+8      	; 0xba2 <OSTimeTick+0x5e>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
     b9a:	98 7c       	andi	r25, 0xC8	; 200
     b9c:	9e 87       	std	Y+14, r25	; 0x0e
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
     b9e:	1f 87       	std	Y+15, r17	; 0x0f
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <OSTimeTick+0x60>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
     ba2:	1f 86       	std	Y+15, r1	; 0x0f
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
     ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba6:	93 fd       	sbrc	r25, 3
     ba8:	0e c0       	rjmp	.+28     	; 0xbc6 <OSTimeTick+0x82>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
     baa:	20 91 d3 04 	lds	r18, 0x04D3
     bae:	9c 89       	ldd	r25, Y+20	; 0x14
     bb0:	92 2b       	or	r25, r18
     bb2:	90 93 d3 04 	sts	0x04D3, r25
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     bb6:	ea 89       	ldd	r30, Y+18	; 0x12
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ec 52       	subi	r30, 0x2C	; 44
     bbc:	fb 4f       	sbci	r31, 0xFB	; 251
     bbe:	20 81       	ld	r18, Z
     bc0:	9b 89       	ldd	r25, Y+19	; 0x13
     bc2:	92 2b       	or	r25, r18
     bc4:	90 83       	st	Z, r25
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
     bc6:	0a 80       	ldd	r0, Y+2	; 0x02
     bc8:	db 81       	ldd	r29, Y+3	; 0x03
     bca:	c0 2d       	mov	r28, r0
            OS_EXIT_CRITICAL();
     bcc:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
     bd0:	88 89       	ldd	r24, Y+16	; 0x10
     bd2:	8f 30       	cpi	r24, 0x0F	; 15
     bd4:	39 f6       	brne	.-114    	; 0xb64 <OSTimeTick+0x20>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	08 95       	ret

00000bde <OS_EventTaskWait>:
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
     bde:	e0 91 d9 04 	lds	r30, 0x04D9
     be2:	f0 91 da 04 	lds	r31, 0x04DA
     be6:	97 83       	std	Z+7, r25	; 0x07
     be8:	86 83       	std	Z+6, r24	; 0x06

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
     bea:	22 89       	ldd	r18, Z+18	; 0x12
     bec:	dc 01       	movw	r26, r24
     bee:	a2 0f       	add	r26, r18
     bf0:	b1 1d       	adc	r27, r1
     bf2:	16 96       	adiw	r26, 0x06	; 6
     bf4:	3c 91       	ld	r19, X
     bf6:	16 97       	sbiw	r26, 0x06	; 6
     bf8:	23 89       	ldd	r18, Z+19	; 0x13
     bfa:	23 2b       	or	r18, r19
     bfc:	16 96       	adiw	r26, 0x06	; 6
     bfe:	2c 93       	st	X, r18
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     c00:	dc 01       	movw	r26, r24
     c02:	15 96       	adiw	r26, 0x05	; 5
     c04:	3c 91       	ld	r19, X
     c06:	15 97       	sbiw	r26, 0x05	; 5
     c08:	24 89       	ldd	r18, Z+20	; 0x14
     c0a:	23 2b       	or	r18, r19
     c0c:	15 96       	adiw	r26, 0x05	; 5
     c0e:	2c 93       	st	X, r18

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
     c10:	a2 89       	ldd	r26, Z+18	; 0x12
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ac 52       	subi	r26, 0x2C	; 44
     c16:	bb 4f       	sbci	r27, 0xFB	; 251
     c18:	83 89       	ldd	r24, Z+19	; 0x13
     c1a:	80 95       	com	r24
     c1c:	9c 91       	ld	r25, X
     c1e:	89 23       	and	r24, r25
     c20:	8c 93       	st	X, r24
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
     c22:	81 11       	cpse	r24, r1
     c24:	07 c0       	rjmp	.+14     	; 0xc34 <OS_EventTaskWait+0x56>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
     c26:	84 89       	ldd	r24, Z+20	; 0x14
     c28:	80 95       	com	r24
     c2a:	90 91 d3 04 	lds	r25, 0x04D3
     c2e:	89 23       	and	r24, r25
     c30:	80 93 d3 04 	sts	0x04D3, r24
     c34:	08 95       	ret

00000c36 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
     c36:	fc 01       	movw	r30, r24
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
     c38:	82 89       	ldd	r24, Z+18	; 0x12
     c3a:	db 01       	movw	r26, r22
     c3c:	a8 0f       	add	r26, r24
     c3e:	b1 1d       	adc	r27, r1
     c40:	83 89       	ldd	r24, Z+19	; 0x13
     c42:	80 95       	com	r24
     c44:	16 96       	adiw	r26, 0x06	; 6
     c46:	9c 91       	ld	r25, X
     c48:	16 97       	sbiw	r26, 0x06	; 6
     c4a:	89 23       	and	r24, r25
     c4c:	16 96       	adiw	r26, 0x06	; 6
     c4e:	8c 93       	st	X, r24
    if (pevent->OSEventTbl[y] == 0u) {
     c50:	81 11       	cpse	r24, r1
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <OS_EventTaskRemove+0x2a>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
     c54:	84 89       	ldd	r24, Z+20	; 0x14
     c56:	80 95       	com	r24
     c58:	fb 01       	movw	r30, r22
     c5a:	95 81       	ldd	r25, Z+5	; 0x05
     c5c:	89 23       	and	r24, r25
     c5e:	85 83       	std	Z+5, r24	; 0x05
     c60:	08 95       	ret

00000c62 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	dc 01       	movw	r26, r24
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
     c6a:	15 96       	adiw	r26, 0x05	; 5
     c6c:	ec 91       	ld	r30, X
     c6e:	15 97       	sbiw	r26, 0x05	; 5
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	e0 5c       	subi	r30, 0xC0	; 192
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	10 81       	ld	r17, Z
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     c78:	c1 2f       	mov	r28, r17
     c7a:	d0 e0       	ldi	r29, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	ec 0f       	add	r30, r28
     c80:	fd 1f       	adc	r31, r29
     c82:	e6 81       	ldd	r30, Z+6	; 0x06
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	e0 5c       	subi	r30, 0xC0	; 192
     c88:	fe 4f       	sbci	r31, 0xFE	; 254
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
     c8a:	11 0f       	add	r17, r17
     c8c:	11 0f       	add	r17, r17
     c8e:	11 0f       	add	r17, r17
     c90:	80 81       	ld	r24, Z
     c92:	18 0f       	add	r17, r24
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
     c94:	e1 2f       	mov	r30, r17
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	e8 59       	subi	r30, 0x98	; 152
     c9e:	f9 4f       	sbci	r31, 0xF9	; 249
     ca0:	01 90       	ld	r0, Z+
     ca2:	f0 81       	ld	r31, Z
     ca4:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
     ca6:	12 86       	std	Z+10, r1	; 0x0a
     ca8:	13 86       	std	Z+11, r1	; 0x0b
     caa:	14 86       	std	Z+12, r1	; 0x0c
     cac:	15 86       	std	Z+13, r1	; 0x0d
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
     cae:	71 87       	std	Z+9, r23	; 0x09
     cb0:	60 87       	std	Z+8, r22	; 0x08
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
     cb2:	40 95       	com	r20
     cb4:	86 85       	ldd	r24, Z+14	; 0x0e
     cb6:	48 23       	and	r20, r24
     cb8:	46 87       	std	Z+14, r20	; 0x0e
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
     cba:	27 87       	std	Z+15, r18	; 0x0f
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
     cbc:	43 fd       	sbrc	r20, 3
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <OS_EventTaskRdy+0x76>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
     cc0:	90 91 d3 04 	lds	r25, 0x04D3
     cc4:	84 89       	ldd	r24, Z+20	; 0x14
     cc6:	89 2b       	or	r24, r25
     cc8:	80 93 d3 04 	sts	0x04D3, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
     ccc:	cc 52       	subi	r28, 0x2C	; 44
     cce:	db 4f       	sbci	r29, 0xFB	; 251
     cd0:	98 81       	ld	r25, Y
     cd2:	83 89       	ldd	r24, Z+19	; 0x13
     cd4:	89 2b       	or	r24, r25
     cd6:	88 83       	st	Y, r24
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
     cd8:	bd 01       	movw	r22, r26
     cda:	cf 01       	movw	r24, r30
     cdc:	0e 94 1b 06 	call	0xc36	; 0xc36 <OS_EventTaskRemove>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    }
#endif

    return (prio);
}
     ce0:	81 2f       	mov	r24, r17
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	08 95       	ret

00000cea <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
     cea:	fc 01       	movw	r30, r24
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
     cec:	15 82       	std	Z+5, r1	; 0x05
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
        pevent->OSEventTbl[i] = 0u;
     cee:	16 82       	std	Z+6, r1	; 0x06
     cf0:	17 82       	std	Z+7, r1	; 0x07
     cf2:	08 95       	ret

00000cf4 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
     cf4:	fc 01       	movw	r30, r24
    while (size > 0u) {
     cf6:	61 15       	cp	r22, r1
     cf8:	71 05       	cpc	r23, r1
     cfa:	31 f0       	breq	.+12     	; 0xd08 <OS_MemClr+0x14>
*              3) The clear is done one byte at a time since this will work on any processor irrespective
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
     cfc:	68 0f       	add	r22, r24
     cfe:	79 1f       	adc	r23, r25
                 INT16U  size)
{
    while (size > 0u) {
        *pdest++ = (INT8U)0;
     d00:	11 92       	st	Z+, r1
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
    while (size > 0u) {
     d02:	e6 17       	cp	r30, r22
     d04:	f7 07       	cpc	r31, r23
     d06:	e1 f7       	brne	.-8      	; 0xd00 <OS_MemClr+0xc>
     d08:	08 95       	ret

00000d0a <OSInit>:
*********************************************************************************************************
*/

void  OSInit (void)
{
    OSInitHookBegin();                                           /* Call port specific initialization code   */
     d0a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <OSInitHookBegin>
{
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
     d0e:	10 92 d8 04 	sts	0x04D8, r1
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
     d12:	10 92 86 04 	sts	0x0486, r1

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
     d16:	10 92 96 04 	sts	0x0496, r1

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
     d1a:	10 92 87 04 	sts	0x0487, r1

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
     d1e:	10 92 90 04 	sts	0x0490, r1
     d22:	10 92 91 04 	sts	0x0491, r1
     d26:	10 92 92 04 	sts	0x0492, r1
     d2a:	10 92 93 04 	sts	0x0493, r1
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
     d2e:	10 92 88 04 	sts	0x0488, r1
     d32:	10 92 89 04 	sts	0x0489, r1
     d36:	10 92 8a 04 	sts	0x048A, r1
     d3a:	10 92 8b 04 	sts	0x048B, r1
static  void  OS_InitRdyList (void)
{
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
     d3e:	10 92 d3 04 	sts	0x04D3, r1
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0u;
     d42:	10 92 d4 04 	sts	0x04D4, r1
     d46:	10 92 d5 04 	sts	0x04D5, r1
    }

    OSPrioCur     = 0u;
     d4a:	10 92 8d 04 	sts	0x048D, r1
    OSPrioHighRdy = 0u;
     d4e:	10 92 8c 04 	sts	0x048C, r1

    OSTCBHighRdy  = (OS_TCB *)0;
     d52:	10 92 d0 04 	sts	0x04D0, r1
     d56:	10 92 cf 04 	sts	0x04CF, r1
    OSTCBCur      = (OS_TCB *)0;
     d5a:	10 92 da 04 	sts	0x04DA, r1
     d5e:	10 92 d9 04 	sts	0x04D9, r1
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
     d62:	6d eb       	ldi	r22, 0xBD	; 189
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	8b ea       	ldi	r24, 0xAB	; 171
     d68:	95 e0       	ldi	r25, 0x05	; 5
     d6a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
     d6e:	60 e2       	ldi	r22, 0x20	; 32
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	88 e6       	ldi	r24, 0x68	; 104
     d74:	96 e0       	ldi	r25, 0x06	; 6
     d76:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <OS_MemClr>
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
        ix_next =  ix + 1u;
        ptcb1   = &OSTCBTbl[ix];
     d7e:	45 e1       	ldi	r20, 0x15	; 21
     d80:	48 9f       	mul	r20, r24
     d82:	f0 01       	movw	r30, r0
     d84:	49 9f       	mul	r20, r25
     d86:	f0 0d       	add	r31, r0
     d88:	11 24       	eor	r1, r1
     d8a:	e5 55       	subi	r30, 0x55	; 85
     d8c:	fa 4f       	sbci	r31, 0xFA	; 250
*
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
     d8e:	01 96       	adiw	r24, 0x01	; 1
    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
        ix_next =  ix + 1u;
        ptcb1   = &OSTCBTbl[ix];
        ptcb2   = &OSTCBTbl[ix_next];
     d90:	48 9f       	mul	r20, r24
     d92:	90 01       	movw	r18, r0
     d94:	49 9f       	mul	r20, r25
     d96:	30 0d       	add	r19, r0
     d98:	11 24       	eor	r1, r1
     d9a:	25 55       	subi	r18, 0x55	; 85
     d9c:	3a 4f       	sbci	r19, 0xFA	; 250
        ptcb1->OSTCBNext = ptcb2;
     d9e:	33 83       	std	Z+3, r19	; 0x03
     da0:	22 83       	std	Z+2, r18	; 0x02
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
     da2:	88 30       	cpi	r24, 0x08	; 8
     da4:	91 05       	cpc	r25, r1
     da6:	61 f7       	brne	.-40     	; 0xd80 <OSInit+0x76>
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
     da8:	10 92 56 06 	sts	0x0656, r1
     dac:	10 92 55 06 	sts	0x0655, r1
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
     db0:	10 92 8f 04 	sts	0x048F, r1
     db4:	10 92 8e 04 	sts	0x048E, r1
    OSTCBFreeList           = &OSTCBTbl[0];
     db8:	8b ea       	ldi	r24, 0xAB	; 171
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	90 93 95 04 	sts	0x0495, r25
     dc0:	80 93 94 04 	sts	0x0494, r24
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
     dc4:	60 e5       	ldi	r22, 0x50	; 80
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	8b e5       	ldi	r24, 0x5B	; 91
     dca:	95 e0       	ldi	r25, 0x05	; 5
     dcc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
        ix_next = ix + 1u;
     dd4:	9c 01       	movw	r18, r24
     dd6:	2f 5f       	subi	r18, 0xFF	; 255
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
        pevent1 = &OSEventTbl[ix];
     dda:	fc 01       	movw	r30, r24
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	e5 5a       	subi	r30, 0xA5	; 165
     dea:	fa 4f       	sbci	r31, 0xFA	; 250
        pevent2 = &OSEventTbl[ix_next];
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
     dec:	10 82       	st	Z, r1

    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
        ix_next = ix + 1u;
        pevent1 = &OSEventTbl[ix];
        pevent2 = &OSEventTbl[ix_next];
     dee:	c9 01       	movw	r24, r18
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	85 5a       	subi	r24, 0xA5	; 165
     dfe:	9a 4f       	sbci	r25, 0xFA	; 250
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
        pevent1->OSEventPtr     = pevent2;
     e00:	92 83       	std	Z+2, r25	; 0x02
     e02:	81 83       	std	Z+1, r24	; 0x01
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
        ix_next = ix + 1u;
     e04:	c9 01       	movw	r24, r18
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
     e06:	29 30       	cpi	r18, 0x09	; 9
     e08:	31 05       	cpc	r19, r1
     e0a:	21 f7       	brne	.-56     	; 0xdd4 <OSInit+0xca>
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
#endif
    }
    pevent1                         = &OSEventTbl[ix];
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
     e0c:	10 92 a3 05 	sts	0x05A3, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
     e10:	10 92 a5 05 	sts	0x05A5, r1
     e14:	10 92 a4 05 	sts	0x05A4, r1
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
#endif
    OSEventFreeList                 = &OSEventTbl[0];
     e18:	8b e5       	ldi	r24, 0x5B	; 91
     e1a:	95 e0       	ldi	r25, 0x05	; 5
     e1c:	90 93 d7 04 	sts	0x04D7, r25
     e20:	80 93 d6 04 	sts	0x04D6, r24
#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
     e24:	0e 94 37 09 	call	0x126e	; 0x126e <OS_QInit>
                          (void *)0,                                 /* No TCB extension                     */
                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #endif
#else
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreate(OS_TaskIdle,
     e28:	2f e0       	ldi	r18, 0x0F	; 15
     e2a:	4a e5       	ldi	r20, 0x5A	; 90
     e2c:	55 e0       	ldi	r21, 0x05	; 5
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	8b e1       	ldi	r24, 0x1B	; 27
     e34:	95 e0       	ldi	r25, 0x05	; 5
     e36:	0e 94 33 0a 	call	0x1466	; 0x1466 <OSTaskCreate>

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
     e3a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <OSInitHookEnd>
     e3e:	08 95       	ret

00000e40 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
     e40:	cf 93       	push	r28
    OS_CPU_SR  cpu_sr = 0u;
#endif



    OS_ENTER_CRITICAL();
     e42:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
     e46:	c8 2f       	mov	r28, r24
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
     e48:	80 91 d8 04 	lds	r24, 0x04D8
     e4c:	81 11       	cpse	r24, r1
     e4e:	2e c0       	rjmp	.+92     	; 0xeac <OS_Sched+0x6c>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
     e50:	80 91 86 04 	lds	r24, 0x0486
     e54:	81 11       	cpse	r24, r1
     e56:	2a c0       	rjmp	.+84     	; 0xeac <OS_Sched+0x6c>
            OS_SchedNew();
     e58:	0e 94 05 05 	call	0xa0a	; 0xa0a <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     e5c:	80 91 8c 04 	lds	r24, 0x048C
     e60:	e8 2f       	mov	r30, r24
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	e8 59       	subi	r30, 0x98	; 152
     e6a:	f9 4f       	sbci	r31, 0xF9	; 249
     e6c:	20 81       	ld	r18, Z
     e6e:	31 81       	ldd	r19, Z+1	; 0x01
     e70:	30 93 d0 04 	sts	0x04D0, r19
     e74:	20 93 cf 04 	sts	0x04CF, r18
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
     e78:	90 91 8d 04 	lds	r25, 0x048D
     e7c:	89 17       	cp	r24, r25
     e7e:	b1 f0       	breq	.+44     	; 0xeac <OS_Sched+0x6c>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
     e80:	40 91 90 04 	lds	r20, 0x0490
     e84:	50 91 91 04 	lds	r21, 0x0491
     e88:	60 91 92 04 	lds	r22, 0x0492
     e8c:	70 91 93 04 	lds	r23, 0x0493
     e90:	4f 5f       	subi	r20, 0xFF	; 255
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	6f 4f       	sbci	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	40 93 90 04 	sts	0x0490, r20
     e9c:	50 93 91 04 	sts	0x0491, r21
     ea0:	60 93 92 04 	sts	0x0492, r22
     ea4:	70 93 93 04 	sts	0x0493, r23
                OS_TASK_SW();                          /* Perform a context switch                     */
     ea8:	0e 94 86 00 	call	0x10c	; 0x10c <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
     eac:	8c 2f       	mov	r24, r28
     eae:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
}
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	f8 2e       	mov	r15, r24
     eca:	8b 01       	movw	r16, r22
#if OS_TASK_REG_TBL_SIZE > 0u
    INT8U      i;
#endif


    OS_ENTER_CRITICAL();
     ecc:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     ed0:	c0 91 94 04 	lds	r28, 0x0494
     ed4:	d0 91 95 04 	lds	r29, 0x0495
    if (ptcb != (OS_TCB *)0) {
     ed8:	20 97       	sbiw	r28, 0x00	; 0
     eda:	09 f4       	brne	.+2      	; 0xede <OS_TCBInit+0x28>
     edc:	6a c0       	rjmp	.+212    	; 0xfb2 <OS_TCBInit+0xfc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
     ede:	2a 81       	ldd	r18, Y+2	; 0x02
     ee0:	3b 81       	ldd	r19, Y+3	; 0x03
     ee2:	30 93 95 04 	sts	0x0495, r19
     ee6:	20 93 94 04 	sts	0x0494, r18
        OS_EXIT_CRITICAL();
     eea:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
     eee:	19 83       	std	Y+1, r17	; 0x01
     ef0:	08 83       	st	Y, r16
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
     ef2:	f8 8a       	std	Y+16, r15	; 0x10
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
     ef4:	1e 86       	std	Y+14, r1	; 0x0e
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
     ef6:	1f 86       	std	Y+15, r1	; 0x0f
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
     ef8:	1a 86       	std	Y+10, r1	; 0x0a
     efa:	1b 86       	std	Y+11, r1	; 0x0b
     efc:	1c 86       	std	Y+12, r1	; 0x0c
     efe:	1d 86       	std	Y+13, r1	; 0x0d
#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
     f00:	0f 2d       	mov	r16, r15
     f02:	06 95       	lsr	r16
     f04:	06 95       	lsr	r16
     f06:	06 95       	lsr	r16
     f08:	0a 8b       	std	Y+18, r16	; 0x12
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
     f0a:	8f 2d       	mov	r24, r15
     f0c:	87 70       	andi	r24, 0x07	; 7
     f0e:	89 8b       	std	Y+17, r24	; 0x11
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	5a 01       	movw	r10, r20
     f1a:	6b 01       	movw	r12, r22
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <OS_TCBInit+0x70>
     f1e:	aa 0c       	add	r10, r10
     f20:	bb 1c       	adc	r11, r11
     f22:	cc 1c       	adc	r12, r12
     f24:	dd 1c       	adc	r13, r13
     f26:	0a 95       	dec	r16
     f28:	d2 f7       	brpl	.-12     	; 0xf1e <OS_TCBInit+0x68>
     f2a:	ac 8a       	std	Y+20, r10	; 0x14
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <OS_TCBInit+0x80>
     f2e:	44 0f       	add	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	66 1f       	adc	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	8a 95       	dec	r24
     f38:	d2 f7       	brpl	.-12     	; 0xf2e <OS_TCBInit+0x78>
     f3a:	4b 8b       	std	Y+19, r20	; 0x13

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
     f3c:	1f 82       	std	Y+7, r1	; 0x07
     f3e:	1e 82       	std	Y+6, r1	; 0x06
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
     f40:	19 86       	std	Y+9, r1	; 0x09
     f42:	18 86       	std	Y+8, r1	; 0x08
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
            ptcb->OSTCBRegTbl[i] = 0u;
        }
#endif

        OSTCBInitHook(ptcb);
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 db 04 	call	0x9b6	; 0x9b6 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
     f50:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        OSTCBPrioTbl[prio] = ptcb;
     f54:	ef 2d       	mov	r30, r15
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	e8 59       	subi	r30, 0x98	; 152
     f5e:	f9 4f       	sbci	r31, 0xF9	; 249
     f60:	d1 83       	std	Z+1, r29	; 0x01
     f62:	c0 83       	st	Z, r28
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
     f64:	e0 91 8e 04 	lds	r30, 0x048E
     f68:	f0 91 8f 04 	lds	r31, 0x048F
     f6c:	fb 83       	std	Y+3, r31	; 0x03
     f6e:	ea 83       	std	Y+2, r30	; 0x02
        ptcb->OSTCBPrev    = (OS_TCB *)0;
     f70:	1d 82       	std	Y+5, r1	; 0x05
     f72:	1c 82       	std	Y+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
     f74:	30 97       	sbiw	r30, 0x00	; 0
     f76:	11 f0       	breq	.+4      	; 0xf7c <OS_TCBInit+0xc6>
            OSTCBList->OSTCBPrev = ptcb;
     f78:	d5 83       	std	Z+5, r29	; 0x05
     f7a:	c4 83       	std	Z+4, r28	; 0x04
        }
        OSTCBList               = ptcb;
     f7c:	d0 93 8f 04 	sts	0x048F, r29
     f80:	c0 93 8e 04 	sts	0x048E, r28
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     f84:	20 91 d3 04 	lds	r18, 0x04D3
     f88:	9c 89       	ldd	r25, Y+20	; 0x14
     f8a:	92 2b       	or	r25, r18
     f8c:	90 93 d3 04 	sts	0x04D3, r25
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     f90:	ea 89       	ldd	r30, Y+18	; 0x12
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	ec 52       	subi	r30, 0x2C	; 44
     f96:	fb 4f       	sbci	r31, 0xFB	; 251
     f98:	20 81       	ld	r18, Z
     f9a:	9b 89       	ldd	r25, Y+19	; 0x13
     f9c:	92 2b       	or	r25, r18
     f9e:	90 83       	st	Z, r25
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
     fa0:	90 91 96 04 	lds	r25, 0x0496
     fa4:	9f 5f       	subi	r25, 0xFF	; 255
     fa6:	90 93 96 04 	sts	0x0496, r25
        OS_EXIT_CRITICAL();
     faa:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_NONE);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <OS_TCBInit+0x102>
    }
    OS_EXIT_CRITICAL();
     fb2:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_TASK_NO_MORE_TCB);
     fb6:	82 e4       	ldi	r24, 0x42	; 66
}
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	af 90       	pop	r10
     fca:	08 95       	ret

00000fcc <OSQCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void    **start,
                      INT16U    size)
{
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	7c 01       	movw	r14, r24
     fde:	6b 01       	movw	r12, r22
    if (OSSafetyCriticalStartFlag == OS_TRUE) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
     fe0:	80 91 d8 04 	lds	r24, 0x04D8
     fe4:	81 11       	cpse	r24, r1
     fe6:	4e c0       	rjmp	.+156    	; 0x1084 <OSQCreate+0xb8>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    }
    OS_ENTER_CRITICAL();
     fe8:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
     fec:	c0 91 d6 04 	lds	r28, 0x04D6
     ff0:	d0 91 d7 04 	lds	r29, 0x04D7
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
     ff4:	20 97       	sbiw	r28, 0x00	; 0
     ff6:	09 f4       	brne	.+2      	; 0xffa <OSQCreate+0x2e>
     ff8:	4a c0       	rjmp	.+148    	; 0x108e <OSQCreate+0xc2>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	3a 81       	ldd	r19, Y+2	; 0x02
     ffe:	30 93 d7 04 	sts	0x04D7, r19
    1002:	20 93 d6 04 	sts	0x04D6, r18
    }
    OS_EXIT_CRITICAL();
    1006:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
        OS_ENTER_CRITICAL();
    100a:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    100e:	00 91 d1 04 	lds	r16, 0x04D1
    1012:	10 91 d2 04 	lds	r17, 0x04D2
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    1016:	01 15       	cp	r16, r1
    1018:	11 05       	cpc	r17, r1
    101a:	29 f1       	breq	.+74     	; 0x1066 <OSQCreate+0x9a>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    101c:	f8 01       	movw	r30, r16
    101e:	20 81       	ld	r18, Z
    1020:	31 81       	ldd	r19, Z+1	; 0x01
    1022:	30 93 d2 04 	sts	0x04D2, r19
    1026:	20 93 d1 04 	sts	0x04D1, r18
            OS_EXIT_CRITICAL();
    102a:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    102e:	f8 01       	movw	r30, r16
    1030:	f3 82       	std	Z+3, r15	; 0x03
    1032:	e2 82       	std	Z+2, r14	; 0x02
            pq->OSQEnd             = &start[size];
    1034:	c6 01       	movw	r24, r12
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	8e 0d       	add	r24, r14
    103c:	9f 1d       	adc	r25, r15
    103e:	95 83       	std	Z+5, r25	; 0x05
    1040:	84 83       	std	Z+4, r24	; 0x04
            pq->OSQIn              = start;
    1042:	f7 82       	std	Z+7, r15	; 0x07
    1044:	e6 82       	std	Z+6, r14	; 0x06
            pq->OSQOut             = start;
    1046:	f1 86       	std	Z+9, r15	; 0x09
    1048:	e0 86       	std	Z+8, r14	; 0x08
            pq->OSQSize            = size;
    104a:	d3 86       	std	Z+11, r13	; 0x0b
    104c:	c2 86       	std	Z+10, r12	; 0x0a
            pq->OSQEntries         = 0u;
    104e:	15 86       	std	Z+13, r1	; 0x0d
    1050:	14 86       	std	Z+12, r1	; 0x0c
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	88 83       	st	Y, r24
            pevent->OSEventCnt     = 0u;
    1056:	1c 82       	std	Y+4, r1	; 0x04
    1058:	1b 82       	std	Y+3, r1	; 0x03
            pevent->OSEventPtr     = pq;
    105a:	1a 83       	std	Y+2, r17	; 0x02
    105c:	09 83       	std	Y+1, r16	; 0x01
#if OS_EVENT_NAME_EN > 0u
            pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 75 06 	call	0xcea	; 0xcea <OS_EventWaitListInit>
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <OSQCreate+0xbc>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    1066:	20 91 d6 04 	lds	r18, 0x04D6
    106a:	30 91 d7 04 	lds	r19, 0x04D7
    106e:	3a 83       	std	Y+2, r19	; 0x02
    1070:	29 83       	std	Y+1, r18	; 0x01
            OSEventFreeList    = pevent;
    1072:	d0 93 d7 04 	sts	0x04D7, r29
    1076:	c0 93 d6 04 	sts	0x04D6, r28
            OS_EXIT_CRITICAL();
    107a:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
            pevent = (OS_EVENT *)0;
    107e:	c0 e0       	ldi	r28, 0x00	; 0
    1080:	d0 e0       	ldi	r29, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <OSQCreate+0xbc>
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	d0 e0       	ldi	r29, 0x00	; 0
    1088:	8c 2f       	mov	r24, r28
    108a:	9d 2f       	mov	r25, r29
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <OSQCreate+0xc8>
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    108e:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    1092:	fa cf       	rjmp	.-12     	; 0x1088 <OSQCreate+0xbc>
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
        }
    }
    return (pevent);
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	df 90       	pop	r13
    10a2:	cf 90       	pop	r12
    10a4:	08 95       	ret

000010a6 <OSQPend>:
*/

void  *OSQPend (OS_EVENT  *pevent,
                INT32U     timeout,
                INT8U     *perr)
{
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	8c 01       	movw	r16, r24
    10ba:	6a 01       	movw	r12, r20
    10bc:	7b 01       	movw	r14, r22
    10be:	e9 01       	movw	r28, r18
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    10c0:	dc 01       	movw	r26, r24
    10c2:	8c 91       	ld	r24, X
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	29 f0       	breq	.+10     	; 0x10d2 <OSQPend+0x2c>
        *perr = OS_ERR_EVENT_TYPE;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	88 83       	st	Y, r24
        return ((void *)0);
    10cc:	e1 2c       	mov	r14, r1
    10ce:	f1 2c       	mov	r15, r1
    10d0:	76 c0       	rjmp	.+236    	; 0x11be <OSQPend+0x118>
    }
    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
    10d2:	80 91 d8 04 	lds	r24, 0x04D8
    10d6:	88 23       	and	r24, r24
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <OSQPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	88 83       	st	Y, r24
        return ((void *)0);
    10de:	e1 2c       	mov	r14, r1
    10e0:	f1 2c       	mov	r15, r1
    10e2:	6d c0       	rjmp	.+218    	; 0x11be <OSQPend+0x118>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
    10e4:	80 91 86 04 	lds	r24, 0x0486
    10e8:	88 23       	and	r24, r24
    10ea:	29 f0       	breq	.+10     	; 0x10f6 <OSQPend+0x50>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    10ec:	8d e0       	ldi	r24, 0x0D	; 13
    10ee:	88 83       	st	Y, r24
        return ((void *)0);
    10f0:	e1 2c       	mov	r14, r1
    10f2:	f1 2c       	mov	r15, r1
    10f4:	64 c0       	rjmp	.+200    	; 0x11be <OSQPend+0x118>
    }
    OS_ENTER_CRITICAL();
    10f6:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    10fa:	b8 2e       	mov	r11, r24
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    10fc:	d8 01       	movw	r26, r16
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	12 97       	sbiw	r26, 0x02	; 2
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
    1106:	24 85       	ldd	r18, Z+12	; 0x0c
    1108:	35 85       	ldd	r19, Z+13	; 0x0d
    110a:	21 15       	cp	r18, r1
    110c:	31 05       	cpc	r19, r1
    110e:	c1 f0       	breq	.+48     	; 0x1140 <OSQPend+0x9a>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    1110:	a0 85       	ldd	r26, Z+8	; 0x08
    1112:	b1 85       	ldd	r27, Z+9	; 0x09
    1114:	ed 90       	ld	r14, X+
    1116:	fd 90       	ld	r15, X+
    1118:	b1 87       	std	Z+9, r27	; 0x09
    111a:	a0 87       	std	Z+8, r26	; 0x08
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    111c:	21 50       	subi	r18, 0x01	; 1
    111e:	31 09       	sbc	r19, r1
    1120:	35 87       	std	Z+13, r19	; 0x0d
    1122:	24 87       	std	Z+12, r18	; 0x0c
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    1124:	84 81       	ldd	r24, Z+4	; 0x04
    1126:	95 81       	ldd	r25, Z+5	; 0x05
    1128:	a8 17       	cp	r26, r24
    112a:	b9 07       	cpc	r27, r25
    112c:	21 f4       	brne	.+8      	; 0x1136 <OSQPend+0x90>
            pq->OSQOut = pq->OSQStart;
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	91 87       	std	Z+9, r25	; 0x09
    1134:	80 87       	std	Z+8, r24	; 0x08
        }
        OS_EXIT_CRITICAL();
    1136:	8b 2d       	mov	r24, r11
    1138:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        *perr = OS_ERR_NONE;
    113c:	18 82       	st	Y, r1
        return (pmsg);                           /* Return message received                            */
    113e:	3f c0       	rjmp	.+126    	; 0x11be <OSQPend+0x118>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    1140:	e0 91 d9 04 	lds	r30, 0x04D9
    1144:	f0 91 da 04 	lds	r31, 0x04DA
    1148:	86 85       	ldd	r24, Z+14	; 0x0e
    114a:	84 60       	ori	r24, 0x04	; 4
    114c:	86 87       	std	Z+14, r24	; 0x0e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    114e:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    1150:	c2 86       	std	Z+10, r12	; 0x0a
    1152:	d3 86       	std	Z+11, r13	; 0x0b
    1154:	e4 86       	std	Z+12, r14	; 0x0c
    1156:	f5 86       	std	Z+13, r15	; 0x0d
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    1158:	c8 01       	movw	r24, r16
    115a:	0e 94 ef 05 	call	0xbde	; 0xbde <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    115e:	8b 2d       	mov	r24, r11
    1160:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    1164:	0e 94 20 07 	call	0xe40	; 0xe40 <OS_Sched>
    OS_ENTER_CRITICAL();
    1168:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    116c:	d8 2e       	mov	r13, r24
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    116e:	e0 91 d9 04 	lds	r30, 0x04D9
    1172:	f0 91 da 04 	lds	r31, 0x04DA
    1176:	97 85       	ldd	r25, Z+15	; 0x0f
    1178:	99 23       	and	r25, r25
    117a:	19 f0       	breq	.+6      	; 0x1182 <OSQPend+0xdc>
    117c:	92 30       	cpi	r25, 0x02	; 2
    117e:	51 f4       	brne	.+20     	; 0x1194 <OSQPend+0xee>
    1180:	04 c0       	rjmp	.+8      	; 0x118a <OSQPend+0xe4>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    1182:	e0 84       	ldd	r14, Z+8	; 0x08
    1184:	f1 84       	ldd	r15, Z+9	; 0x09
            *perr =  OS_ERR_NONE;
    1186:	18 82       	st	Y, r1
             break;
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <OSQPend+0xfe>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    118a:	8e e0       	ldi	r24, 0x0E	; 14
    118c:	88 83       	st	Y, r24
             pmsg =  OSTCBCur->OSTCBMsg;
            *perr =  OS_ERR_NONE;
             break;

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    118e:	e1 2c       	mov	r14, r1
    1190:	f1 2c       	mov	r15, r1
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
             break;
    1192:	08 c0       	rjmp	.+16     	; 0x11a4 <OSQPend+0xfe>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    1194:	b8 01       	movw	r22, r16
    1196:	cf 01       	movw	r24, r30
    1198:	0e 94 1b 06 	call	0xc36	; 0xc36 <OS_EventTaskRemove>
             pmsg = (void *)0;
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    119c:	8a e0       	ldi	r24, 0x0A	; 10
    119e:	88 83       	st	Y, r24
             break;

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
             pmsg = (void *)0;
    11a0:	e1 2c       	mov	r14, r1
    11a2:	f1 2c       	mov	r15, r1
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    11a4:	e0 91 d9 04 	lds	r30, 0x04D9
    11a8:	f0 91 da 04 	lds	r31, 0x04DA
    11ac:	16 86       	std	Z+14, r1	; 0x0e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    11ae:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    11b0:	17 82       	std	Z+7, r1	; 0x07
    11b2:	16 82       	std	Z+6, r1	; 0x06
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    11b4:	11 86       	std	Z+9, r1	; 0x09
    11b6:	10 86       	std	Z+8, r1	; 0x08
    OS_EXIT_CRITICAL();
    11b8:	8d 2d       	mov	r24, r13
    11ba:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (pmsg);                                    /* Return received message                       */
}
    11be:	8e 2d       	mov	r24, r14
    11c0:	9f 2d       	mov	r25, r15
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	bf 90       	pop	r11
    11d4:	08 95       	ret

000011d6 <OSQPost>:
*/

#if OS_Q_POST_EN > 0u
INT8U  OSQPost (OS_EVENT  *pevent,
                void      *pmsg)
{
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	ec 01       	movw	r28, r24
    11e2:	8b 01       	movw	r16, r22
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    11e4:	88 81       	ld	r24, Y
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	d9 f5       	brne	.+118    	; 0x1260 <OSQPost+0x8a>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    11ea:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    11ee:	f8 2e       	mov	r15, r24
    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	88 23       	and	r24, r24
    11f4:	69 f0       	breq	.+26     	; 0x1210 <OSQPost+0x3a>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	44 e0       	ldi	r20, 0x04	; 4
    11fa:	b8 01       	movw	r22, r16
    11fc:	ce 01       	movw	r24, r28
    11fe:	0e 94 31 06 	call	0xc62	; 0xc62 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    1202:	8f 2d       	mov	r24, r15
    1204:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OS_Sched();                                    /* Find highest priority task ready to run      */
    1208:	0e 94 20 07 	call	0xe40	; 0xe40 <OS_Sched>
        return (OS_ERR_NONE);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	29 c0       	rjmp	.+82     	; 0x1262 <OSQPost+0x8c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    1210:	e9 81       	ldd	r30, Y+1	; 0x01
    1212:	fa 81       	ldd	r31, Y+2	; 0x02
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    1214:	44 85       	ldd	r20, Z+12	; 0x0c
    1216:	55 85       	ldd	r21, Z+13	; 0x0d
    1218:	22 85       	ldd	r18, Z+10	; 0x0a
    121a:	33 85       	ldd	r19, Z+11	; 0x0b
    121c:	42 17       	cp	r20, r18
    121e:	53 07       	cpc	r21, r19
    1220:	28 f0       	brcs	.+10     	; 0x122c <OSQPost+0x56>
        OS_EXIT_CRITICAL();
    1222:	8f 2d       	mov	r24, r15
    1224:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_Q_FULL);
    1228:	8e e1       	ldi	r24, 0x1E	; 30
    122a:	1b c0       	rjmp	.+54     	; 0x1262 <OSQPost+0x8c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    122c:	a6 81       	ldd	r26, Z+6	; 0x06
    122e:	b7 81       	ldd	r27, Z+7	; 0x07
    1230:	0d 93       	st	X+, r16
    1232:	1d 93       	st	X+, r17
    1234:	b7 83       	std	Z+7, r27	; 0x07
    1236:	a6 83       	std	Z+6, r26	; 0x06
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    1238:	24 85       	ldd	r18, Z+12	; 0x0c
    123a:	35 85       	ldd	r19, Z+13	; 0x0d
    123c:	2f 5f       	subi	r18, 0xFF	; 255
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	35 87       	std	Z+13, r19	; 0x0d
    1242:	24 87       	std	Z+12, r18	; 0x0c
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    1244:	24 81       	ldd	r18, Z+4	; 0x04
    1246:	35 81       	ldd	r19, Z+5	; 0x05
    1248:	a2 17       	cp	r26, r18
    124a:	b3 07       	cpc	r27, r19
    124c:	21 f4       	brne	.+8      	; 0x1256 <OSQPost+0x80>
        pq->OSQIn = pq->OSQStart;
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	97 83       	std	Z+7, r25	; 0x07
    1254:	86 83       	std	Z+6, r24	; 0x06
    }
    OS_EXIT_CRITICAL();
    1256:	8f 2d       	mov	r24, r15
    1258:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_NONE);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <OSQPost+0x8c>
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
        return (OS_ERR_EVENT_TYPE);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
        pq->OSQIn = pq->OSQStart;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	08 95       	ret

0000126e <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    1272:	68 e3       	ldi	r22, 0x38	; 56
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	87 e9       	ldi	r24, 0x97	; 151
    1278:	94 e0       	ldi	r25, 0x04	; 4
    127a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
        ix_next = ix + 1u;
        pq1 = &OSQTbl[ix];
        pq2 = &OSQTbl[ix_next];
        pq1->OSQPtr = pq2;
    127e:	e7 e9       	ldi	r30, 0x97	; 151
    1280:	f4 e0       	ldi	r31, 0x04	; 4
    1282:	a5 ea       	ldi	r26, 0xA5	; 165
    1284:	b4 e0       	ldi	r27, 0x04	; 4
    1286:	b1 83       	std	Z+1, r27	; 0x01
    1288:	a0 83       	st	Z, r26
    128a:	c3 eb       	ldi	r28, 0xB3	; 179
    128c:	d4 e0       	ldi	r29, 0x04	; 4
    128e:	cd 93       	st	X+, r28
    1290:	dc 93       	st	X, r29
    1292:	a1 ec       	ldi	r26, 0xC1	; 193
    1294:	b4 e0       	ldi	r27, 0x04	; 4
    1296:	b9 83       	std	Y+1, r27	; 0x01
    1298:	a8 83       	st	Y, r26
    }
    pq1         = &OSQTbl[ix];
    pq1->OSQPtr = (OS_Q *)0;
    129a:	1d 92       	st	X+, r1
    129c:	1c 92       	st	X, r1
    OSQFreeList = &OSQTbl[0];
    129e:	f0 93 d2 04 	sts	0x04D2, r31
    12a2:	e0 93 d1 04 	sts	0x04D1, r30
#endif
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	8c 01       	movw	r16, r24
    if (OSSafetyCriticalStartFlag == OS_TRUE) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    12b6:	80 91 d8 04 	lds	r24, 0x04D8
    12ba:	81 11       	cpse	r24, r1
    12bc:	1a c0       	rjmp	.+52     	; 0x12f2 <OSSemCreate+0x46>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
    12be:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    12c2:	c0 91 d6 04 	lds	r28, 0x04D6
    12c6:	d0 91 d7 04 	lds	r29, 0x04D7
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    12ca:	20 97       	sbiw	r28, 0x00	; 0
    12cc:	b9 f0       	breq	.+46     	; 0x12fc <OSSemCreate+0x50>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    12ce:	29 81       	ldd	r18, Y+1	; 0x01
    12d0:	3a 81       	ldd	r19, Y+2	; 0x02
    12d2:	30 93 d7 04 	sts	0x04D7, r19
    12d6:	20 93 d6 04 	sts	0x04D6, r18
    }
    OS_EXIT_CRITICAL();
    12da:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	88 83       	st	Y, r24
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    12e2:	1c 83       	std	Y+4, r17	; 0x04
    12e4:	0b 83       	std	Y+3, r16	; 0x03
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    12e6:	1a 82       	std	Y+2, r1	; 0x02
    12e8:	19 82       	std	Y+1, r1	; 0x01
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    12ea:	ce 01       	movw	r24, r28
    12ec:	0e 94 75 06 	call	0xcea	; 0xcea <OS_EventWaitListInit>
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <OSSemCreate+0x4a>
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	8c 2f       	mov	r24, r28
    12f8:	9d 2f       	mov	r25, r29
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <OSSemCreate+0x56>
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    12fc:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    1300:	fa cf       	rjmp	.-12     	; 0x12f6 <OSSemCreate+0x4a>
        pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    }
    return (pevent);
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	08 95       	ret

0000130c <OSSemPend>:
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
    1320:	6a 01       	movw	r12, r20
    1322:	7b 01       	movw	r14, r22
    1324:	89 01       	movw	r16, r18
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1326:	88 81       	ld	r24, Y
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	21 f0       	breq	.+8      	; 0x1334 <OSSemPend+0x28>
        *perr = OS_ERR_EVENT_TYPE;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	f9 01       	movw	r30, r18
    1330:	80 83       	st	Z, r24
        return;
    1332:	5b c0       	rjmp	.+182    	; 0x13ea <OSSemPend+0xde>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
    1334:	80 91 d8 04 	lds	r24, 0x04D8
    1338:	88 23       	and	r24, r24
    133a:	21 f0       	breq	.+8      	; 0x1344 <OSSemPend+0x38>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	f9 01       	movw	r30, r18
    1340:	80 83       	st	Z, r24
        return;
    1342:	53 c0       	rjmp	.+166    	; 0x13ea <OSSemPend+0xde>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
    1344:	80 91 86 04 	lds	r24, 0x0486
    1348:	88 23       	and	r24, r24
    134a:	21 f0       	breq	.+8      	; 0x1354 <OSSemPend+0x48>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    134c:	8d e0       	ldi	r24, 0x0D	; 13
    134e:	f9 01       	movw	r30, r18
    1350:	80 83       	st	Z, r24
        return;
    1352:	4b c0       	rjmp	.+150    	; 0x13ea <OSSemPend+0xde>
    }
    OS_ENTER_CRITICAL();
    1354:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    1358:	b8 2e       	mov	r11, r24
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	49 f0       	breq	.+18     	; 0x1376 <OSSemPend+0x6a>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    1364:	21 50       	subi	r18, 0x01	; 1
    1366:	31 09       	sbc	r19, r1
    1368:	3c 83       	std	Y+4, r19	; 0x04
    136a:	2b 83       	std	Y+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    136c:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        *perr = OS_ERR_NONE;
    1370:	f8 01       	movw	r30, r16
    1372:	10 82       	st	Z, r1
        return;
    1374:	3a c0       	rjmp	.+116    	; 0x13ea <OSSemPend+0xde>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    1376:	e0 91 d9 04 	lds	r30, 0x04D9
    137a:	f0 91 da 04 	lds	r31, 0x04DA
    137e:	86 85       	ldd	r24, Z+14	; 0x0e
    1380:	81 60       	ori	r24, 0x01	; 1
    1382:	86 87       	std	Z+14, r24	; 0x0e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    1384:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    1386:	c2 86       	std	Z+10, r12	; 0x0a
    1388:	d3 86       	std	Z+11, r13	; 0x0b
    138a:	e4 86       	std	Z+12, r14	; 0x0c
    138c:	f5 86       	std	Z+13, r15	; 0x0d
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    138e:	ce 01       	movw	r24, r28
    1390:	0e 94 ef 05 	call	0xbde	; 0xbde <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    1394:	8b 2d       	mov	r24, r11
    1396:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    OS_Sched();                                       /* Find next highest priority task ready         */
    139a:	0e 94 20 07 	call	0xe40	; 0xe40 <OS_Sched>
    OS_ENTER_CRITICAL();
    139e:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    13a2:	f8 2e       	mov	r15, r24
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    13a4:	e0 91 d9 04 	lds	r30, 0x04D9
    13a8:	f0 91 da 04 	lds	r31, 0x04DA
    13ac:	97 85       	ldd	r25, Z+15	; 0x0f
    13ae:	99 23       	and	r25, r25
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <OSSemPend+0xac>
    13b2:	92 30       	cpi	r25, 0x02	; 2
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <OSSemPend+0xba>
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <OSSemPend+0xb2>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    13b8:	f8 01       	movw	r30, r16
    13ba:	10 82       	st	Z, r1
             break;
    13bc:	0b c0       	rjmp	.+22     	; 0x13d4 <OSSemPend+0xc8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    13be:	8e e0       	ldi	r24, 0x0E	; 14
    13c0:	f8 01       	movw	r30, r16
    13c2:	80 83       	st	Z, r24
             break;
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <OSSemPend+0xc8>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    13c6:	be 01       	movw	r22, r28
    13c8:	cf 01       	movw	r24, r30
    13ca:	0e 94 1b 06 	call	0xc36	; 0xc36 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    13ce:	8a e0       	ldi	r24, 0x0A	; 10
    13d0:	f8 01       	movw	r30, r16
    13d2:	80 83       	st	Z, r24
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    13d4:	e0 91 d9 04 	lds	r30, 0x04D9
    13d8:	f0 91 da 04 	lds	r31, 0x04DA
    13dc:	16 86       	std	Z+14, r1	; 0x0e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    13de:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    13e0:	17 82       	std	Z+7, r1	; 0x07
    13e2:	16 82       	std	Z+6, r1	; 0x06
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
    13e4:	8f 2d       	mov	r24, r15
    13e6:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
}
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	08 95       	ret

000013fe <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	ec 01       	movw	r28, r24
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1406:	88 81       	ld	r24, Y
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	41 f5       	brne	.+80     	; 0x145c <OSSemPost+0x5e>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    140c:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    1410:	18 2f       	mov	r17, r24
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	99 23       	and	r25, r25
    1416:	71 f0       	breq	.+28     	; 0x1434 <OSSemPost+0x36>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	ce 01       	movw	r24, r28
    1422:	0e 94 31 06 	call	0xc62	; 0xc62 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    1426:	81 2f       	mov	r24, r17
    1428:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OS_Sched();                                   /* Find HPT ready to run                         */
    142c:	0e 94 20 07 	call	0xe40	; 0xe40 <OS_Sched>
        return (OS_ERR_NONE);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	15 c0       	rjmp	.+42     	; 0x145e <OSSemPost+0x60>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	2f 3f       	cpi	r18, 0xFF	; 255
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	38 07       	cpc	r19, r24
    143e:	49 f0       	breq	.+18     	; 0x1452 <OSSemPost+0x54>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    1440:	2f 5f       	subi	r18, 0xFF	; 255
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	3c 83       	std	Y+4, r19	; 0x04
    1446:	2b 83       	std	Y+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    1448:	81 2f       	mov	r24, r17
    144a:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_NONE);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	06 c0       	rjmp	.+12     	; 0x145e <OSSemPost+0x60>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    1452:	81 2f       	mov	r24, r17
    1454:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_SEM_OVF);
    1458:	83 e3       	ldi	r24, 0x33	; 51
    145a:	01 c0       	rjmp	.+2      	; 0x145e <OSSemPost+0x60>
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    145c:	81 e0       	ldi	r24, 0x01	; 1
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	08 95       	ret

00001466 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	8c 01       	movw	r16, r24
    147e:	7b 01       	movw	r14, r22
    1480:	6a 01       	movw	r12, r20
    1482:	92 2e       	mov	r9, r18
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    1484:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
    1488:	90 91 d8 04 	lds	r25, 0x04D8
    148c:	99 23       	and	r25, r25
    148e:	21 f0       	breq	.+8      	; 0x1498 <OSTaskCreate+0x32>
        OS_EXIT_CRITICAL();
    1490:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_TASK_CREATE_ISR);
    1494:	1c e3       	ldi	r17, 0x3C	; 60
    1496:	45 c0       	rjmp	.+138    	; 0x1522 <OSTaskCreate+0xbc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    1498:	c9 2d       	mov	r28, r9
    149a:	d0 e0       	ldi	r29, 0x00	; 0
    149c:	fe 01       	movw	r30, r28
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e8 59       	subi	r30, 0x98	; 152
    14a4:	f9 4f       	sbci	r31, 0xF9	; 249
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	ef 2b       	or	r30, r31
    14ae:	b1 f5       	brne	.+108    	; 0x151c <OSTaskCreate+0xb6>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    14b0:	fe 01       	movw	r30, r28
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	e8 59       	subi	r30, 0x98	; 152
    14b8:	f9 4f       	sbci	r31, 0xF9	; 249
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	31 83       	std	Z+1, r19	; 0x01
    14c0:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    14c2:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	a6 01       	movw	r20, r12
    14cc:	b7 01       	movw	r22, r14
    14ce:	c8 01       	movw	r24, r16
    14d0:	0e 94 46 04 	call	0x88c	; 0x88c <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
    14d4:	a1 2c       	mov	r10, r1
    14d6:	b1 2c       	mov	r11, r1
    14d8:	c1 2c       	mov	r12, r1
    14da:	d1 2c       	mov	r13, r1
    14dc:	e1 2c       	mov	r14, r1
    14de:	f1 2c       	mov	r15, r1
    14e0:	87 01       	movw	r16, r14
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	bc 01       	movw	r22, r24
    14ec:	89 2d       	mov	r24, r9
    14ee:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OS_TCBInit>
    14f2:	18 2f       	mov	r17, r24
        if (err == OS_ERR_NONE) {
    14f4:	81 11       	cpse	r24, r1
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <OSTaskCreate+0xa0>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    14f8:	80 91 87 04 	lds	r24, 0x0487
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	89 f4       	brne	.+34     	; 0x1522 <OSTaskCreate+0xbc>
                OS_Sched();
    1500:	0e 94 20 07 	call	0xe40	; 0xe40 <OS_Sched>
    1504:	0e c0       	rjmp	.+28     	; 0x1522 <OSTaskCreate+0xbc>
            }
        } else {
            OS_ENTER_CRITICAL();
    1506:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    150a:	cc 0f       	add	r28, r28
    150c:	dd 1f       	adc	r29, r29
    150e:	c8 59       	subi	r28, 0x98	; 152
    1510:	d9 4f       	sbci	r29, 0xF9	; 249
    1512:	19 82       	std	Y+1, r1	; 0x01
    1514:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
    1516:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <OSTaskCreate+0xbc>
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    151c:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_PRIO_EXIST);
    1520:	18 e2       	ldi	r17, 0x28	; 40
}
    1522:	81 2f       	mov	r24, r17
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	08 95       	ret

0000153c <OS_TaskReturn>:
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
    153c:	80 91 d9 04 	lds	r24, 0x04D9
    1540:	90 91 da 04 	lds	r25, 0x04DA
    1544:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    1548:	6a ef       	ldi	r22, 0xFA	; 250
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OSTimeDly>
    1554:	f9 cf       	rjmp	.-14     	; 0x1548 <OS_TaskReturn+0xc>

00001556 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	6b 01       	movw	r12, r22
    1560:	7c 01       	movw	r14, r24
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    1562:	80 91 d8 04 	lds	r24, 0x04D8
    1566:	81 11       	cpse	r24, r1
    1568:	29 c0       	rjmp	.+82     	; 0x15bc <OSTimeDly+0x66>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
    156a:	80 91 86 04 	lds	r24, 0x0486
    156e:	81 11       	cpse	r24, r1
    1570:	25 c0       	rjmp	.+74     	; 0x15bc <OSTimeDly+0x66>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
    1572:	c1 14       	cp	r12, r1
    1574:	d1 04       	cpc	r13, r1
    1576:	e1 04       	cpc	r14, r1
    1578:	f1 04       	cpc	r15, r1
    157a:	01 f1       	breq	.+64     	; 0x15bc <OSTimeDly+0x66>
        OS_ENTER_CRITICAL();
    157c:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    1580:	e0 91 d9 04 	lds	r30, 0x04D9
    1584:	f0 91 da 04 	lds	r31, 0x04DA
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
    1588:	a2 89       	ldd	r26, Z+18	; 0x12
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ac 52       	subi	r26, 0x2C	; 44
    158e:	bb 4f       	sbci	r27, 0xFB	; 251
    1590:	93 89       	ldd	r25, Z+19	; 0x13
    1592:	90 95       	com	r25
    1594:	2c 91       	ld	r18, X
    1596:	92 23       	and	r25, r18
    1598:	9c 93       	st	X, r25
        if (OSRdyTbl[y] == 0u) {
    159a:	91 11       	cpse	r25, r1
    159c:	07 c0       	rjmp	.+14     	; 0x15ac <OSTimeDly+0x56>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
    159e:	94 89       	ldd	r25, Z+20	; 0x14
    15a0:	90 95       	com	r25
    15a2:	20 91 d3 04 	lds	r18, 0x04D3
    15a6:	92 23       	and	r25, r18
    15a8:	90 93 d3 04 	sts	0x04D3, r25
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    15ac:	c2 86       	std	Z+10, r12	; 0x0a
    15ae:	d3 86       	std	Z+11, r13	; 0x0b
    15b0:	e4 86       	std	Z+12, r14	; 0x0c
    15b2:	f5 86       	std	Z+13, r15	; 0x0d
        OS_EXIT_CRITICAL();
    15b4:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OS_Sched();                              /* Find next task to run!                             */
    15b8:	0e 94 20 07 	call	0xe40	; 0xe40 <OS_Sched>
    }
}
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	08 95       	ret

000015c6 <main>:
	TIMSK1 = ex(OCIE1A);
}

int main(void)
{
	cli();
    15c6:	f8 94       	cli
	OSInit();
    15c8:	0e 94 85 06 	call	0xd0a	; 0xd0a <OSInit>
static OS_STK stack0[256];
static OS_STK stack1[128];

static void tickInit( void )
{
	TCNT1 = 0;
    15cc:	10 92 85 00 	sts	0x0085, r1
    15d0:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 249;
    15d4:	89 ef       	ldi	r24, 0xF9	; 249
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	90 93 89 00 	sts	0x0089, r25
    15dc:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    15e0:	10 92 8b 00 	sts	0x008B, r1
    15e4:	10 92 8a 00 	sts	0x008A, r1
	TCCR1A = 0x00;
    15e8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0C;
    15ec:	8c e0       	ldi	r24, 0x0C	; 12
    15ee:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0x00;
    15f2:	10 92 82 00 	sts	0x0082, r1
	TIFR1 = ex(OCF1A);
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = ex(OCIE1A);
    15fa:	80 93 6f 00 	sts	0x006F, r24
{
	cli();
	OSInit();
	tickInit();
	
	enablePullup();
    15fe:	0e 94 1b 01 	call	0x236	; 0x236 <enablePullup>
	ledInit();
    1602:	0e 94 1f 01 	call	0x23e	; 0x23e <ledInit>
	pwmInit();
    1606:	0e 94 c7 02 	call	0x58e	; 0x58e <pwmInit>
	usart0Init();
    160a:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0Init>
	usart0Init();
    160e:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0Init>
	
	//OSTaskCreate(colorLEDDemo, (void *)0, &stack0[255], 0);
	OSTaskCreate(esp8266ColorLED, (void *)0, &stack0[255], 0);
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	44 e0       	ldi	r20, 0x04	; 4
    1616:	54 e0       	ldi	r21, 0x04	; 4
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	8e e5       	ldi	r24, 0x5E	; 94
    161e:	9b e0       	ldi	r25, 0x0B	; 11
    1620:	0e 94 33 0a 	call	0x1466	; 0x1466 <OSTaskCreate>
	OSTaskCreate(blink, (void *)0, &stack1[127], 2);
    1624:	22 e0       	ldi	r18, 0x02	; 2
    1626:	44 e8       	ldi	r20, 0x84	; 132
    1628:	54 e0       	ldi	r21, 0x04	; 4
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	88 e2       	ldi	r24, 0x28	; 40
    1630:	9b e0       	ldi	r25, 0x0B	; 11
    1632:	0e 94 33 0a 	call	0x1466	; 0x1466 <OSTaskCreate>
	
	OSStart();
    1636:	0e 94 86 05 	call	0xb0c	; 0xb0c <OSStart>
	
	return 0;
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	08 95       	ret

00001640 <hexToInt>:
#include "task.h"

static boolean esp8266Initialized = FALSE;

static uint8 hexToInt(char *hex)
{
    1640:	fc 01       	movw	r30, r24
	return ((hex[0] - '0') << 4) | ((hex[1] - '0') & 0x0F);
    1642:	90 81       	ld	r25, Z
    1644:	92 95       	swap	r25
    1646:	90 7f       	andi	r25, 0xF0	; 240
    1648:	81 81       	ldd	r24, Z+1	; 0x01
    164a:	8f 70       	andi	r24, 0x0F	; 15
}
    164c:	89 2b       	or	r24, r25
    164e:	08 95       	ret

00001650 <blink>:

void blink(void *pdata)
{
	(void)pdata;
	while (1) {
		if (esp8266Initialized) {
    1650:	80 91 85 04 	lds	r24, 0x0485
    1654:	88 23       	and	r24, r24
    1656:	09 f1       	breq	.+66     	; 0x169a <blink+0x4a>
			ledOn();
    1658:	0e 94 21 01 	call	0x242	; 0x242 <ledOn>
			OSTimeDly(1);
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OSTimeDly>
			ledOff();
    1668:	0e 94 23 01 	call	0x246	; 0x246 <ledOff>
			OSTimeDly(29);
    166c:	6d e1       	ldi	r22, 0x1D	; 29
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OSTimeDly>
			ledOn();
    1678:	0e 94 21 01 	call	0x242	; 0x242 <ledOn>
			OSTimeDly(1);
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OSTimeDly>
			ledOff();
    1688:	0e 94 23 01 	call	0x246	; 0x246 <ledOff>
			OSTimeDly(219);
    168c:	6b ed       	ldi	r22, 0xDB	; 219
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OSTimeDly>
    1698:	db cf       	rjmp	.-74     	; 0x1650 <blink>
		} else {
			ledOn();
    169a:	0e 94 21 01 	call	0x242	; 0x242 <ledOn>
			OSTimeDly(30);
    169e:	6e e1       	ldi	r22, 0x1E	; 30
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OSTimeDly>
			ledOff();
    16aa:	0e 94 23 01 	call	0x246	; 0x246 <ledOff>
			OSTimeDly(30);
    16ae:	6e e1       	ldi	r22, 0x1E	; 30
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <OSTimeDly>
    16ba:	ca cf       	rjmp	.-108    	; 0x1650 <blink>

000016bc <esp8266ColorLED>:
		OSTimeDly(6);
	}
}

void esp8266ColorLED(void *pdata)
{
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	a0 97       	sbiw	r28, 0x20	; 32
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
				break;
			}
			if (!esp8266Cmd("AT+CIPSERVER=1, 5678", "OK")) {
				break;
			}
			esp8266Initialized = TRUE;
    16d0:	11 e0       	ldi	r17, 0x01	; 1
	(void)pdata;
	red = 0;
	green = 0;
	blue = 0;
	hue = 0;
	while (!esp8266Initialized) {
    16d2:	21 c0       	rjmp	.+66     	; 0x1716 <esp8266ColorLED+0x5a>
		while (1) {
			if (!esp8266Cmd("AT+RST", "ready")) {
    16d4:	60 e4       	ldi	r22, 0x40	; 64
    16d6:	72 e0       	ldi	r23, 0x02	; 2
    16d8:	86 e4       	ldi	r24, 0x46	; 70
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    16e0:	88 23       	and	r24, r24
    16e2:	c9 f0       	breq	.+50     	; 0x1716 <esp8266ColorLED+0x5a>
				break;
			}
			if (!esp8266Cmd("ATE0", "OK")) {
    16e4:	63 e1       	ldi	r22, 0x13	; 19
    16e6:	71 e0       	ldi	r23, 0x01	; 1
    16e8:	8d e4       	ldi	r24, 0x4D	; 77
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    16f0:	88 23       	and	r24, r24
    16f2:	89 f0       	breq	.+34     	; 0x1716 <esp8266ColorLED+0x5a>
				break;
			}
			if (!esp8266Cmd("AT+CIPMUX=1", "OK")) {
    16f4:	63 e1       	ldi	r22, 0x13	; 19
    16f6:	71 e0       	ldi	r23, 0x01	; 1
    16f8:	82 e5       	ldi	r24, 0x52	; 82
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    1700:	88 23       	and	r24, r24
    1702:	49 f0       	breq	.+18     	; 0x1716 <esp8266ColorLED+0x5a>
				break;
			}
			if (!esp8266Cmd("AT+CIPSERVER=1, 5678", "OK")) {
    1704:	63 e1       	ldi	r22, 0x13	; 19
    1706:	71 e0       	ldi	r23, 0x01	; 1
    1708:	8e e5       	ldi	r24, 0x5E	; 94
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    1710:	81 11       	cpse	r24, r1
				break;
			}
			esp8266Initialized = TRUE;
    1712:	10 93 85 04 	sts	0x0485, r17
	(void)pdata;
	red = 0;
	green = 0;
	blue = 0;
	hue = 0;
	while (!esp8266Initialized) {
    1716:	80 91 85 04 	lds	r24, 0x0485
    171a:	88 23       	and	r24, r24
    171c:	d9 f2       	breq	.-74     	; 0x16d4 <esp8266ColorLED+0x18>
    171e:	f1 2c       	mov	r15, r1
    1720:	00 e0       	ldi	r16, 0x00	; 0
    1722:	10 e0       	ldi	r17, 0x00	; 0
			esp8266Initialized = TRUE;
			break;
		}
	}
	while (1) {
		str = esp8266Rx();
    1724:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <esp8266Rx>
    1728:	fc 01       	movw	r30, r24
		if (str[0] == 'R') {
    172a:	90 81       	ld	r25, Z
    172c:	92 35       	cpi	r25, 0x52	; 82
    172e:	71 f4       	brne	.+28     	; 0x174c <esp8266ColorLED+0x90>
			red = hexToInt(str + 1);
    1730:	cf 01       	movw	r24, r30
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 20 0b 	call	0x1640	; 0x1640 <hexToInt>
    1738:	18 2f       	mov	r17, r24
			ledRedSet(red);
    173a:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(green);
    173e:	80 2f       	mov	r24, r16
    1740:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(blue);
    1744:	8f 2d       	mov	r24, r15
    1746:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    174a:	ec cf       	rjmp	.-40     	; 0x1724 <esp8266ColorLED+0x68>
		} else if (str[0] == 'G') {
    174c:	97 34       	cpi	r25, 0x47	; 71
    174e:	79 f4       	brne	.+30     	; 0x176e <esp8266ColorLED+0xb2>
			green = hexToInt(str + 1);
    1750:	cf 01       	movw	r24, r30
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	0e 94 20 0b 	call	0x1640	; 0x1640 <hexToInt>
    1758:	08 2f       	mov	r16, r24
			ledRedSet(red);
    175a:	81 2f       	mov	r24, r17
    175c:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(green);
    1760:	80 2f       	mov	r24, r16
    1762:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(blue);
    1766:	8f 2d       	mov	r24, r15
    1768:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    176c:	db cf       	rjmp	.-74     	; 0x1724 <esp8266ColorLED+0x68>
		} else if (str[0] == 'B') {
    176e:	92 34       	cpi	r25, 0x42	; 66
    1770:	79 f4       	brne	.+30     	; 0x1790 <esp8266ColorLED+0xd4>
			blue = hexToInt(str + 1);
    1772:	cf 01       	movw	r24, r30
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	0e 94 20 0b 	call	0x1640	; 0x1640 <hexToInt>
    177a:	f8 2e       	mov	r15, r24
			ledRedSet(red);
    177c:	81 2f       	mov	r24, r17
    177e:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(green);
    1782:	80 2f       	mov	r24, r16
    1784:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(blue);
    1788:	8f 2d       	mov	r24, r15
    178a:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    178e:	ca cf       	rjmp	.-108    	; 0x1724 <esp8266ColorLED+0x68>
		} else if (str[0] == 'H') {
    1790:	98 34       	cpi	r25, 0x48	; 72
    1792:	b9 f4       	brne	.+46     	; 0x17c2 <esp8266ColorLED+0x106>
			hue = hexToInt(str + 1);
    1794:	cf 01       	movw	r24, r30
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	0e 94 20 0b 	call	0x1640	; 0x1640 <hexToInt>
    179c:	e8 2e       	mov	r14, r24
			ledRedSet(hueToRed(hue));
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 41 02 	call	0x482	; 0x482 <hueToRed>
    17a4:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(hueToGreen(hue));
    17a8:	8e 2d       	mov	r24, r14
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 6f 02 	call	0x4de	; 0x4de <hueToGreen>
    17b0:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(hueToBlue(hue));
    17b4:	8e 2d       	mov	r24, r14
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 96 02 	call	0x52c	; 0x52c <hueToBlue>
    17bc:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    17c0:	b1 cf       	rjmp	.-158    	; 0x1724 <esp8266ColorLED+0x68>
		} else if (str[0] == 'N') {
    17c2:	9e 34       	cpi	r25, 0x4E	; 78
    17c4:	41 f4       	brne	.+16     	; 0x17d6 <esp8266ColorLED+0x11a>
			strCpy(str + 1, buf);
    17c6:	be 01       	movw	r22, r28
    17c8:	6f 5f       	subi	r22, 0xFF	; 255
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	cf 01       	movw	r24, r30
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <strCpy>
    17d4:	a7 cf       	rjmp	.-178    	; 0x1724 <esp8266ColorLED+0x68>
		} else if (str[0] == 'P') {
    17d6:	90 35       	cpi	r25, 0x50	; 80
    17d8:	99 f4       	brne	.+38     	; 0x1800 <esp8266ColorLED+0x144>
			if (esp8266ConnectAP(buf, str + 1)) {
    17da:	bf 01       	movw	r22, r30
    17dc:	6f 5f       	subi	r22, 0xFF	; 255
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	ce 01       	movw	r24, r28
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <esp8266ConnectAP>
    17e8:	88 23       	and	r24, r24
    17ea:	29 f0       	breq	.+10     	; 0x17f6 <esp8266ColorLED+0x13a>
				esp8266Tx("OK");
    17ec:	83 e1       	ldi	r24, 0x13	; 19
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    17f4:	97 cf       	rjmp	.-210    	; 0x1724 <esp8266ColorLED+0x68>
			} else {
				esp8266Tx("FAIL");
    17f6:	86 e1       	ldi	r24, 0x16	; 22
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    17fe:	92 cf       	rjmp	.-220    	; 0x1724 <esp8266ColorLED+0x68>
			}
		} else if (str[0] == 'I') {
    1800:	99 34       	cpi	r25, 0x49	; 73
    1802:	09 f0       	breq	.+2      	; 0x1806 <esp8266ColorLED+0x14a>
    1804:	8f cf       	rjmp	.-226    	; 0x1724 <esp8266ColorLED+0x68>
			if (esp8266GetIP(buf)) {
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	0e 94 b1 01 	call	0x362	; 0x362 <esp8266GetIP>
    180e:	88 23       	and	r24, r24
    1810:	29 f0       	breq	.+10     	; 0x181c <esp8266ColorLED+0x160>
				esp8266Tx(buf);
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    181a:	84 cf       	rjmp	.-248    	; 0x1724 <esp8266ColorLED+0x68>
			} else {
				esp8266Tx("FAIL");
    181c:	86 e1       	ldi	r24, 0x16	; 22
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    1824:	7f cf       	rjmp	.-258    	; 0x1724 <esp8266ColorLED+0x68>

00001826 <__udivmodsi4>:
    1826:	a1 e2       	ldi	r26, 0x21	; 33
    1828:	1a 2e       	mov	r1, r26
    182a:	aa 1b       	sub	r26, r26
    182c:	bb 1b       	sub	r27, r27
    182e:	fd 01       	movw	r30, r26
    1830:	0d c0       	rjmp	.+26     	; 0x184c <__udivmodsi4_ep>

00001832 <__udivmodsi4_loop>:
    1832:	aa 1f       	adc	r26, r26
    1834:	bb 1f       	adc	r27, r27
    1836:	ee 1f       	adc	r30, r30
    1838:	ff 1f       	adc	r31, r31
    183a:	a2 17       	cp	r26, r18
    183c:	b3 07       	cpc	r27, r19
    183e:	e4 07       	cpc	r30, r20
    1840:	f5 07       	cpc	r31, r21
    1842:	20 f0       	brcs	.+8      	; 0x184c <__udivmodsi4_ep>
    1844:	a2 1b       	sub	r26, r18
    1846:	b3 0b       	sbc	r27, r19
    1848:	e4 0b       	sbc	r30, r20
    184a:	f5 0b       	sbc	r31, r21

0000184c <__udivmodsi4_ep>:
    184c:	66 1f       	adc	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	1a 94       	dec	r1
    1856:	69 f7       	brne	.-38     	; 0x1832 <__udivmodsi4_loop>
    1858:	60 95       	com	r22
    185a:	70 95       	com	r23
    185c:	80 95       	com	r24
    185e:	90 95       	com	r25
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	bd 01       	movw	r22, r26
    1866:	cf 01       	movw	r24, r30
    1868:	08 95       	ret

0000186a <_exit>:
    186a:	f8 94       	cli

0000186c <__stop_program>:
    186c:	ff cf       	rjmp	.-2      	; 0x186c <__stop_program>
