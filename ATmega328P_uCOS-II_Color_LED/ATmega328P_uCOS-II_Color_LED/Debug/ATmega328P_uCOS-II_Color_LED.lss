
ATmega328P_uCOS-II_Color_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800100  0000188a  0000191e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000188a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000414  00800274  00800274  00001a92  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000021f7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000478  00000000  00000000  00002228  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000043d4  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d8  00000000  00000000  00006a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001250  00000000  00000000  00007f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000950  00000000  00000000  0000919c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000aec  00000000  00000000  00009aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000027bb  00000000  00000000  0000a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d0  00000000  00000000  0000cd93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e8       	ldi	r30, 0x8A	; 138
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 37       	cpi	r26, 0x74	; 116
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a4 e7       	ldi	r26, 0x74	; 116
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 38       	cpi	r26, 0x88	; 136
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <main>
      9e:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CPUGetSR>:
	.equ SREG, 0x3F
	.equ SP_H, 0x3E
	.equ SP_L, 0x3D

CPUGetSR:
	in r24, SREG
      a6:	8f b7       	in	r24, 0x3f	; 63
	cli
      a8:	f8 94       	cli
	ret
      aa:	08 95       	ret

000000ac <CPUSetSR>:

CPUSetSR:
	out SREG, r24
      ac:	8f bf       	out	0x3f, r24	; 63
	ret
      ae:	08 95       	ret

000000b0 <OSStartHighRdy>:

OSStartHighRdy:
;	call OSTaskSwHook
	ldi r24, 0x01
      b0:	81 e0       	ldi	r24, 0x01	; 1
	sts OSRunning, r24
      b2:	80 93 87 04 	sts	0x0487, r24
	lds r26, OSTCBHighRdy
      b6:	a0 91 cf 04 	lds	r26, 0x04CF
	lds r27, OSTCBHighRdy + 1
      ba:	b0 91 d0 04 	lds	r27, 0x04D0
	ld r28, X+
      be:	cd 91       	ld	r28, X+
	ld r29, X+
      c0:	dd 91       	ld	r29, X+
	out SP_L, r28
      c2:	cd bf       	out	0x3d, r28	; 61
	out SP_H, r29
      c4:	de bf       	out	0x3e, r29	; 62
	pop r0
      c6:	0f 90       	pop	r0
	out SREG, r0
      c8:	0f be       	out	0x3f, r0	; 63
	pop r31
      ca:	ff 91       	pop	r31
	pop r30
      cc:	ef 91       	pop	r30
	pop r29
      ce:	df 91       	pop	r29
	pop r28
      d0:	cf 91       	pop	r28
	pop r27
      d2:	bf 91       	pop	r27
	pop r26
      d4:	af 91       	pop	r26
	pop r25
      d6:	9f 91       	pop	r25
	pop r24
      d8:	8f 91       	pop	r24
	pop r23
      da:	7f 91       	pop	r23
	pop r22
      dc:	6f 91       	pop	r22
	pop r21
      de:	5f 91       	pop	r21
	pop r20
      e0:	4f 91       	pop	r20
	pop r19
      e2:	3f 91       	pop	r19
	pop r18
      e4:	2f 91       	pop	r18
	pop r17
      e6:	1f 91       	pop	r17
	pop r16
      e8:	0f 91       	pop	r16
	pop r15
      ea:	ff 90       	pop	r15
	pop r14
      ec:	ef 90       	pop	r14
	pop r13
      ee:	df 90       	pop	r13
	pop r12
      f0:	cf 90       	pop	r12
	pop r11
      f2:	bf 90       	pop	r11
	pop r10
      f4:	af 90       	pop	r10
	pop r9
      f6:	9f 90       	pop	r9
	pop r8
      f8:	8f 90       	pop	r8
	pop r7
      fa:	7f 90       	pop	r7
	pop r6
      fc:	6f 90       	pop	r6
	pop r5
      fe:	5f 90       	pop	r5
	pop r4
     100:	4f 90       	pop	r4
	pop r3
     102:	3f 90       	pop	r3
	pop r2
     104:	2f 90       	pop	r2
	pop r1
     106:	1f 90       	pop	r1
	pop r0
     108:	0f 90       	pop	r0
	ret
     10a:	08 95       	ret

0000010c <OSCtxSw>:

OSCtxSw:
	push r0
     10c:	0f 92       	push	r0
	push r1
     10e:	1f 92       	push	r1
	push r2
     110:	2f 92       	push	r2
	push r3
     112:	3f 92       	push	r3
	push r4
     114:	4f 92       	push	r4
	push r5
     116:	5f 92       	push	r5
	push r6
     118:	6f 92       	push	r6
	push r7
     11a:	7f 92       	push	r7
	push r8
     11c:	8f 92       	push	r8
	push r9
     11e:	9f 92       	push	r9
	push r10
     120:	af 92       	push	r10
	push r11
     122:	bf 92       	push	r11
	push r12
     124:	cf 92       	push	r12
	push r13
     126:	df 92       	push	r13
	push r14
     128:	ef 92       	push	r14
	push r15
     12a:	ff 92       	push	r15
	push r16
     12c:	0f 93       	push	r16
	push r17
     12e:	1f 93       	push	r17
	push r18
     130:	2f 93       	push	r18
	push r19
     132:	3f 93       	push	r19
	push r20
     134:	4f 93       	push	r20
	push r21
     136:	5f 93       	push	r21
	push r22
     138:	6f 93       	push	r22
	push r23
     13a:	7f 93       	push	r23
	push r24
     13c:	8f 93       	push	r24
	push r25
     13e:	9f 93       	push	r25
	push r26
     140:	af 93       	push	r26
	push r27
     142:	bf 93       	push	r27
	push r28
     144:	cf 93       	push	r28
	push r29
     146:	df 93       	push	r29
	push r30
     148:	ef 93       	push	r30
	push r31
     14a:	ff 93       	push	r31
	in r0, SREG
     14c:	0f b6       	in	r0, 0x3f	; 63
	push r0
     14e:	0f 92       	push	r0
	in r28, SP_L
     150:	cd b7       	in	r28, 0x3d	; 61
	in r29, SP_H
     152:	de b7       	in	r29, 0x3e	; 62
	lds r26, OSTCBCur
     154:	a0 91 d9 04 	lds	r26, 0x04D9
	lds r27, OSTCBCur + 1
     158:	b0 91 da 04 	lds	r27, 0x04DA
	st X+, r28
     15c:	cd 93       	st	X+, r28
	st X+, r29
     15e:	dd 93       	st	X+, r29
;	call OSTaskSwHook
	lds r24, OSPrioHighRdy
     160:	80 91 8c 04 	lds	r24, 0x048C
	sts OSPrioCur, r24
     164:	80 93 8d 04 	sts	0x048D, r24
	lds r26, OSTCBHighRdy
     168:	a0 91 cf 04 	lds	r26, 0x04CF
	lds r27, OSTCBHighRdy + 1
     16c:	b0 91 d0 04 	lds	r27, 0x04D0
	sts OSTCBCur, r26
     170:	a0 93 d9 04 	sts	0x04D9, r26
	sts OSTCBCur + 1, r27
     174:	b0 93 da 04 	sts	0x04DA, r27
	ld r28, X+
     178:	cd 91       	ld	r28, X+
	ld r29, X+
     17a:	dd 91       	ld	r29, X+
	out SP_L, r28
     17c:	cd bf       	out	0x3d, r28	; 61
	out SP_H, r29
     17e:	de bf       	out	0x3e, r29	; 62
	pop r0
     180:	0f 90       	pop	r0
	out SREG, r0
     182:	0f be       	out	0x3f, r0	; 63
	pop r31
     184:	ff 91       	pop	r31
	pop r30
     186:	ef 91       	pop	r30
	pop r29
     188:	df 91       	pop	r29
	pop r28
     18a:	cf 91       	pop	r28
	pop r27
     18c:	bf 91       	pop	r27
	pop r26
     18e:	af 91       	pop	r26
	pop r25
     190:	9f 91       	pop	r25
	pop r24
     192:	8f 91       	pop	r24
	pop r23
     194:	7f 91       	pop	r23
	pop r22
     196:	6f 91       	pop	r22
	pop r21
     198:	5f 91       	pop	r21
	pop r20
     19a:	4f 91       	pop	r20
	pop r19
     19c:	3f 91       	pop	r19
	pop r18
     19e:	2f 91       	pop	r18
	pop r17
     1a0:	1f 91       	pop	r17
	pop r16
     1a2:	0f 91       	pop	r16
	pop r15
     1a4:	ff 90       	pop	r15
	pop r14
     1a6:	ef 90       	pop	r14
	pop r13
     1a8:	df 90       	pop	r13
	pop r12
     1aa:	cf 90       	pop	r12
	pop r11
     1ac:	bf 90       	pop	r11
	pop r10
     1ae:	af 90       	pop	r10
	pop r9
     1b0:	9f 90       	pop	r9
	pop r8
     1b2:	8f 90       	pop	r8
	pop r7
     1b4:	7f 90       	pop	r7
	pop r6
     1b6:	6f 90       	pop	r6
	pop r5
     1b8:	5f 90       	pop	r5
	pop r4
     1ba:	4f 90       	pop	r4
	pop r3
     1bc:	3f 90       	pop	r3
	pop r2
     1be:	2f 90       	pop	r2
	pop r1
     1c0:	1f 90       	pop	r1
	pop r0
     1c2:	0f 90       	pop	r0
	ret
     1c4:	08 95       	ret

000001c6 <strCmp>:
boolean strCmp(char *example, char *test)
{
	char e;
	uint8 i;
	
	i = 0;
     1c6:	40 e0       	ldi	r20, 0x00	; 0
	do {
		e = example[i];
     1c8:	24 2f       	mov	r18, r20
     1ca:	30 e0       	ldi	r19, 0x00	; 0
		if (e != test[i]) {
     1cc:	fb 01       	movw	r30, r22
     1ce:	e2 0f       	add	r30, r18
     1d0:	f3 1f       	adc	r31, r19
     1d2:	50 81       	ld	r21, Z
	char e;
	uint8 i;
	
	i = 0;
	do {
		e = example[i];
     1d4:	fc 01       	movw	r30, r24
     1d6:	e2 0f       	add	r30, r18
     1d8:	f3 1f       	adc	r31, r19
		if (e != test[i]) {
     1da:	20 81       	ld	r18, Z
     1dc:	52 13       	cpse	r21, r18
     1de:	05 c0       	rjmp	.+10     	; 0x1ea <strCmp+0x24>
			return FALSE;
		}
		i++;
     1e0:	4f 5f       	subi	r20, 0xFF	; 255
	} while (e != '\0');
     1e2:	51 11       	cpse	r21, r1
     1e4:	f1 cf       	rjmp	.-30     	; 0x1c8 <strCmp+0x2>
	return TRUE;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	08 95       	ret
	
	i = 0;
	do {
		e = example[i];
		if (e != test[i]) {
			return FALSE;
     1ea:	80 e0       	ldi	r24, 0x00	; 0
		}
		i++;
	} while (e != '\0');
	return TRUE;
}
     1ec:	08 95       	ret

000001ee <strCpy>:
{
	char e;
	uint8 i;
	
	i = 0;
	e = *example;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
	*buf = e;
     1f2:	fb 01       	movw	r30, r22
     1f4:	20 83       	st	Z, r18
	while (e != '\0') {
     1f6:	22 23       	and	r18, r18
     1f8:	71 f0       	breq	.+28     	; 0x216 <strCpy+0x28>
void strCpy(char *example, char *buf)
{
	char e;
	uint8 i;
	
	i = 0;
     1fa:	40 e0       	ldi	r20, 0x00	; 0
	e = *example;
	*buf = e;
	while (e != '\0') {
		i++;
     1fc:	4f 5f       	subi	r20, 0xFF	; 255
		e = example[i];
     1fe:	24 2f       	mov	r18, r20
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	e2 0f       	add	r30, r18
     206:	f3 1f       	adc	r31, r19
     208:	50 81       	ld	r21, Z
		buf[i] = e;
     20a:	fb 01       	movw	r30, r22
     20c:	e2 0f       	add	r30, r18
     20e:	f3 1f       	adc	r31, r19
     210:	50 83       	st	Z, r21
	uint8 i;
	
	i = 0;
	e = *example;
	*buf = e;
	while (e != '\0') {
     212:	51 11       	cpse	r21, r1
     214:	f3 cf       	rjmp	.-26     	; 0x1fc <strCpy+0xe>
     216:	08 95       	ret

00000218 <strLen>:
		buf[i] = e;
	}
}

uint8 strLen(char *str)
{
     218:	dc 01       	movw	r26, r24
	uint8 i;
	
	i = 0;
	while(str[i] != '\0') {
     21a:	8c 91       	ld	r24, X
     21c:	88 23       	and	r24, r24
     21e:	49 f0       	breq	.+18     	; 0x232 <strLen+0x1a>

uint8 strLen(char *str)
{
	uint8 i;
	
	i = 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
	while(str[i] != '\0') {
		i++;
     222:	8f 5f       	subi	r24, 0xFF	; 255
uint8 strLen(char *str)
{
	uint8 i;
	
	i = 0;
	while(str[i] != '\0') {
     224:	fd 01       	movw	r30, r26
     226:	e8 0f       	add	r30, r24
     228:	f1 1d       	adc	r31, r1
     22a:	90 81       	ld	r25, Z
     22c:	91 11       	cpse	r25, r1
     22e:	f9 cf       	rjmp	.-14     	; 0x222 <strLen+0xa>
     230:	08 95       	ret

uint8 strLen(char *str)
{
	uint8 i;
	
	i = 0;
     232:	80 e0       	ldi	r24, 0x00	; 0
	while(str[i] != '\0') {
		i++;
	}
	return i;
}
     234:	08 95       	ret

00000236 <enablePullup>:

void enablePullup(void)
{
	MCUCR &= rex(PUD);
     236:	85 b7       	in	r24, 0x35	; 53
     238:	8f 7e       	andi	r24, 0xEF	; 239
     23a:	85 bf       	out	0x35, r24	; 53
     23c:	08 95       	ret

0000023e <ledInit>:
	MCUCR |= ex(PUD);
}

void ledInit(void)
{
	DDRB |= ex(5);
     23e:	25 9a       	sbi	0x04, 5	; 4
     240:	08 95       	ret

00000242 <ledOn>:
}

void ledOn(void)
{
	PORTB |= ex(5);
     242:	2d 9a       	sbi	0x05, 5	; 5
     244:	08 95       	ret

00000246 <ledOff>:
}

void ledOff(void)
{
	PORTB &= rex(5);
     246:	2d 98       	cbi	0x05, 5	; 5
     248:	08 95       	ret

0000024a <esp8266RxBufferFlash>:
#include "esp8266.h"
#include "basic.h"
#include "usart0.h"

static void esp8266RxBufferFlash()
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	00 d0       	rcall	.+0      	; 0x250 <esp8266RxBufferFlash+0x6>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	INT8U err;
	char *str;
	
	do {
		err = usart0Read(&str, ESP8266_FLUSH_TIMEOUT);
     254:	4f e0       	ldi	r20, 0x0F	; 15
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	ce 01       	movw	r24, r28
     25e:	01 96       	adiw	r24, 0x01	; 1
     260:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
	} while (err == OS_ERR_NONE);
     264:	88 23       	and	r24, r24
     266:	b1 f3       	breq	.-20     	; 0x254 <esp8266RxBufferFlash+0xa>
}
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <esp8266Cmd>:

boolean esp8266Cmd(char *cmd, char *response)
{
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	00 d0       	rcall	.+0      	; 0x280 <esp8266Cmd+0xe>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	7c 01       	movw	r14, r24
     286:	8b 01       	movw	r16, r22
	INT8U err;
	char *str;
	
	esp8266RxBufferFlash();
     288:	0e 94 25 01 	call	0x24a	; 0x24a <esp8266RxBufferFlash>
	usart0Print(cmd);
     28c:	c7 01       	movw	r24, r14
     28e:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print("\r\n");
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	while (1) {
		err = usart0Read(&str, ESP8266_SHORT_TIMEOUT);
     29a:	4f ef       	ldi	r20, 0xFF	; 255
     29c:	53 e0       	ldi	r21, 0x03	; 3
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	ce 01       	movw	r24, r28
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (err == OS_ERR_TIMEOUT) {
     2aa:	8a 30       	cpi	r24, 0x0A	; 10
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <esp8266Cmd+0x4e>
			return FALSE;
		} else if (strCmp(str, response)) {
     2ae:	b8 01       	movw	r22, r16
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     2b8:	88 23       	and	r24, r24
     2ba:	79 f3       	breq	.-34     	; 0x29a <esp8266Cmd+0x28>
			return TRUE;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <esp8266Cmd+0x50>
	usart0Print(cmd);
	usart0Print("\r\n");
	while (1) {
		err = usart0Read(&str, ESP8266_SHORT_TIMEOUT);
		if (err == OS_ERR_TIMEOUT) {
			return FALSE;
     2c0:	80 e0       	ldi	r24, 0x00	; 0
		} else if (strCmp(str, response)) {
			return TRUE;
		}
	}
}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	08 95       	ret

000002d4 <esp8266ConnectAP>:

boolean esp8266ConnectAP(char *name, char *password)
{
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <esp8266ConnectAP+0xe>
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	7c 01       	movw	r14, r24
     2e8:	8b 01       	movw	r16, r22
	INT8U err;
	char *str;
	
	esp8266RxBufferFlash();
     2ea:	0e 94 25 01 	call	0x24a	; 0x24a <esp8266RxBufferFlash>
	usart0Print("AT+CWJAP=\"");
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print(name);
     2f6:	c7 01       	movw	r24, r14
     2f8:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print("\",\"");
     2fc:	8b e0       	ldi	r24, 0x0B	; 11
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print(password);
     304:	c8 01       	movw	r24, r16
     306:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0Print("\"\r\n");
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	while (1) {
		err = usart0Read(&str, ESP8266_LONG_TIMEOUT);
     312:	4f ef       	ldi	r20, 0xFF	; 255
     314:	5f e3       	ldi	r21, 0x3F	; 63
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	ce 01       	movw	r24, r28
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (err == OS_ERR_TIMEOUT) {
     322:	8a 30       	cpi	r24, 0x0A	; 10
     324:	91 f0       	breq	.+36     	; 0x34a <esp8266ConnectAP+0x76>
			return FALSE;
		} else if (strCmp(str, "OK")) {
     326:	63 e1       	ldi	r22, 0x13	; 19
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     332:	81 11       	cpse	r24, r1
     334:	0c c0       	rjmp	.+24     	; 0x34e <esp8266ConnectAP+0x7a>
			return TRUE;
		} else if (strCmp(str, "FAIL")) {
     336:	66 e1       	ldi	r22, 0x16	; 22
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     342:	88 23       	and	r24, r24
     344:	31 f3       	breq	.-52     	; 0x312 <esp8266ConnectAP+0x3e>
			return FALSE;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	03 c0       	rjmp	.+6      	; 0x350 <esp8266ConnectAP+0x7c>
	usart0Print(password);
	usart0Print("\"\r\n");
	while (1) {
		err = usart0Read(&str, ESP8266_LONG_TIMEOUT);
		if (err == OS_ERR_TIMEOUT) {
			return FALSE;
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	01 c0       	rjmp	.+2      	; 0x350 <esp8266ConnectAP+0x7c>
		} else if (strCmp(str, "OK")) {
			return TRUE;
     34e:	81 e0       	ldi	r24, 0x01	; 1
		} else if (strCmp(str, "FAIL")) {
			return FALSE;
		}
	}
}
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	08 95       	ret

00000362 <esp8266GetIP>:

boolean esp8266GetIP(char *buf)
{
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <esp8266GetIP+0xe>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	8c 01       	movw	r16, r24
	INT8U err;
	char *str;
	boolean result;
	
	result = FALSE;
	esp8266RxBufferFlash();
     376:	0e 94 25 01 	call	0x24a	; 0x24a <esp8266RxBufferFlash>
	usart0Print("AT+CIFSR\r\n");
     37a:	8b e1       	ldi	r24, 0x1B	; 27
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
{
	INT8U err;
	char *str;
	boolean result;
	
	result = FALSE;
     382:	f1 2c       	mov	r15, r1
		if (err == OS_ERR_TIMEOUT || strCmp(str, "OK")) {
			break;
		} else if (*str >= '0' && *str <= '9') {
			if (!strCmp(str, "192.168.4.1")) {
				strCpy(str, buf);
				result = TRUE;
     384:	ee 24       	eor	r14, r14
     386:	e3 94       	inc	r14
	
	result = FALSE;
	esp8266RxBufferFlash();
	usart0Print("AT+CIFSR\r\n");
	while (1) {
		err = usart0Read(&str, ESP8266_SHORT_TIMEOUT);
     388:	4f ef       	ldi	r20, 0xFF	; 255
     38a:	53 e0       	ldi	r21, 0x03	; 3
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (err == OS_ERR_TIMEOUT || strCmp(str, "OK")) {
     398:	8a 30       	cpi	r24, 0x0A	; 10
     39a:	e1 f0       	breq	.+56     	; 0x3d4 <esp8266GetIP+0x72>
     39c:	63 e1       	ldi	r22, 0x13	; 19
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     3a8:	81 11       	cpse	r24, r1
     3aa:	14 c0       	rjmp	.+40     	; 0x3d4 <esp8266GetIP+0x72>
			break;
		} else if (*str >= '0' && *str <= '9') {
     3ac:	e9 81       	ldd	r30, Y+1	; 0x01
     3ae:	fa 81       	ldd	r31, Y+2	; 0x02
     3b0:	90 81       	ld	r25, Z
     3b2:	90 53       	subi	r25, 0x30	; 48
     3b4:	9a 30       	cpi	r25, 0x0A	; 10
     3b6:	40 f7       	brcc	.-48     	; 0x388 <esp8266GetIP+0x26>
			if (!strCmp(str, "192.168.4.1")) {
     3b8:	66 e2       	ldi	r22, 0x26	; 38
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	cf 01       	movw	r24, r30
     3be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     3c2:	81 11       	cpse	r24, r1
     3c4:	e1 cf       	rjmp	.-62     	; 0x388 <esp8266GetIP+0x26>
				strCpy(str, buf);
     3c6:	b8 01       	movw	r22, r16
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	9a 81       	ldd	r25, Y+2	; 0x02
     3cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <strCpy>
				result = TRUE;
     3d0:	fe 2c       	mov	r15, r14
     3d2:	da cf       	rjmp	.-76     	; 0x388 <esp8266GetIP+0x26>
			}
		}
	}
	return result;
}
     3d4:	8f 2d       	mov	r24, r15
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	08 95       	ret

000003e8 <esp8266Rx>:

char *esp8266Rx(void)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <esp8266Rx+0x6>
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	char *str;
	do {
		usart0Read(&str, ESP8266_INFINITE_TIMEOUT);
     3f2:	4f ef       	ldi	r20, 0xFF	; 255
     3f4:	5f ef       	ldi	r21, 0xFF	; 255
     3f6:	ba 01       	movw	r22, r20
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	0e 94 8e 03 	call	0x71c	; 0x71c <usart0Read>
		if (*str == '+') {
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	9a 81       	ldd	r25, Y+2	; 0x02
     404:	dc 01       	movw	r26, r24
     406:	2c 91       	ld	r18, X
     408:	2b 32       	cpi	r18, 0x2B	; 43
     40a:	a1 f4       	brne	.+40     	; 0x434 <esp8266Rx+0x4c>
			str += 8;
     40c:	fc 01       	movw	r30, r24
     40e:	38 96       	adiw	r30, 0x08	; 8
     410:	fa 83       	std	Y+2, r31	; 0x02
     412:	e9 83       	std	Y+1, r30	; 0x01
			while (*str != ':') {
     414:	18 96       	adiw	r26, 0x08	; 8
     416:	2c 91       	ld	r18, X
     418:	2a 33       	cpi	r18, 0x3A	; 58
     41a:	41 f0       	breq	.+16     	; 0x42c <esp8266Rx+0x44>
		}
	}
	return result;
}

char *esp8266Rx(void)
     41c:	09 96       	adiw	r24, 0x09	; 9
	do {
		usart0Read(&str, ESP8266_INFINITE_TIMEOUT);
		if (*str == '+') {
			str += 8;
			while (*str != ':') {
				str++;
     41e:	fc 01       	movw	r30, r24
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	01 96       	adiw	r24, 0x01	; 1
	char *str;
	do {
		usart0Read(&str, ESP8266_INFINITE_TIMEOUT);
		if (*str == '+') {
			str += 8;
			while (*str != ':') {
     426:	20 81       	ld	r18, Z
     428:	2a 33       	cpi	r18, 0x3A	; 58
     42a:	c9 f7       	brne	.-14     	; 0x41e <esp8266Rx+0x36>
				str++;
			}
			str++;
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	fa 83       	std	Y+2, r31	; 0x02
     430:	e9 83       	std	Y+1, r30	; 0x01
			break;
     432:	06 c0       	rjmp	.+12     	; 0x440 <esp8266Rx+0x58>
		}
	} while (strCmp(str, "OK"));
     434:	63 e1       	ldi	r22, 0x13	; 19
     436:	71 e0       	ldi	r23, 0x01	; 1
     438:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <strCmp>
     43c:	81 11       	cpse	r24, r1
     43e:	d9 cf       	rjmp	.-78     	; 0x3f2 <esp8266Rx+0xa>
	return str;
}
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <esp8266Tx>:

void esp8266Tx(char *str)
{
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	ec 01       	movw	r28, r24
	usart0Print("AT+CIPSEND=0,");
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	usart0LongInt(strLen(str));
     45c:	ce 01       	movw	r24, r28
     45e:	0e 94 0c 01 	call	0x218	; 0x218 <strLen>
     462:	68 2f       	mov	r22, r24
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 40 03 	call	0x680	; 0x680 <usart0LongInt>
	usart0Print("\r\n");
     46e:	80 e1       	ldi	r24, 0x10	; 16
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
	/* How to make sure get ">"? */
	usart0Print(str);
     476:	ce 01       	movw	r24, r28
     478:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <hueToRed>:

uint16 hueToRed(uint16 hue)
{
	uint16 red;
	
	if (hue < 40) {
     482:	88 32       	cpi	r24, 0x28	; 40
     484:	91 05       	cpc	r25, r1
     486:	00 f1       	brcs	.+64     	; 0x4c8 <hueToRed+0x46>
		red = 240;
	} else if (hue < 80) {
     488:	80 35       	cpi	r24, 0x50	; 80
     48a:	91 05       	cpc	r25, r1
     48c:	60 f4       	brcc	.+24     	; 0x4a6 <hueToRed+0x24>
		red = 480 - hue * 6;
     48e:	9c 01       	movw	r18, r24
     490:	22 0f       	add	r18, r18
     492:	33 1f       	adc	r19, r19
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	20 ee       	ldi	r18, 0xE0	; 224
     49e:	31 e0       	ldi	r19, 0x01	; 1
     4a0:	28 1b       	sub	r18, r24
     4a2:	39 0b       	sbc	r19, r25
     4a4:	19 c0       	rjmp	.+50     	; 0x4d8 <hueToRed+0x56>
	} else if (hue < 160) {
     4a6:	80 3a       	cpi	r24, 0xA0	; 160
     4a8:	91 05       	cpc	r25, r1
     4aa:	88 f0       	brcs	.+34     	; 0x4ce <hueToRed+0x4c>
		red = 0;
	} else if (hue < 200) {
     4ac:	88 3c       	cpi	r24, 0xC8	; 200
     4ae:	91 05       	cpc	r25, r1
     4b0:	88 f4       	brcc	.+34     	; 0x4d4 <hueToRed+0x52>
		red = hue * 6 - 960;
     4b2:	9c 01       	movw	r18, r24
     4b4:	22 0f       	add	r18, r18
     4b6:	33 1f       	adc	r19, r19
     4b8:	82 0f       	add	r24, r18
     4ba:	93 1f       	adc	r25, r19
     4bc:	9c 01       	movw	r18, r24
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	20 5c       	subi	r18, 0xC0	; 192
     4c4:	33 40       	sbci	r19, 0x03	; 3
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <hueToRed+0x56>
uint16 hueToRed(uint16 hue)
{
	uint16 red;
	
	if (hue < 40) {
		red = 240;
     4c8:	20 ef       	ldi	r18, 0xF0	; 240
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <hueToRed+0x56>
	} else if (hue < 80) {
		red = 480 - hue * 6;
	} else if (hue < 160) {
		red = 0;
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <hueToRed+0x56>
	} else if (hue < 200) {
		red = hue * 6 - 960;
	} else {
		red = 240;
     4d4:	20 ef       	ldi	r18, 0xF0	; 240
     4d6:	30 e0       	ldi	r19, 0x00	; 0
	}
	return red;
}
     4d8:	82 2f       	mov	r24, r18
     4da:	93 2f       	mov	r25, r19
     4dc:	08 95       	ret

000004de <hueToGreen>:

uint16 hueToGreen(uint16 hue)
{
	uint16 green;
	
	if (hue < 40) {
     4de:	88 32       	cpi	r24, 0x28	; 40
     4e0:	91 05       	cpc	r25, r1
     4e2:	48 f4       	brcc	.+18     	; 0x4f6 <hueToGreen+0x18>
		green = hue * 6;
     4e4:	9c 01       	movw	r18, r24
     4e6:	22 0f       	add	r18, r18
     4e8:	33 1f       	adc	r19, r19
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	9c 01       	movw	r18, r24
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	18 c0       	rjmp	.+48     	; 0x526 <hueToGreen+0x48>
	} else if (hue < 120) {
     4f6:	88 37       	cpi	r24, 0x78	; 120
     4f8:	91 05       	cpc	r25, r1
     4fa:	80 f0       	brcs	.+32     	; 0x51c <hueToGreen+0x3e>
		green = 240;
	} else if (hue < 160) {
     4fc:	80 3a       	cpi	r24, 0xA0	; 160
     4fe:	91 05       	cpc	r25, r1
     500:	80 f4       	brcc	.+32     	; 0x522 <hueToGreen+0x44>
		green = 960 - hue * 6;
     502:	ac 01       	movw	r20, r24
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	84 0f       	add	r24, r20
     50a:	95 1f       	adc	r25, r21
     50c:	ac 01       	movw	r20, r24
     50e:	44 0f       	add	r20, r20
     510:	55 1f       	adc	r21, r21
     512:	20 ec       	ldi	r18, 0xC0	; 192
     514:	33 e0       	ldi	r19, 0x03	; 3
     516:	24 1b       	sub	r18, r20
     518:	35 0b       	sbc	r19, r21
     51a:	05 c0       	rjmp	.+10     	; 0x526 <hueToGreen+0x48>
	uint16 green;
	
	if (hue < 40) {
		green = hue * 6;
	} else if (hue < 120) {
		green = 240;
     51c:	20 ef       	ldi	r18, 0xF0	; 240
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <hueToGreen+0x48>
	} else if (hue < 160) {
		green = 960 - hue * 6;
	} else {
		green = 0;
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
	}
	return green;
}
     526:	82 2f       	mov	r24, r18
     528:	93 2f       	mov	r25, r19
     52a:	08 95       	ret

0000052c <hueToBlue>:

uint16 hueToBlue(uint16 hue)
{
	uint16 blue;
	
	if (hue < 80) {
     52c:	80 35       	cpi	r24, 0x50	; 80
     52e:	91 05       	cpc	r25, r1
     530:	e8 f0       	brcs	.+58     	; 0x56c <hueToBlue+0x40>
		blue = 0;
	} else if (hue < 120) {
     532:	88 37       	cpi	r24, 0x78	; 120
     534:	91 05       	cpc	r25, r1
     536:	58 f4       	brcc	.+22     	; 0x54e <hueToBlue+0x22>
		blue = hue * 6 - 480;
     538:	9c 01       	movw	r18, r24
     53a:	22 0f       	add	r18, r18
     53c:	33 1f       	adc	r19, r19
     53e:	82 0f       	add	r24, r18
     540:	93 1f       	adc	r25, r19
     542:	9c 01       	movw	r18, r24
     544:	22 0f       	add	r18, r18
     546:	33 1f       	adc	r19, r19
     548:	20 5e       	subi	r18, 0xE0	; 224
     54a:	31 40       	sbci	r19, 0x01	; 1
     54c:	14 c0       	rjmp	.+40     	; 0x576 <hueToBlue+0x4a>
	} else if (hue < 200) {
     54e:	88 3c       	cpi	r24, 0xC8	; 200
     550:	91 05       	cpc	r25, r1
     552:	78 f0       	brcs	.+30     	; 0x572 <hueToBlue+0x46>
		blue = 240;
	} else {
		blue = 1440 - hue * 6;
     554:	9c 01       	movw	r18, r24
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	82 0f       	add	r24, r18
     55c:	93 1f       	adc	r25, r19
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	20 ea       	ldi	r18, 0xA0	; 160
     564:	35 e0       	ldi	r19, 0x05	; 5
     566:	28 1b       	sub	r18, r24
     568:	39 0b       	sbc	r19, r25
     56a:	05 c0       	rjmp	.+10     	; 0x576 <hueToBlue+0x4a>
uint16 hueToBlue(uint16 hue)
{
	uint16 blue;
	
	if (hue < 80) {
		blue = 0;
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <hueToBlue+0x4a>
	} else if (hue < 120) {
		blue = hue * 6 - 480;
	} else if (hue < 200) {
		blue = 240;
     572:	20 ef       	ldi	r18, 0xF0	; 240
     574:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		blue = 1440 - hue * 6;
	}
	return blue;
}
     576:	82 2f       	mov	r24, r18
     578:	93 2f       	mov	r25, r19
     57a:	08 95       	ret

0000057c <ledRedSet>:
#include "led.h"
#include "pwm.h"

void ledRedSet(uint8 red)
{
	pwm2B(red);
     57c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <pwm2B>
     580:	08 95       	ret

00000582 <ledGreenSet>:
}

void ledGreenSet(uint8 green)
{
	pwm0B(green);
     582:	0e 94 e6 02 	call	0x5cc	; 0x5cc <pwm0B>
     586:	08 95       	ret

00000588 <ledBlueSet>:
}

void ledBlueSet(uint8 blue)
{
	pwm0A(blue);
     588:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <pwm0A>
     58c:	08 95       	ret

0000058e <pwmInit>:
	OCR2B = ~dutyCycle;
}

static void pwm0Init(void)
{
	TCNT0 = 0;
     58e:	16 bc       	out	0x26, r1	; 38
	OCR0A = 255;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255;
     594:	88 bd       	out	0x28, r24	; 40
	/* important to get 0 duty cycle */
	TCCR0A = 0xF3;
     596:	23 ef       	ldi	r18, 0xF3	; 243
     598:	24 bd       	out	0x24, r18	; 36
	TCCR0B = 0x03;
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = 0x00;
     59e:	10 92 6e 00 	sts	0x006E, r1
	DDRD |= ex(5) | ex(6);
     5a2:	3a b1       	in	r19, 0x0a	; 10
     5a4:	30 66       	ori	r19, 0x60	; 96
     5a6:	3a b9       	out	0x0a, r19	; 10
}

static void pwm2Init(void)
{
	TCNT2 = 0;
     5a8:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 255;
     5ac:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 255;
     5b0:	80 93 b4 00 	sts	0x00B4, r24
	/* important to get 0 duty cycle */
	TCCR2A = 0xF3;
     5b4:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = 0x03;
     5b8:	90 93 b1 00 	sts	0x00B1, r25
	TIMSK2 = 0x00;
     5bc:	10 92 70 00 	sts	0x0070, r1
	DDRB |= ex(3);
     5c0:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= ex(3);
     5c2:	53 9a       	sbi	0x0a, 3	; 10
     5c4:	08 95       	ret

000005c6 <pwm0A>:
	pwm2Init();
}

void pwm0A(uint8 dutyCycle)
{
	OCR0A = ~dutyCycle;
     5c6:	80 95       	com	r24
     5c8:	87 bd       	out	0x27, r24	; 39
     5ca:	08 95       	ret

000005cc <pwm0B>:
}

void pwm0B(uint8 dutyCycle)
{
	OCR0B = ~dutyCycle;
     5cc:	80 95       	com	r24
     5ce:	88 bd       	out	0x28, r24	; 40
     5d0:	08 95       	ret

000005d2 <pwm2B>:
	OCR2A = ~dutyCycle;
}

void pwm2B(uint8 dutyCycle)
{
	OCR2B = ~dutyCycle;
     5d2:	80 95       	com	r24
     5d4:	80 93 b4 00 	sts	0x00B4, r24
     5d8:	08 95       	ret

000005da <usart0Init>:
static void *usart0RxQPtr[ex(UART0_RX_Q_SIZE)];
static OS_EVENT *usart0RxQ;

void usart0Init(void)
{
	UCSR0A = 0x02;
     5da:	a0 ec       	ldi	r26, 0xC0	; 192
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	8c 93       	st	X, r24
	UCSR0B = 0x18;
     5e2:	e1 ec       	ldi	r30, 0xC1	; 193
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	88 e1       	ldi	r24, 0x18	; 24
     5e8:	80 83       	st	Z, r24
	UCSR0C = 0x06;
     5ea:	86 e0       	ldi	r24, 0x06	; 6
     5ec:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 207;
     5f0:	8f ec       	ldi	r24, 0xCF	; 207
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	90 93 c5 00 	sts	0x00C5, r25
     5f8:	80 93 c4 00 	sts	0x00C4, r24
	
	usart0TxIntFlagClr();
     5fc:	8c 91       	ld	r24, X
     5fe:	80 64       	ori	r24, 0x40	; 64
     600:	8c 93       	st	X, r24
	usart0TxIntEnable();
     602:	80 81       	ld	r24, Z
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 83       	st	Z, r24
	usart0RxIntEnable();
     608:	80 81       	ld	r24, Z
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	80 83       	st	Z, r24
	
	usart0TxRdy = OSSemCreate(0);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 64 09 	call	0x12c8	; 0x12c8 <OSSemCreate>
     616:	90 93 75 02 	sts	0x0275, r25
     61a:	80 93 74 02 	sts	0x0274, r24
	usart0RxQ = OSQCreate(usart0RxQPtr, ex(UART0_RX_Q_SIZE));
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	86 e7       	ldi	r24, 0x76	; 118
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <OSQCreate>
     62a:	90 93 7f 02 	sts	0x027F, r25
     62e:	80 93 7e 02 	sts	0x027E, r24
	usart0RxCnt = 0;
     632:	10 92 80 02 	sts	0x0280, r1
	usart0RxQCnt = 0;
     636:	10 92 81 02 	sts	0x0281, r1
     63a:	08 95       	ret

0000063c <usart0Print>:
}

INT8U usart0Print(char *str)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	1f 92       	push	r1
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	INT8U err;
	char temp;
	
	usart0TxCnt = 0;
     646:	10 92 82 02 	sts	0x0282, r1
	usart0TxPtr = str;
     64a:	90 93 84 02 	sts	0x0284, r25
     64e:	80 93 83 02 	sts	0x0283, r24
	temp = *str;
     652:	fc 01       	movw	r30, r24
     654:	80 81       	ld	r24, Z
	if (temp != '\0') {
     656:	88 23       	and	r24, r24
     658:	71 f0       	breq	.+28     	; 0x676 <usart0Print+0x3a>
		UDR0 = temp;
     65a:	80 93 c6 00 	sts	0x00C6, r24
		OSSemPend(usart0TxRdy, UART0_TX_TIMEOUT, &err);
     65e:	9e 01       	movw	r18, r28
     660:	2f 5f       	subi	r18, 0xFF	; 255
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	4f ef       	ldi	r20, 0xFF	; 255
     666:	5f ef       	ldi	r21, 0xFF	; 255
     668:	ba 01       	movw	r22, r20
     66a:	80 91 74 02 	lds	r24, 0x0274
     66e:	90 91 75 02 	lds	r25, 0x0275
     672:	0e 94 94 09 	call	0x1328	; 0x1328 <OSSemPend>
	}
	return err;
}
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <usart0LongInt>:

INT8U usart0LongInt(uint32 x)
{
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	2b 97       	sbiw	r28, 0x0b	; 11
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	char digit[11];
	uint8 i;
	
	digit[10] = '\0';
     6a6:	1b 86       	std	Y+11, r1	; 0x0b
	i = 9;
     6a8:	0f 2e       	mov	r0, r31
     6aa:	f9 e0       	ldi	r31, 0x09	; 9
     6ac:	df 2e       	mov	r13, r31
     6ae:	f0 2d       	mov	r31, r0
	do {
		digit[i] = '0' + x%10;
     6b0:	0f 2e       	mov	r0, r31
     6b2:	fa e0       	ldi	r31, 0x0A	; 10
     6b4:	8f 2e       	mov	r8, r31
     6b6:	91 2c       	mov	r9, r1
     6b8:	a1 2c       	mov	r10, r1
     6ba:	b1 2c       	mov	r11, r1
     6bc:	f0 2d       	mov	r31, r0
     6be:	0d 2d       	mov	r16, r13
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	ee 24       	eor	r14, r14
     6c4:	e3 94       	inc	r14
     6c6:	f1 2c       	mov	r15, r1
     6c8:	ec 0e       	add	r14, r28
     6ca:	fd 1e       	adc	r15, r29
     6cc:	e0 0e       	add	r14, r16
     6ce:	f1 1e       	adc	r15, r17
     6d0:	a5 01       	movw	r20, r10
     6d2:	94 01       	movw	r18, r8
     6d4:	0e 94 21 0c 	call	0x1842	; 0x1842 <__udivmodsi4>
     6d8:	60 5d       	subi	r22, 0xD0	; 208
     6da:	f7 01       	movw	r30, r14
     6dc:	60 83       	st	Z, r22
		x /= 10;
     6de:	62 2f       	mov	r22, r18
     6e0:	73 2f       	mov	r23, r19
     6e2:	84 2f       	mov	r24, r20
     6e4:	95 2f       	mov	r25, r21
		i--;
     6e6:	da 94       	dec	r13
	} while (x != 0);
     6e8:	61 15       	cp	r22, r1
     6ea:	71 05       	cpc	r23, r1
     6ec:	81 05       	cpc	r24, r1
     6ee:	91 05       	cpc	r25, r1
     6f0:	31 f7       	brne	.-52     	; 0x6be <usart0LongInt+0x3e>
	i++;
	return usart0Print(&digit[i]);
     6f2:	c7 01       	movw	r24, r14
     6f4:	0e 94 1e 03 	call	0x63c	; 0x63c <usart0Print>
}
     6f8:	2b 96       	adiw	r28, 0x0b	; 11
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	bf 90       	pop	r11
     714:	af 90       	pop	r10
     716:	9f 90       	pop	r9
     718:	8f 90       	pop	r8
     71a:	08 95       	ret

0000071c <usart0Read>:

INT8U usart0Read(char **str, INT32U timeout)
{
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	1f 92       	push	r1
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	8c 01       	movw	r16, r24
	INT8U err;
	
	*str = (char *)OSQPend(usart0RxQ, timeout, &err);
     72c:	9e 01       	movw	r18, r28
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	80 91 7e 02 	lds	r24, 0x027E
     736:	90 91 7f 02 	lds	r25, 0x027F
     73a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <OSQPend>
     73e:	f8 01       	movw	r30, r16
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
	return err;
}
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	0f 90       	pop	r0
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <__vector_20>:
		usart0RxCnt &= ex(UART0_RX_SIZE) - 1;
	}
}

ISR(USART_TX_vect)
{
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
	return err;
}

static void usart0TxISRHandler(void)
{
	usart0TxCnt++;
     774:	80 91 82 02 	lds	r24, 0x0282
     778:	8f 5f       	subi	r24, 0xFF	; 255
     77a:	80 93 82 02 	sts	0x0282, r24
	if (*(usart0TxPtr + usart0TxCnt) == 0) {
     77e:	e0 91 83 02 	lds	r30, 0x0283
     782:	f0 91 84 02 	lds	r31, 0x0284
     786:	e8 0f       	add	r30, r24
     788:	f1 1d       	adc	r31, r1
     78a:	80 81       	ld	r24, Z
     78c:	81 11       	cpse	r24, r1
     78e:	0b c0       	rjmp	.+22     	; 0x7a6 <__vector_20+0x54>
		OSIntEnter();
     790:	0e 94 44 05 	call	0xa88	; 0xa88 <OSIntEnter>
		OSSemPost(usart0TxRdy);
     794:	80 91 74 02 	lds	r24, 0x0274
     798:	90 91 75 02 	lds	r25, 0x0275
     79c:	0e 94 0d 0a 	call	0x141a	; 0x141a <OSSemPost>
		OSIntExit();
     7a0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <OSIntExit>
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__vector_20+0x58>
	} else {
		UDR0 = usart0TxPtr[usart0TxCnt];
     7a6:	80 93 c6 00 	sts	0x00C6, r24
}

ISR(USART_TX_vect)
{
	usart0TxISRHandler();
}
     7aa:	ff 91       	pop	r31
     7ac:	ef 91       	pop	r30
     7ae:	bf 91       	pop	r27
     7b0:	af 91       	pop	r26
     7b2:	9f 91       	pop	r25
     7b4:	8f 91       	pop	r24
     7b6:	7f 91       	pop	r23
     7b8:	6f 91       	pop	r22
     7ba:	5f 91       	pop	r21
     7bc:	4f 91       	pop	r20
     7be:	3f 91       	pop	r19
     7c0:	2f 91       	pop	r18
     7c2:	0f 90       	pop	r0
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	0f 90       	pop	r0
     7c8:	1f 90       	pop	r1
     7ca:	18 95       	reti

000007cc <__vector_18>:

ISR(USART_RX_vect)
{
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31

static void usart0RxISRHandler(void)
{
	char usart1RxChar;
	
	usart1RxChar = UDR0;
     7ee:	80 91 c6 00 	lds	r24, 0x00C6
	if (usart1RxChar == '\r') {
     7f2:	8d 30       	cpi	r24, 0x0D	; 13
     7f4:	71 f4       	brne	.+28     	; 0x812 <__vector_18+0x46>
		usart0RxBuf[usart0RxQCnt][usart0RxCnt] = '\0';
     7f6:	e0 91 81 02 	lds	r30, 0x0281
     7fa:	80 91 80 02 	lds	r24, 0x0280
     7fe:	20 e2       	ldi	r18, 0x20	; 32
     800:	e2 9f       	mul	r30, r18
     802:	f0 01       	movw	r30, r0
     804:	11 24       	eor	r1, r1
     806:	e8 0f       	add	r30, r24
     808:	f1 1d       	adc	r31, r1
     80a:	eb 57       	subi	r30, 0x7B	; 123
     80c:	fd 4f       	sbci	r31, 0xFD	; 253
     80e:	10 82       	st	Z, r1
     810:	3a c0       	rjmp	.+116    	; 0x886 <__vector_18+0xba>
	} else if (usart1RxChar == '\n') {
     812:	8a 30       	cpi	r24, 0x0A	; 10
     814:	39 f5       	brne	.+78     	; 0x864 <__vector_18+0x98>
		if (usart0RxCnt != 0) {
     816:	80 91 80 02 	lds	r24, 0x0280
     81a:	88 23       	and	r24, r24
     81c:	a1 f1       	breq	.+104    	; 0x886 <__vector_18+0xba>
			OSIntEnter();
     81e:	0e 94 44 05 	call	0xa88	; 0xa88 <OSIntEnter>
			usart0RxBuf[usart0RxQCnt][usart0RxCnt] = '\0';
     822:	60 91 81 02 	lds	r22, 0x0281
     826:	80 91 80 02 	lds	r24, 0x0280
     82a:	90 e2       	ldi	r25, 0x20	; 32
     82c:	69 9f       	mul	r22, r25
     82e:	b0 01       	movw	r22, r0
     830:	11 24       	eor	r1, r1
     832:	fb 01       	movw	r30, r22
     834:	e8 0f       	add	r30, r24
     836:	f1 1d       	adc	r31, r1
     838:	eb 57       	subi	r30, 0x7B	; 123
     83a:	fd 4f       	sbci	r31, 0xFD	; 253
     83c:	10 82       	st	Z, r1
			usart0RxCnt = 0;
     83e:	10 92 80 02 	sts	0x0280, r1
			OSQPost(usart0RxQ, usart0RxBuf[usart0RxQCnt]);
     842:	6b 57       	subi	r22, 0x7B	; 123
     844:	7d 4f       	sbci	r23, 0xFD	; 253
     846:	80 91 7e 02 	lds	r24, 0x027E
     84a:	90 91 7f 02 	lds	r25, 0x027F
     84e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <OSQPost>
			usart0RxQCnt++;
     852:	80 91 81 02 	lds	r24, 0x0281
     856:	8f 5f       	subi	r24, 0xFF	; 255
			usart0RxQCnt &= ex(UART0_RX_Q_SIZE) - 1;
     858:	83 70       	andi	r24, 0x03	; 3
     85a:	80 93 81 02 	sts	0x0281, r24
			OSIntExit();
     85e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <OSIntExit>
     862:	11 c0       	rjmp	.+34     	; 0x886 <__vector_18+0xba>
		}
	} else {
		usart0RxBuf[usart0RxQCnt][usart0RxCnt] = usart1RxChar;
     864:	90 91 80 02 	lds	r25, 0x0280
     868:	e0 91 81 02 	lds	r30, 0x0281
     86c:	20 e2       	ldi	r18, 0x20	; 32
     86e:	e2 9f       	mul	r30, r18
     870:	f0 01       	movw	r30, r0
     872:	11 24       	eor	r1, r1
     874:	e9 0f       	add	r30, r25
     876:	f1 1d       	adc	r31, r1
     878:	eb 57       	subi	r30, 0x7B	; 123
     87a:	fd 4f       	sbci	r31, 0xFD	; 253
     87c:	80 83       	st	Z, r24
		usart0RxCnt++;
     87e:	9f 5f       	subi	r25, 0xFF	; 255
		usart0RxCnt &= ex(UART0_RX_SIZE) - 1;
     880:	9f 71       	andi	r25, 0x1F	; 31
     882:	90 93 80 02 	sts	0x0280, r25
}

ISR(USART_RX_vect)
{
	usart0RxISRHandler();
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <OSTaskStkInit>:
OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *ptos, INT16U opt)
{
	INT16U  tmp;

	(void)opt;                              /* 'opt' is not used, prevent warning                       */
	tmp      = (INT16U)OS_TaskReturn;       /* Put task start address on top of "hardware stack"        */
     8a8:	2c ea       	ldi	r18, 0xAC	; 172
     8aa:	3a e0       	ldi	r19, 0x0A	; 10
	*ptos--  = (INT8U)(tmp & 0xFF);
     8ac:	fa 01       	movw	r30, r20
     8ae:	20 83       	st	Z, r18
	tmp      = tmp >> 8;
	*ptos--  = (INT8U)(tmp & 0xFF);
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	30 83       	st	Z, r19
	tmp      = (INT16U)task;                /* Save PC return address                                   */
	*ptos--  = (INT8U)(tmp & 0xFF);
     8b4:	fa 01       	movw	r30, r20
     8b6:	32 97       	sbiw	r30, 0x02	; 2
     8b8:	80 83       	st	Z, r24
	tmp      = tmp >> 8;
	*ptos--  = (INT8U)(tmp & 0xFF);
     8ba:	fa 01       	movw	r30, r20
     8bc:	33 97       	sbiw	r30, 0x03	; 3
     8be:	90 83       	st	Z, r25

	*ptos--  = (INT8U)0x00;                 /* R0    = 0x00                                             */
     8c0:	fa 01       	movw	r30, r20
     8c2:	34 97       	sbiw	r30, 0x04	; 4
     8c4:	10 82       	st	Z, r1
	*ptos--  = (INT8U)0x00;                 /* R1    = 0x00                                             */
     8c6:	fa 01       	movw	r30, r20
     8c8:	35 97       	sbiw	r30, 0x05	; 5
     8ca:	10 82       	st	Z, r1
	*ptos--  = (INT8U)0x02;                 /* R2    = 0x02                                             */
     8cc:	fa 01       	movw	r30, r20
     8ce:	36 97       	sbiw	r30, 0x06	; 6
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x03;                 /* R3    = 0x03                                             */
     8d4:	fa 01       	movw	r30, r20
     8d6:	37 97       	sbiw	r30, 0x07	; 7
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x04;                 /* R4    = 0x04                                             */
     8dc:	fa 01       	movw	r30, r20
     8de:	38 97       	sbiw	r30, 0x08	; 8
     8e0:	84 e0       	ldi	r24, 0x04	; 4
     8e2:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x05;                 /* R5    = 0x05                                             */
     8e4:	fa 01       	movw	r30, r20
     8e6:	39 97       	sbiw	r30, 0x09	; 9
     8e8:	85 e0       	ldi	r24, 0x05	; 5
     8ea:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x06;                 /* R6    = 0x06                                             */
     8ec:	fa 01       	movw	r30, r20
     8ee:	3a 97       	sbiw	r30, 0x0a	; 10
     8f0:	86 e0       	ldi	r24, 0x06	; 6
     8f2:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x07;                 /* R7    = 0x07                                             */
     8f4:	fa 01       	movw	r30, r20
     8f6:	3b 97       	sbiw	r30, 0x0b	; 11
     8f8:	87 e0       	ldi	r24, 0x07	; 7
     8fa:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x08;                 /* R8    = 0x08                                             */
     8fc:	fa 01       	movw	r30, r20
     8fe:	3c 97       	sbiw	r30, 0x0c	; 12
     900:	88 e0       	ldi	r24, 0x08	; 8
     902:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x09;                 /* R9    = 0x09                                             */
     904:	fa 01       	movw	r30, r20
     906:	3d 97       	sbiw	r30, 0x0d	; 13
     908:	89 e0       	ldi	r24, 0x09	; 9
     90a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x10;                 /* R10   = 0x10                                             */
     90c:	fa 01       	movw	r30, r20
     90e:	3e 97       	sbiw	r30, 0x0e	; 14
     910:	80 e1       	ldi	r24, 0x10	; 16
     912:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x11;                 /* R11   = 0x11                                             */
     914:	fa 01       	movw	r30, r20
     916:	3f 97       	sbiw	r30, 0x0f	; 15
     918:	81 e1       	ldi	r24, 0x11	; 17
     91a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x12;                 /* R12   = 0x12                                             */
     91c:	fa 01       	movw	r30, r20
     91e:	70 97       	sbiw	r30, 0x10	; 16
     920:	82 e1       	ldi	r24, 0x12	; 18
     922:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x13;                 /* R13   = 0x13                                             */
     924:	fa 01       	movw	r30, r20
     926:	71 97       	sbiw	r30, 0x11	; 17
     928:	83 e1       	ldi	r24, 0x13	; 19
     92a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x14;                 /* R14   = 0x14                                             */
     92c:	fa 01       	movw	r30, r20
     92e:	72 97       	sbiw	r30, 0x12	; 18
     930:	84 e1       	ldi	r24, 0x14	; 20
     932:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x15;                 /* R15   = 0x15                                             */
     934:	fa 01       	movw	r30, r20
     936:	73 97       	sbiw	r30, 0x13	; 19
     938:	85 e1       	ldi	r24, 0x15	; 21
     93a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x16;                 /* R16   = 0x16                                             */
     93c:	fa 01       	movw	r30, r20
     93e:	74 97       	sbiw	r30, 0x14	; 20
     940:	86 e1       	ldi	r24, 0x16	; 22
     942:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x17;                 /* R17   = 0x17                                             */
     944:	fa 01       	movw	r30, r20
     946:	75 97       	sbiw	r30, 0x15	; 21
     948:	87 e1       	ldi	r24, 0x17	; 23
     94a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x18;                 /* R18   = 0x18                                             */
     94c:	fa 01       	movw	r30, r20
     94e:	76 97       	sbiw	r30, 0x16	; 22
     950:	88 e1       	ldi	r24, 0x18	; 24
     952:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x19;                 /* R19   = 0x19                                             */
     954:	fa 01       	movw	r30, r20
     956:	77 97       	sbiw	r30, 0x17	; 23
     958:	89 e1       	ldi	r24, 0x19	; 25
     95a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x20;                 /* R20   = 0x20                                             */
     95c:	fa 01       	movw	r30, r20
     95e:	78 97       	sbiw	r30, 0x18	; 24
     960:	80 e2       	ldi	r24, 0x20	; 32
     962:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x21;                 /* R21   = 0x21                                             */
     964:	fa 01       	movw	r30, r20
     966:	79 97       	sbiw	r30, 0x19	; 25
     968:	81 e2       	ldi	r24, 0x21	; 33
     96a:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x22;                 /* R22   = 0x22                                             */
     96c:	fa 01       	movw	r30, r20
     96e:	7a 97       	sbiw	r30, 0x1a	; 26
     970:	82 e2       	ldi	r24, 0x22	; 34
     972:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x23;                 /* R23   = 0x23                                             */
     974:	fa 01       	movw	r30, r20
     976:	7b 97       	sbiw	r30, 0x1b	; 27
     978:	83 e2       	ldi	r24, 0x23	; 35
     97a:	80 83       	st	Z, r24
	tmp      = (INT16U)pdata;
	*ptos--  = (INT8U)(tmp & 0xFF);         /* 'p_arg' passed in R24:R25                                */
     97c:	fa 01       	movw	r30, r20
     97e:	7c 97       	sbiw	r30, 0x1c	; 28
     980:	60 83       	st	Z, r22
	tmp      = tmp >> 8;
	*ptos--  = (INT8U)(tmp & 0xFF);
     982:	fa 01       	movw	r30, r20
     984:	7d 97       	sbiw	r30, 0x1d	; 29
     986:	70 83       	st	Z, r23
	*ptos--  = (INT8U)0x26;                 /* R26 X = 0x26                                             */
     988:	fa 01       	movw	r30, r20
     98a:	7e 97       	sbiw	r30, 0x1e	; 30
     98c:	86 e2       	ldi	r24, 0x26	; 38
     98e:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x27;                 /* R27   = 0x27                                             */
     990:	fa 01       	movw	r30, r20
     992:	7f 97       	sbiw	r30, 0x1f	; 31
     994:	87 e2       	ldi	r24, 0x27	; 39
     996:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x28;                 /* R28 Y = 0x28                                             */
     998:	fa 01       	movw	r30, r20
     99a:	b0 97       	sbiw	r30, 0x20	; 32
     99c:	88 e2       	ldi	r24, 0x28	; 40
     99e:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x29;                 /* R29   = 0x29                                             */
     9a0:	fa 01       	movw	r30, r20
     9a2:	b1 97       	sbiw	r30, 0x21	; 33
     9a4:	89 e2       	ldi	r24, 0x29	; 41
     9a6:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x30;                 /* R30 Z = 0x30                                             */
     9a8:	fa 01       	movw	r30, r20
     9aa:	b2 97       	sbiw	r30, 0x22	; 34
     9ac:	80 e3       	ldi	r24, 0x30	; 48
     9ae:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x31;                 /* R31   = 0x31                                             */
     9b0:	fa 01       	movw	r30, r20
     9b2:	b3 97       	sbiw	r30, 0x23	; 35
     9b4:	81 e3       	ldi	r24, 0x31	; 49
     9b6:	80 83       	st	Z, r24
	*ptos--  = (INT8U)0x80;                 /* SREG  = Interrupts enabled                               */
     9b8:	fa 01       	movw	r30, r20
     9ba:	b4 97       	sbiw	r30, 0x24	; 36
     9bc:	80 e8       	ldi	r24, 0x80	; 128
     9be:	80 83       	st	Z, r24
	
	return ((OS_STK *)ptos);
     9c0:	45 52       	subi	r20, 0x25	; 37
     9c2:	51 09       	sbc	r21, r1
}
     9c4:	84 2f       	mov	r24, r20
     9c6:	95 2f       	mov	r25, r21
     9c8:	08 95       	ret

000009ca <OSTaskCreateHook>:

/*******************************************************************************************************/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
     9ca:	08 95       	ret

000009cc <OSTaskIdleHook>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
     9cc:	08 95       	ret

000009ce <OSInitHookBegin>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
     9ce:	08 95       	ret

000009d0 <OSInitHookEnd>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
     9d0:	08 95       	ret

000009d2 <OSTCBInitHook>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
     9d2:	08 95       	ret

000009d4 <OSTaskReturnHook>:
}
#endif

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
     9d4:	08 95       	ret

000009d6 <__vector_11>:
#endif
}
#endif

ISR(TIMER1_COMPA_vect)
{
     9d6:	1f 92       	push	r1
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	OSIntEnter();
     9f8:	0e 94 44 05 	call	0xa88	; 0xa88 <OSIntEnter>
	OSTimeTick();
     9fc:	0e 94 b0 05 	call	0xb60	; 0xb60 <OSTimeTick>
	OSIntExit();
     a00:	0e 94 50 05 	call	0xaa0	; 0xaa0 <OSIntExit>
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	bf 91       	pop	r27
     a0a:	af 91       	pop	r26
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	7f 91       	pop	r23
     a12:	6f 91       	pop	r22
     a14:	5f 91       	pop	r21
     a16:	4f 91       	pop	r20
     a18:	3f 91       	pop	r19
     a1a:	2f 91       	pop	r18
     a1c:	0f 90       	pop	r0
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	0f 90       	pop	r0
     a22:	1f 90       	pop	r1
     a24:	18 95       	reti

00000a26 <OS_SchedNew>:
{
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
     a26:	e0 91 d3 04 	lds	r30, 0x04D3
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	e0 5c       	subi	r30, 0xC0	; 192
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	80 81       	ld	r24, Z
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
     a32:	e8 2f       	mov	r30, r24
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	ec 52       	subi	r30, 0x2C	; 44
     a38:	fb 4f       	sbci	r31, 0xFB	; 251
     a3a:	e0 81       	ld	r30, Z
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	e0 5c       	subi	r30, 0xC0	; 192
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	88 0f       	add	r24, r24
     a44:	88 0f       	add	r24, r24
     a46:	88 0f       	add	r24, r24
     a48:	90 81       	ld	r25, Z
     a4a:	89 0f       	add	r24, r25
     a4c:	80 93 8c 04 	sts	0x048C, r24
     a50:	08 95       	ret

00000a52 <OS_TaskIdle>:



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     a52:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        OSIdleCtr++;
     a56:	40 91 88 04 	lds	r20, 0x0488
     a5a:	50 91 89 04 	lds	r21, 0x0489
     a5e:	60 91 8a 04 	lds	r22, 0x048A
     a62:	70 91 8b 04 	lds	r23, 0x048B
     a66:	4f 5f       	subi	r20, 0xFF	; 255
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	6f 4f       	sbci	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	40 93 88 04 	sts	0x0488, r20
     a72:	50 93 89 04 	sts	0x0489, r21
     a76:	60 93 8a 04 	sts	0x048A, r22
     a7a:	70 93 8b 04 	sts	0x048B, r23
        OS_EXIT_CRITICAL();
     a7e:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
     a82:	0e 94 e6 04 	call	0x9cc	; 0x9cc <OSTaskIdleHook>
     a86:	e5 cf       	rjmp	.-54     	; 0xa52 <OS_TaskIdle>

00000a88 <OSIntEnter>:
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    if (OSRunning == OS_TRUE) {
     a88:	80 91 87 04 	lds	r24, 0x0487
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	39 f4       	brne	.+14     	; 0xa9e <OSIntEnter+0x16>
        if (OSIntNesting < 255u) {
     a90:	80 91 d8 04 	lds	r24, 0x04D8
     a94:	8f 3f       	cpi	r24, 0xFF	; 255
     a96:	19 f0       	breq	.+6      	; 0xa9e <OSIntEnter+0x16>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	80 93 d8 04 	sts	0x04D8, r24
     a9e:	08 95       	ret

00000aa0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
     aa0:	cf 93       	push	r28
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSRunning == OS_TRUE) {
     aa2:	80 91 87 04 	lds	r24, 0x0487
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	e9 f5       	brne	.+122    	; 0xb24 <OSIntExit+0x84>
        OS_ENTER_CRITICAL();
     aaa:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
     aae:	c8 2f       	mov	r28, r24
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
     ab0:	90 91 d8 04 	lds	r25, 0x04D8
     ab4:	99 23       	and	r25, r25
     ab6:	29 f0       	breq	.+10     	; 0xac2 <OSIntExit+0x22>
            OSIntNesting--;
     ab8:	91 50       	subi	r25, 0x01	; 1
     aba:	90 93 d8 04 	sts	0x04D8, r25
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
     abe:	91 11       	cpse	r25, r1
     ac0:	2e c0       	rjmp	.+92     	; 0xb1e <OSIntExit+0x7e>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
     ac2:	80 91 86 04 	lds	r24, 0x0486
     ac6:	81 11       	cpse	r24, r1
     ac8:	2a c0       	rjmp	.+84     	; 0xb1e <OSIntExit+0x7e>
                OS_SchedNew();
     aca:	0e 94 13 05 	call	0xa26	; 0xa26 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     ace:	80 91 8c 04 	lds	r24, 0x048C
     ad2:	e8 2f       	mov	r30, r24
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	ee 0f       	add	r30, r30
     ad8:	ff 1f       	adc	r31, r31
     ada:	e8 59       	subi	r30, 0x98	; 152
     adc:	f9 4f       	sbci	r31, 0xF9	; 249
     ade:	20 81       	ld	r18, Z
     ae0:	31 81       	ldd	r19, Z+1	; 0x01
     ae2:	30 93 d0 04 	sts	0x04D0, r19
     ae6:	20 93 cf 04 	sts	0x04CF, r18
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
     aea:	90 91 8d 04 	lds	r25, 0x048D
     aee:	89 17       	cp	r24, r25
     af0:	b1 f0       	breq	.+44     	; 0xb1e <OSIntExit+0x7e>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
     af2:	40 91 90 04 	lds	r20, 0x0490
     af6:	50 91 91 04 	lds	r21, 0x0491
     afa:	60 91 92 04 	lds	r22, 0x0492
     afe:	70 91 93 04 	lds	r23, 0x0493
     b02:	4f 5f       	subi	r20, 0xFF	; 255
     b04:	5f 4f       	sbci	r21, 0xFF	; 255
     b06:	6f 4f       	sbci	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	40 93 90 04 	sts	0x0490, r20
     b0e:	50 93 91 04 	sts	0x0491, r21
     b12:	60 93 92 04 	sts	0x0492, r22
     b16:	70 93 93 04 	sts	0x0493, r23
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
     b1a:	0e 94 86 00 	call	0x10c	; 0x10c <OSCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
     b1e:	8c 2f       	mov	r24, r28
     b20:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    }
}
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <OSStart>:
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
     b28:	80 91 87 04 	lds	r24, 0x0487
     b2c:	81 11       	cpse	r24, r1
     b2e:	17 c0       	rjmp	.+46     	; 0xb5e <OSStart+0x36>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
     b30:	0e 94 13 05 	call	0xa26	; 0xa26 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
     b34:	e0 91 8c 04 	lds	r30, 0x048C
     b38:	e0 93 8d 04 	sts	0x048D, r30
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	e8 59       	subi	r30, 0x98	; 152
     b44:	f9 4f       	sbci	r31, 0xF9	; 249
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	90 93 d0 04 	sts	0x04D0, r25
     b4e:	80 93 cf 04 	sts	0x04CF, r24
        OSTCBCur      = OSTCBHighRdy;
     b52:	90 93 da 04 	sts	0x04DA, r25
     b56:	80 93 d9 04 	sts	0x04D9, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
     b5a:	0e 94 58 00 	call	0xb0	; 0xb0 <OSStartHighRdy>
     b5e:	08 95       	ret

00000b60 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    OSTime++;
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
     b66:	80 91 87 04 	lds	r24, 0x0487
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	09 f0       	breq	.+2      	; 0xb70 <OSTimeTick+0x10>
     b6e:	41 c0       	rjmp	.+130    	; 0xbf2 <OSTimeTick+0x92>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
     b70:	c0 91 8e 04 	lds	r28, 0x048E
     b74:	d0 91 8f 04 	lds	r29, 0x048F
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
     b78:	88 89       	ldd	r24, Y+16	; 0x10
     b7a:	8f 30       	cpi	r24, 0x0F	; 15
     b7c:	d1 f1       	breq	.+116    	; 0xbf2 <OSTimeTick+0x92>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
     b7e:	11 e0       	ldi	r17, 0x01	; 1
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
     b80:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
     b84:	4a 85       	ldd	r20, Y+10	; 0x0a
     b86:	5b 85       	ldd	r21, Y+11	; 0x0b
     b88:	6c 85       	ldd	r22, Y+12	; 0x0c
     b8a:	7d 85       	ldd	r23, Y+13	; 0x0d
     b8c:	41 15       	cp	r20, r1
     b8e:	51 05       	cpc	r21, r1
     b90:	61 05       	cpc	r22, r1
     b92:	71 05       	cpc	r23, r1
     b94:	31 f1       	breq	.+76     	; 0xbe2 <OSTimeTick+0x82>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
     b96:	41 50       	subi	r20, 0x01	; 1
     b98:	51 09       	sbc	r21, r1
     b9a:	61 09       	sbc	r22, r1
     b9c:	71 09       	sbc	r23, r1
     b9e:	4a 87       	std	Y+10, r20	; 0x0a
     ba0:	5b 87       	std	Y+11, r21	; 0x0b
     ba2:	6c 87       	std	Y+12, r22	; 0x0c
     ba4:	7d 87       	std	Y+13, r23	; 0x0d
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
     ba6:	45 2b       	or	r20, r21
     ba8:	46 2b       	or	r20, r22
     baa:	47 2b       	or	r20, r23
     bac:	d1 f4       	brne	.+52     	; 0xbe2 <OSTimeTick+0x82>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
     bae:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb0:	29 2f       	mov	r18, r25
     bb2:	27 73       	andi	r18, 0x37	; 55
     bb4:	21 f0       	breq	.+8      	; 0xbbe <OSTimeTick+0x5e>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
     bb6:	98 7c       	andi	r25, 0xC8	; 200
     bb8:	9e 87       	std	Y+14, r25	; 0x0e
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
     bba:	1f 87       	std	Y+15, r17	; 0x0f
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <OSTimeTick+0x60>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
     bbe:	1f 86       	std	Y+15, r1	; 0x0f
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
     bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc2:	93 fd       	sbrc	r25, 3
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <OSTimeTick+0x82>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
     bc6:	20 91 d3 04 	lds	r18, 0x04D3
     bca:	9c 89       	ldd	r25, Y+20	; 0x14
     bcc:	92 2b       	or	r25, r18
     bce:	90 93 d3 04 	sts	0x04D3, r25
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     bd2:	ea 89       	ldd	r30, Y+18	; 0x12
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ec 52       	subi	r30, 0x2C	; 44
     bd8:	fb 4f       	sbci	r31, 0xFB	; 251
     bda:	20 81       	ld	r18, Z
     bdc:	9b 89       	ldd	r25, Y+19	; 0x13
     bde:	92 2b       	or	r25, r18
     be0:	90 83       	st	Z, r25
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
     be2:	0a 80       	ldd	r0, Y+2	; 0x02
     be4:	db 81       	ldd	r29, Y+3	; 0x03
     be6:	c0 2d       	mov	r28, r0
            OS_EXIT_CRITICAL();
     be8:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
     bec:	88 89       	ldd	r24, Y+16	; 0x10
     bee:	8f 30       	cpi	r24, 0x0F	; 15
     bf0:	39 f6       	brne	.-114    	; 0xb80 <OSTimeTick+0x20>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	08 95       	ret

00000bfa <OS_EventTaskWait>:
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
     bfa:	e0 91 d9 04 	lds	r30, 0x04D9
     bfe:	f0 91 da 04 	lds	r31, 0x04DA
     c02:	97 83       	std	Z+7, r25	; 0x07
     c04:	86 83       	std	Z+6, r24	; 0x06

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
     c06:	22 89       	ldd	r18, Z+18	; 0x12
     c08:	dc 01       	movw	r26, r24
     c0a:	a2 0f       	add	r26, r18
     c0c:	b1 1d       	adc	r27, r1
     c0e:	16 96       	adiw	r26, 0x06	; 6
     c10:	3c 91       	ld	r19, X
     c12:	16 97       	sbiw	r26, 0x06	; 6
     c14:	23 89       	ldd	r18, Z+19	; 0x13
     c16:	23 2b       	or	r18, r19
     c18:	16 96       	adiw	r26, 0x06	; 6
     c1a:	2c 93       	st	X, r18
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     c1c:	dc 01       	movw	r26, r24
     c1e:	15 96       	adiw	r26, 0x05	; 5
     c20:	3c 91       	ld	r19, X
     c22:	15 97       	sbiw	r26, 0x05	; 5
     c24:	24 89       	ldd	r18, Z+20	; 0x14
     c26:	23 2b       	or	r18, r19
     c28:	15 96       	adiw	r26, 0x05	; 5
     c2a:	2c 93       	st	X, r18

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
     c2c:	a2 89       	ldd	r26, Z+18	; 0x12
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ac 52       	subi	r26, 0x2C	; 44
     c32:	bb 4f       	sbci	r27, 0xFB	; 251
     c34:	83 89       	ldd	r24, Z+19	; 0x13
     c36:	80 95       	com	r24
     c38:	9c 91       	ld	r25, X
     c3a:	89 23       	and	r24, r25
     c3c:	8c 93       	st	X, r24
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
     c3e:	81 11       	cpse	r24, r1
     c40:	07 c0       	rjmp	.+14     	; 0xc50 <OS_EventTaskWait+0x56>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
     c42:	84 89       	ldd	r24, Z+20	; 0x14
     c44:	80 95       	com	r24
     c46:	90 91 d3 04 	lds	r25, 0x04D3
     c4a:	89 23       	and	r24, r25
     c4c:	80 93 d3 04 	sts	0x04D3, r24
     c50:	08 95       	ret

00000c52 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
     c52:	fc 01       	movw	r30, r24
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
     c54:	82 89       	ldd	r24, Z+18	; 0x12
     c56:	db 01       	movw	r26, r22
     c58:	a8 0f       	add	r26, r24
     c5a:	b1 1d       	adc	r27, r1
     c5c:	83 89       	ldd	r24, Z+19	; 0x13
     c5e:	80 95       	com	r24
     c60:	16 96       	adiw	r26, 0x06	; 6
     c62:	9c 91       	ld	r25, X
     c64:	16 97       	sbiw	r26, 0x06	; 6
     c66:	89 23       	and	r24, r25
     c68:	16 96       	adiw	r26, 0x06	; 6
     c6a:	8c 93       	st	X, r24
    if (pevent->OSEventTbl[y] == 0u) {
     c6c:	81 11       	cpse	r24, r1
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <OS_EventTaskRemove+0x2a>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
     c70:	84 89       	ldd	r24, Z+20	; 0x14
     c72:	80 95       	com	r24
     c74:	fb 01       	movw	r30, r22
     c76:	95 81       	ldd	r25, Z+5	; 0x05
     c78:	89 23       	and	r24, r25
     c7a:	85 83       	std	Z+5, r24	; 0x05
     c7c:	08 95       	ret

00000c7e <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	dc 01       	movw	r26, r24
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
     c86:	15 96       	adiw	r26, 0x05	; 5
     c88:	ec 91       	ld	r30, X
     c8a:	15 97       	sbiw	r26, 0x05	; 5
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	e0 5c       	subi	r30, 0xC0	; 192
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	10 81       	ld	r17, Z
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     c94:	c1 2f       	mov	r28, r17
     c96:	d0 e0       	ldi	r29, 0x00	; 0
     c98:	fc 01       	movw	r30, r24
     c9a:	ec 0f       	add	r30, r28
     c9c:	fd 1f       	adc	r31, r29
     c9e:	e6 81       	ldd	r30, Z+6	; 0x06
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	e0 5c       	subi	r30, 0xC0	; 192
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
     ca6:	11 0f       	add	r17, r17
     ca8:	11 0f       	add	r17, r17
     caa:	11 0f       	add	r17, r17
     cac:	80 81       	ld	r24, Z
     cae:	18 0f       	add	r17, r24
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
     cb0:	e1 2f       	mov	r30, r17
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	e8 59       	subi	r30, 0x98	; 152
     cba:	f9 4f       	sbci	r31, 0xF9	; 249
     cbc:	01 90       	ld	r0, Z+
     cbe:	f0 81       	ld	r31, Z
     cc0:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
     cc2:	12 86       	std	Z+10, r1	; 0x0a
     cc4:	13 86       	std	Z+11, r1	; 0x0b
     cc6:	14 86       	std	Z+12, r1	; 0x0c
     cc8:	15 86       	std	Z+13, r1	; 0x0d
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
     cca:	71 87       	std	Z+9, r23	; 0x09
     ccc:	60 87       	std	Z+8, r22	; 0x08
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
     cce:	40 95       	com	r20
     cd0:	86 85       	ldd	r24, Z+14	; 0x0e
     cd2:	48 23       	and	r20, r24
     cd4:	46 87       	std	Z+14, r20	; 0x0e
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
     cd6:	27 87       	std	Z+15, r18	; 0x0f
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
     cd8:	43 fd       	sbrc	r20, 3
     cda:	0c c0       	rjmp	.+24     	; 0xcf4 <OS_EventTaskRdy+0x76>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
     cdc:	90 91 d3 04 	lds	r25, 0x04D3
     ce0:	84 89       	ldd	r24, Z+20	; 0x14
     ce2:	89 2b       	or	r24, r25
     ce4:	80 93 d3 04 	sts	0x04D3, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
     ce8:	cc 52       	subi	r28, 0x2C	; 44
     cea:	db 4f       	sbci	r29, 0xFB	; 251
     cec:	98 81       	ld	r25, Y
     cee:	83 89       	ldd	r24, Z+19	; 0x13
     cf0:	89 2b       	or	r24, r25
     cf2:	88 83       	st	Y, r24
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
     cf4:	bd 01       	movw	r22, r26
     cf6:	cf 01       	movw	r24, r30
     cf8:	0e 94 29 06 	call	0xc52	; 0xc52 <OS_EventTaskRemove>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    }
#endif

    return (prio);
}
     cfc:	81 2f       	mov	r24, r17
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	08 95       	ret

00000d06 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
     d06:	fc 01       	movw	r30, r24
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
     d08:	15 82       	std	Z+5, r1	; 0x05
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
        pevent->OSEventTbl[i] = 0u;
     d0a:	16 82       	std	Z+6, r1	; 0x06
     d0c:	17 82       	std	Z+7, r1	; 0x07
     d0e:	08 95       	ret

00000d10 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
     d10:	fc 01       	movw	r30, r24
    while (size > 0u) {
     d12:	61 15       	cp	r22, r1
     d14:	71 05       	cpc	r23, r1
     d16:	31 f0       	breq	.+12     	; 0xd24 <OS_MemClr+0x14>
*              3) The clear is done one byte at a time since this will work on any processor irrespective
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
     d18:	68 0f       	add	r22, r24
     d1a:	79 1f       	adc	r23, r25
                 INT16U  size)
{
    while (size > 0u) {
        *pdest++ = (INT8U)0;
     d1c:	11 92       	st	Z+, r1
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
    while (size > 0u) {
     d1e:	e6 17       	cp	r30, r22
     d20:	f7 07       	cpc	r31, r23
     d22:	e1 f7       	brne	.-8      	; 0xd1c <OS_MemClr+0xc>
     d24:	08 95       	ret

00000d26 <OSInit>:
*********************************************************************************************************
*/

void  OSInit (void)
{
    OSInitHookBegin();                                           /* Call port specific initialization code   */
     d26:	0e 94 e7 04 	call	0x9ce	; 0x9ce <OSInitHookBegin>
{
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
     d2a:	10 92 d8 04 	sts	0x04D8, r1
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
     d2e:	10 92 86 04 	sts	0x0486, r1

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
     d32:	10 92 96 04 	sts	0x0496, r1

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
     d36:	10 92 87 04 	sts	0x0487, r1

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
     d3a:	10 92 90 04 	sts	0x0490, r1
     d3e:	10 92 91 04 	sts	0x0491, r1
     d42:	10 92 92 04 	sts	0x0492, r1
     d46:	10 92 93 04 	sts	0x0493, r1
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
     d4a:	10 92 88 04 	sts	0x0488, r1
     d4e:	10 92 89 04 	sts	0x0489, r1
     d52:	10 92 8a 04 	sts	0x048A, r1
     d56:	10 92 8b 04 	sts	0x048B, r1
static  void  OS_InitRdyList (void)
{
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
     d5a:	10 92 d3 04 	sts	0x04D3, r1
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0u;
     d5e:	10 92 d4 04 	sts	0x04D4, r1
     d62:	10 92 d5 04 	sts	0x04D5, r1
    }

    OSPrioCur     = 0u;
     d66:	10 92 8d 04 	sts	0x048D, r1
    OSPrioHighRdy = 0u;
     d6a:	10 92 8c 04 	sts	0x048C, r1

    OSTCBHighRdy  = (OS_TCB *)0;
     d6e:	10 92 d0 04 	sts	0x04D0, r1
     d72:	10 92 cf 04 	sts	0x04CF, r1
    OSTCBCur      = (OS_TCB *)0;
     d76:	10 92 da 04 	sts	0x04DA, r1
     d7a:	10 92 d9 04 	sts	0x04D9, r1
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
     d7e:	6d eb       	ldi	r22, 0xBD	; 189
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	8b ea       	ldi	r24, 0xAB	; 171
     d84:	95 e0       	ldi	r25, 0x05	; 5
     d86:	0e 94 88 06 	call	0xd10	; 0xd10 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
     d8a:	60 e2       	ldi	r22, 0x20	; 32
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	88 e6       	ldi	r24, 0x68	; 104
     d90:	96 e0       	ldi	r25, 0x06	; 6
     d92:	0e 94 88 06 	call	0xd10	; 0xd10 <OS_MemClr>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
        ix_next =  ix + 1u;
        ptcb1   = &OSTCBTbl[ix];
     d9a:	45 e1       	ldi	r20, 0x15	; 21
     d9c:	48 9f       	mul	r20, r24
     d9e:	f0 01       	movw	r30, r0
     da0:	49 9f       	mul	r20, r25
     da2:	f0 0d       	add	r31, r0
     da4:	11 24       	eor	r1, r1
     da6:	e5 55       	subi	r30, 0x55	; 85
     da8:	fa 4f       	sbci	r31, 0xFA	; 250
*
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
     daa:	01 96       	adiw	r24, 0x01	; 1
    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
        ix_next =  ix + 1u;
        ptcb1   = &OSTCBTbl[ix];
        ptcb2   = &OSTCBTbl[ix_next];
     dac:	48 9f       	mul	r20, r24
     dae:	90 01       	movw	r18, r0
     db0:	49 9f       	mul	r20, r25
     db2:	30 0d       	add	r19, r0
     db4:	11 24       	eor	r1, r1
     db6:	25 55       	subi	r18, 0x55	; 85
     db8:	3a 4f       	sbci	r19, 0xFA	; 250
        ptcb1->OSTCBNext = ptcb2;
     dba:	33 83       	std	Z+3, r19	; 0x03
     dbc:	22 83       	std	Z+2, r18	; 0x02
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
     dbe:	88 30       	cpi	r24, 0x08	; 8
     dc0:	91 05       	cpc	r25, r1
     dc2:	61 f7       	brne	.-40     	; 0xd9c <OSInit+0x76>
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
     dc4:	10 92 56 06 	sts	0x0656, r1
     dc8:	10 92 55 06 	sts	0x0655, r1
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
     dcc:	10 92 8f 04 	sts	0x048F, r1
     dd0:	10 92 8e 04 	sts	0x048E, r1
    OSTCBFreeList           = &OSTCBTbl[0];
     dd4:	8b ea       	ldi	r24, 0xAB	; 171
     dd6:	95 e0       	ldi	r25, 0x05	; 5
     dd8:	90 93 95 04 	sts	0x0495, r25
     ddc:	80 93 94 04 	sts	0x0494, r24
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
     de0:	60 e5       	ldi	r22, 0x50	; 80
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	8b e5       	ldi	r24, 0x5B	; 91
     de6:	95 e0       	ldi	r25, 0x05	; 5
     de8:	0e 94 88 06 	call	0xd10	; 0xd10 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
        ix_next = ix + 1u;
     df0:	9c 01       	movw	r18, r24
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
        pevent1 = &OSEventTbl[ix];
     df6:	fc 01       	movw	r30, r24
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	e5 5a       	subi	r30, 0xA5	; 165
     e06:	fa 4f       	sbci	r31, 0xFA	; 250
        pevent2 = &OSEventTbl[ix_next];
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
     e08:	10 82       	st	Z, r1

    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
        ix_next = ix + 1u;
        pevent1 = &OSEventTbl[ix];
        pevent2 = &OSEventTbl[ix_next];
     e0a:	c9 01       	movw	r24, r18
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	85 5a       	subi	r24, 0xA5	; 165
     e1a:	9a 4f       	sbci	r25, 0xFA	; 250
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
        pevent1->OSEventPtr     = pevent2;
     e1c:	92 83       	std	Z+2, r25	; 0x02
     e1e:	81 83       	std	Z+1, r24	; 0x01
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
        ix_next = ix + 1u;
     e20:	c9 01       	movw	r24, r18
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
     e22:	29 30       	cpi	r18, 0x09	; 9
     e24:	31 05       	cpc	r19, r1
     e26:	21 f7       	brne	.-56     	; 0xdf0 <OSInit+0xca>
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
#endif
    }
    pevent1                         = &OSEventTbl[ix];
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
     e28:	10 92 a3 05 	sts	0x05A3, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
     e2c:	10 92 a5 05 	sts	0x05A5, r1
     e30:	10 92 a4 05 	sts	0x05A4, r1
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
#endif
    OSEventFreeList                 = &OSEventTbl[0];
     e34:	8b e5       	ldi	r24, 0x5B	; 91
     e36:	95 e0       	ldi	r25, 0x05	; 5
     e38:	90 93 d7 04 	sts	0x04D7, r25
     e3c:	80 93 d6 04 	sts	0x04D6, r24
#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
     e40:	0e 94 45 09 	call	0x128a	; 0x128a <OS_QInit>
                          (void *)0,                                 /* No TCB extension                     */
                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #endif
#else
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreate(OS_TaskIdle,
     e44:	2f e0       	ldi	r18, 0x0F	; 15
     e46:	4a e5       	ldi	r20, 0x5A	; 90
     e48:	55 e0       	ldi	r21, 0x05	; 5
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	89 e2       	ldi	r24, 0x29	; 41
     e50:	95 e0       	ldi	r25, 0x05	; 5
     e52:	0e 94 41 0a 	call	0x1482	; 0x1482 <OSTaskCreate>

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
     e56:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <OSInitHookEnd>
     e5a:	08 95       	ret

00000e5c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
     e5c:	cf 93       	push	r28
    OS_CPU_SR  cpu_sr = 0u;
#endif



    OS_ENTER_CRITICAL();
     e5e:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
     e62:	c8 2f       	mov	r28, r24
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
     e64:	80 91 d8 04 	lds	r24, 0x04D8
     e68:	81 11       	cpse	r24, r1
     e6a:	2e c0       	rjmp	.+92     	; 0xec8 <OS_Sched+0x6c>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
     e6c:	80 91 86 04 	lds	r24, 0x0486
     e70:	81 11       	cpse	r24, r1
     e72:	2a c0       	rjmp	.+84     	; 0xec8 <OS_Sched+0x6c>
            OS_SchedNew();
     e74:	0e 94 13 05 	call	0xa26	; 0xa26 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     e78:	80 91 8c 04 	lds	r24, 0x048C
     e7c:	e8 2f       	mov	r30, r24
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	e8 59       	subi	r30, 0x98	; 152
     e86:	f9 4f       	sbci	r31, 0xF9	; 249
     e88:	20 81       	ld	r18, Z
     e8a:	31 81       	ldd	r19, Z+1	; 0x01
     e8c:	30 93 d0 04 	sts	0x04D0, r19
     e90:	20 93 cf 04 	sts	0x04CF, r18
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
     e94:	90 91 8d 04 	lds	r25, 0x048D
     e98:	89 17       	cp	r24, r25
     e9a:	b1 f0       	breq	.+44     	; 0xec8 <OS_Sched+0x6c>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
     e9c:	40 91 90 04 	lds	r20, 0x0490
     ea0:	50 91 91 04 	lds	r21, 0x0491
     ea4:	60 91 92 04 	lds	r22, 0x0492
     ea8:	70 91 93 04 	lds	r23, 0x0493
     eac:	4f 5f       	subi	r20, 0xFF	; 255
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	6f 4f       	sbci	r22, 0xFF	; 255
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	40 93 90 04 	sts	0x0490, r20
     eb8:	50 93 91 04 	sts	0x0491, r21
     ebc:	60 93 92 04 	sts	0x0492, r22
     ec0:	70 93 93 04 	sts	0x0493, r23
                OS_TASK_SW();                          /* Perform a context switch                     */
     ec4:	0e 94 86 00 	call	0x10c	; 0x10c <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
     ec8:	8c 2f       	mov	r24, r28
     eca:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
}
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	f8 2e       	mov	r15, r24
     ee6:	8b 01       	movw	r16, r22
#if OS_TASK_REG_TBL_SIZE > 0u
    INT8U      i;
#endif


    OS_ENTER_CRITICAL();
     ee8:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     eec:	c0 91 94 04 	lds	r28, 0x0494
     ef0:	d0 91 95 04 	lds	r29, 0x0495
    if (ptcb != (OS_TCB *)0) {
     ef4:	20 97       	sbiw	r28, 0x00	; 0
     ef6:	09 f4       	brne	.+2      	; 0xefa <OS_TCBInit+0x28>
     ef8:	6a c0       	rjmp	.+212    	; 0xfce <OS_TCBInit+0xfc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
     efa:	2a 81       	ldd	r18, Y+2	; 0x02
     efc:	3b 81       	ldd	r19, Y+3	; 0x03
     efe:	30 93 95 04 	sts	0x0495, r19
     f02:	20 93 94 04 	sts	0x0494, r18
        OS_EXIT_CRITICAL();
     f06:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
     f0a:	19 83       	std	Y+1, r17	; 0x01
     f0c:	08 83       	st	Y, r16
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
     f0e:	f8 8a       	std	Y+16, r15	; 0x10
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
     f10:	1e 86       	std	Y+14, r1	; 0x0e
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
     f12:	1f 86       	std	Y+15, r1	; 0x0f
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
     f14:	1a 86       	std	Y+10, r1	; 0x0a
     f16:	1b 86       	std	Y+11, r1	; 0x0b
     f18:	1c 86       	std	Y+12, r1	; 0x0c
     f1a:	1d 86       	std	Y+13, r1	; 0x0d
#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
     f1c:	0f 2d       	mov	r16, r15
     f1e:	06 95       	lsr	r16
     f20:	06 95       	lsr	r16
     f22:	06 95       	lsr	r16
     f24:	0a 8b       	std	Y+18, r16	; 0x12
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
     f26:	8f 2d       	mov	r24, r15
     f28:	87 70       	andi	r24, 0x07	; 7
     f2a:	89 8b       	std	Y+17, r24	; 0x11
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	5a 01       	movw	r10, r20
     f36:	6b 01       	movw	r12, r22
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <OS_TCBInit+0x70>
     f3a:	aa 0c       	add	r10, r10
     f3c:	bb 1c       	adc	r11, r11
     f3e:	cc 1c       	adc	r12, r12
     f40:	dd 1c       	adc	r13, r13
     f42:	0a 95       	dec	r16
     f44:	d2 f7       	brpl	.-12     	; 0xf3a <OS_TCBInit+0x68>
     f46:	ac 8a       	std	Y+20, r10	; 0x14
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <OS_TCBInit+0x80>
     f4a:	44 0f       	add	r20, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	66 1f       	adc	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	8a 95       	dec	r24
     f54:	d2 f7       	brpl	.-12     	; 0xf4a <OS_TCBInit+0x78>
     f56:	4b 8b       	std	Y+19, r20	; 0x13

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
     f58:	1f 82       	std	Y+7, r1	; 0x07
     f5a:	1e 82       	std	Y+6, r1	; 0x06
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
     f5c:	19 86       	std	Y+9, r1	; 0x09
     f5e:	18 86       	std	Y+8, r1	; 0x08
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
            ptcb->OSTCBRegTbl[i] = 0u;
        }
#endif

        OSTCBInitHook(ptcb);
     f60:	ce 01       	movw	r24, r28
     f62:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 e5 04 	call	0x9ca	; 0x9ca <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
     f6c:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        OSTCBPrioTbl[prio] = ptcb;
     f70:	ef 2d       	mov	r30, r15
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e8 59       	subi	r30, 0x98	; 152
     f7a:	f9 4f       	sbci	r31, 0xF9	; 249
     f7c:	d1 83       	std	Z+1, r29	; 0x01
     f7e:	c0 83       	st	Z, r28
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
     f80:	e0 91 8e 04 	lds	r30, 0x048E
     f84:	f0 91 8f 04 	lds	r31, 0x048F
     f88:	fb 83       	std	Y+3, r31	; 0x03
     f8a:	ea 83       	std	Y+2, r30	; 0x02
        ptcb->OSTCBPrev    = (OS_TCB *)0;
     f8c:	1d 82       	std	Y+5, r1	; 0x05
     f8e:	1c 82       	std	Y+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
     f90:	30 97       	sbiw	r30, 0x00	; 0
     f92:	11 f0       	breq	.+4      	; 0xf98 <OS_TCBInit+0xc6>
            OSTCBList->OSTCBPrev = ptcb;
     f94:	d5 83       	std	Z+5, r29	; 0x05
     f96:	c4 83       	std	Z+4, r28	; 0x04
        }
        OSTCBList               = ptcb;
     f98:	d0 93 8f 04 	sts	0x048F, r29
     f9c:	c0 93 8e 04 	sts	0x048E, r28
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     fa0:	20 91 d3 04 	lds	r18, 0x04D3
     fa4:	9c 89       	ldd	r25, Y+20	; 0x14
     fa6:	92 2b       	or	r25, r18
     fa8:	90 93 d3 04 	sts	0x04D3, r25
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     fac:	ea 89       	ldd	r30, Y+18	; 0x12
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	ec 52       	subi	r30, 0x2C	; 44
     fb2:	fb 4f       	sbci	r31, 0xFB	; 251
     fb4:	20 81       	ld	r18, Z
     fb6:	9b 89       	ldd	r25, Y+19	; 0x13
     fb8:	92 2b       	or	r25, r18
     fba:	90 83       	st	Z, r25
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
     fbc:	90 91 96 04 	lds	r25, 0x0496
     fc0:	9f 5f       	subi	r25, 0xFF	; 255
     fc2:	90 93 96 04 	sts	0x0496, r25
        OS_EXIT_CRITICAL();
     fc6:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_NONE);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <OS_TCBInit+0x102>
    }
    OS_EXIT_CRITICAL();
     fce:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_TASK_NO_MORE_TCB);
     fd2:	82 e4       	ldi	r24, 0x42	; 66
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	bf 90       	pop	r11
     fe4:	af 90       	pop	r10
     fe6:	08 95       	ret

00000fe8 <OSQCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void    **start,
                      INT16U    size)
{
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	7c 01       	movw	r14, r24
     ffa:	6b 01       	movw	r12, r22
    if (OSSafetyCriticalStartFlag == OS_TRUE) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
     ffc:	80 91 d8 04 	lds	r24, 0x04D8
    1000:	81 11       	cpse	r24, r1
    1002:	4e c0       	rjmp	.+156    	; 0x10a0 <OSQCreate+0xb8>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    }
    OS_ENTER_CRITICAL();
    1004:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    1008:	c0 91 d6 04 	lds	r28, 0x04D6
    100c:	d0 91 d7 04 	lds	r29, 0x04D7
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    1010:	20 97       	sbiw	r28, 0x00	; 0
    1012:	09 f4       	brne	.+2      	; 0x1016 <OSQCreate+0x2e>
    1014:	4a c0       	rjmp	.+148    	; 0x10aa <OSQCreate+0xc2>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    1016:	29 81       	ldd	r18, Y+1	; 0x01
    1018:	3a 81       	ldd	r19, Y+2	; 0x02
    101a:	30 93 d7 04 	sts	0x04D7, r19
    101e:	20 93 d6 04 	sts	0x04D6, r18
    }
    OS_EXIT_CRITICAL();
    1022:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
        OS_ENTER_CRITICAL();
    1026:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    102a:	00 91 d1 04 	lds	r16, 0x04D1
    102e:	10 91 d2 04 	lds	r17, 0x04D2
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    1032:	01 15       	cp	r16, r1
    1034:	11 05       	cpc	r17, r1
    1036:	29 f1       	breq	.+74     	; 0x1082 <OSQCreate+0x9a>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    1038:	f8 01       	movw	r30, r16
    103a:	20 81       	ld	r18, Z
    103c:	31 81       	ldd	r19, Z+1	; 0x01
    103e:	30 93 d2 04 	sts	0x04D2, r19
    1042:	20 93 d1 04 	sts	0x04D1, r18
            OS_EXIT_CRITICAL();
    1046:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    104a:	f8 01       	movw	r30, r16
    104c:	f3 82       	std	Z+3, r15	; 0x03
    104e:	e2 82       	std	Z+2, r14	; 0x02
            pq->OSQEnd             = &start[size];
    1050:	c6 01       	movw	r24, r12
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	8e 0d       	add	r24, r14
    1058:	9f 1d       	adc	r25, r15
    105a:	95 83       	std	Z+5, r25	; 0x05
    105c:	84 83       	std	Z+4, r24	; 0x04
            pq->OSQIn              = start;
    105e:	f7 82       	std	Z+7, r15	; 0x07
    1060:	e6 82       	std	Z+6, r14	; 0x06
            pq->OSQOut             = start;
    1062:	f1 86       	std	Z+9, r15	; 0x09
    1064:	e0 86       	std	Z+8, r14	; 0x08
            pq->OSQSize            = size;
    1066:	d3 86       	std	Z+11, r13	; 0x0b
    1068:	c2 86       	std	Z+10, r12	; 0x0a
            pq->OSQEntries         = 0u;
    106a:	15 86       	std	Z+13, r1	; 0x0d
    106c:	14 86       	std	Z+12, r1	; 0x0c
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	88 83       	st	Y, r24
            pevent->OSEventCnt     = 0u;
    1072:	1c 82       	std	Y+4, r1	; 0x04
    1074:	1b 82       	std	Y+3, r1	; 0x03
            pevent->OSEventPtr     = pq;
    1076:	1a 83       	std	Y+2, r17	; 0x02
    1078:	09 83       	std	Y+1, r16	; 0x01
#if OS_EVENT_NAME_EN > 0u
            pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    107a:	ce 01       	movw	r24, r28
    107c:	0e 94 83 06 	call	0xd06	; 0xd06 <OS_EventWaitListInit>
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <OSQCreate+0xbc>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    1082:	20 91 d6 04 	lds	r18, 0x04D6
    1086:	30 91 d7 04 	lds	r19, 0x04D7
    108a:	3a 83       	std	Y+2, r19	; 0x02
    108c:	29 83       	std	Y+1, r18	; 0x01
            OSEventFreeList    = pevent;
    108e:	d0 93 d7 04 	sts	0x04D7, r29
    1092:	c0 93 d6 04 	sts	0x04D6, r28
            OS_EXIT_CRITICAL();
    1096:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
            pevent = (OS_EVENT *)0;
    109a:	c0 e0       	ldi	r28, 0x00	; 0
    109c:	d0 e0       	ldi	r29, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <OSQCreate+0xbc>
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    10a0:	c0 e0       	ldi	r28, 0x00	; 0
    10a2:	d0 e0       	ldi	r29, 0x00	; 0
    10a4:	8c 2f       	mov	r24, r28
    10a6:	9d 2f       	mov	r25, r29
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <OSQCreate+0xc8>
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    10aa:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    10ae:	fa cf       	rjmp	.-12     	; 0x10a4 <OSQCreate+0xbc>
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
        }
    }
    return (pevent);
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	08 95       	ret

000010c2 <OSQPend>:
*/

void  *OSQPend (OS_EVENT  *pevent,
                INT32U     timeout,
                INT8U     *perr)
{
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	8c 01       	movw	r16, r24
    10d6:	6a 01       	movw	r12, r20
    10d8:	7b 01       	movw	r14, r22
    10da:	e9 01       	movw	r28, r18
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    10dc:	dc 01       	movw	r26, r24
    10de:	8c 91       	ld	r24, X
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	29 f0       	breq	.+10     	; 0x10ee <OSQPend+0x2c>
        *perr = OS_ERR_EVENT_TYPE;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	88 83       	st	Y, r24
        return ((void *)0);
    10e8:	e1 2c       	mov	r14, r1
    10ea:	f1 2c       	mov	r15, r1
    10ec:	76 c0       	rjmp	.+236    	; 0x11da <OSQPend+0x118>
    }
    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
    10ee:	80 91 d8 04 	lds	r24, 0x04D8
    10f2:	88 23       	and	r24, r24
    10f4:	29 f0       	breq	.+10     	; 0x1100 <OSQPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	88 83       	st	Y, r24
        return ((void *)0);
    10fa:	e1 2c       	mov	r14, r1
    10fc:	f1 2c       	mov	r15, r1
    10fe:	6d c0       	rjmp	.+218    	; 0x11da <OSQPend+0x118>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
    1100:	80 91 86 04 	lds	r24, 0x0486
    1104:	88 23       	and	r24, r24
    1106:	29 f0       	breq	.+10     	; 0x1112 <OSQPend+0x50>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    1108:	8d e0       	ldi	r24, 0x0D	; 13
    110a:	88 83       	st	Y, r24
        return ((void *)0);
    110c:	e1 2c       	mov	r14, r1
    110e:	f1 2c       	mov	r15, r1
    1110:	64 c0       	rjmp	.+200    	; 0x11da <OSQPend+0x118>
    }
    OS_ENTER_CRITICAL();
    1112:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    1116:	b8 2e       	mov	r11, r24
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    1118:	d8 01       	movw	r26, r16
    111a:	11 96       	adiw	r26, 0x01	; 1
    111c:	ed 91       	ld	r30, X+
    111e:	fc 91       	ld	r31, X
    1120:	12 97       	sbiw	r26, 0x02	; 2
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
    1122:	24 85       	ldd	r18, Z+12	; 0x0c
    1124:	35 85       	ldd	r19, Z+13	; 0x0d
    1126:	21 15       	cp	r18, r1
    1128:	31 05       	cpc	r19, r1
    112a:	c1 f0       	breq	.+48     	; 0x115c <OSQPend+0x9a>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    112c:	a0 85       	ldd	r26, Z+8	; 0x08
    112e:	b1 85       	ldd	r27, Z+9	; 0x09
    1130:	ed 90       	ld	r14, X+
    1132:	fd 90       	ld	r15, X+
    1134:	b1 87       	std	Z+9, r27	; 0x09
    1136:	a0 87       	std	Z+8, r26	; 0x08
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    1138:	21 50       	subi	r18, 0x01	; 1
    113a:	31 09       	sbc	r19, r1
    113c:	35 87       	std	Z+13, r19	; 0x0d
    113e:	24 87       	std	Z+12, r18	; 0x0c
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    1140:	84 81       	ldd	r24, Z+4	; 0x04
    1142:	95 81       	ldd	r25, Z+5	; 0x05
    1144:	a8 17       	cp	r26, r24
    1146:	b9 07       	cpc	r27, r25
    1148:	21 f4       	brne	.+8      	; 0x1152 <OSQPend+0x90>
            pq->OSQOut = pq->OSQStart;
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	91 87       	std	Z+9, r25	; 0x09
    1150:	80 87       	std	Z+8, r24	; 0x08
        }
        OS_EXIT_CRITICAL();
    1152:	8b 2d       	mov	r24, r11
    1154:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        *perr = OS_ERR_NONE;
    1158:	18 82       	st	Y, r1
        return (pmsg);                           /* Return message received                            */
    115a:	3f c0       	rjmp	.+126    	; 0x11da <OSQPend+0x118>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    115c:	e0 91 d9 04 	lds	r30, 0x04D9
    1160:	f0 91 da 04 	lds	r31, 0x04DA
    1164:	86 85       	ldd	r24, Z+14	; 0x0e
    1166:	84 60       	ori	r24, 0x04	; 4
    1168:	86 87       	std	Z+14, r24	; 0x0e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    116a:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    116c:	c2 86       	std	Z+10, r12	; 0x0a
    116e:	d3 86       	std	Z+11, r13	; 0x0b
    1170:	e4 86       	std	Z+12, r14	; 0x0c
    1172:	f5 86       	std	Z+13, r15	; 0x0d
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    1174:	c8 01       	movw	r24, r16
    1176:	0e 94 fd 05 	call	0xbfa	; 0xbfa <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    117a:	8b 2d       	mov	r24, r11
    117c:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    1180:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OS_Sched>
    OS_ENTER_CRITICAL();
    1184:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    1188:	d8 2e       	mov	r13, r24
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    118a:	e0 91 d9 04 	lds	r30, 0x04D9
    118e:	f0 91 da 04 	lds	r31, 0x04DA
    1192:	97 85       	ldd	r25, Z+15	; 0x0f
    1194:	99 23       	and	r25, r25
    1196:	19 f0       	breq	.+6      	; 0x119e <OSQPend+0xdc>
    1198:	92 30       	cpi	r25, 0x02	; 2
    119a:	51 f4       	brne	.+20     	; 0x11b0 <OSQPend+0xee>
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <OSQPend+0xe4>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    119e:	e0 84       	ldd	r14, Z+8	; 0x08
    11a0:	f1 84       	ldd	r15, Z+9	; 0x09
            *perr =  OS_ERR_NONE;
    11a2:	18 82       	st	Y, r1
             break;
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <OSQPend+0xfe>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    11a6:	8e e0       	ldi	r24, 0x0E	; 14
    11a8:	88 83       	st	Y, r24
             pmsg =  OSTCBCur->OSTCBMsg;
            *perr =  OS_ERR_NONE;
             break;

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    11aa:	e1 2c       	mov	r14, r1
    11ac:	f1 2c       	mov	r15, r1
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
             break;
    11ae:	08 c0       	rjmp	.+16     	; 0x11c0 <OSQPend+0xfe>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    11b0:	b8 01       	movw	r22, r16
    11b2:	cf 01       	movw	r24, r30
    11b4:	0e 94 29 06 	call	0xc52	; 0xc52 <OS_EventTaskRemove>
             pmsg = (void *)0;
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    11b8:	8a e0       	ldi	r24, 0x0A	; 10
    11ba:	88 83       	st	Y, r24
             break;

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
             pmsg = (void *)0;
    11bc:	e1 2c       	mov	r14, r1
    11be:	f1 2c       	mov	r15, r1
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    11c0:	e0 91 d9 04 	lds	r30, 0x04D9
    11c4:	f0 91 da 04 	lds	r31, 0x04DA
    11c8:	16 86       	std	Z+14, r1	; 0x0e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    11ca:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    11cc:	17 82       	std	Z+7, r1	; 0x07
    11ce:	16 82       	std	Z+6, r1	; 0x06
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    11d0:	11 86       	std	Z+9, r1	; 0x09
    11d2:	10 86       	std	Z+8, r1	; 0x08
    OS_EXIT_CRITICAL();
    11d4:	8d 2d       	mov	r24, r13
    11d6:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (pmsg);                                    /* Return received message                       */
}
    11da:	8e 2d       	mov	r24, r14
    11dc:	9f 2d       	mov	r25, r15
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	08 95       	ret

000011f2 <OSQPost>:
*/

#if OS_Q_POST_EN > 0u
INT8U  OSQPost (OS_EVENT  *pevent,
                void      *pmsg)
{
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	8b 01       	movw	r16, r22
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    1200:	88 81       	ld	r24, Y
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	d9 f5       	brne	.+118    	; 0x127c <OSQPost+0x8a>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    1206:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    120a:	f8 2e       	mov	r15, r24
    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	88 23       	and	r24, r24
    1210:	69 f0       	breq	.+26     	; 0x122c <OSQPost+0x3a>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	44 e0       	ldi	r20, 0x04	; 4
    1216:	b8 01       	movw	r22, r16
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    121e:	8f 2d       	mov	r24, r15
    1220:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OS_Sched();                                    /* Find highest priority task ready to run      */
    1224:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OS_Sched>
        return (OS_ERR_NONE);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	29 c0       	rjmp	.+82     	; 0x127e <OSQPost+0x8c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    122c:	e9 81       	ldd	r30, Y+1	; 0x01
    122e:	fa 81       	ldd	r31, Y+2	; 0x02
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    1230:	44 85       	ldd	r20, Z+12	; 0x0c
    1232:	55 85       	ldd	r21, Z+13	; 0x0d
    1234:	22 85       	ldd	r18, Z+10	; 0x0a
    1236:	33 85       	ldd	r19, Z+11	; 0x0b
    1238:	42 17       	cp	r20, r18
    123a:	53 07       	cpc	r21, r19
    123c:	28 f0       	brcs	.+10     	; 0x1248 <OSQPost+0x56>
        OS_EXIT_CRITICAL();
    123e:	8f 2d       	mov	r24, r15
    1240:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_Q_FULL);
    1244:	8e e1       	ldi	r24, 0x1E	; 30
    1246:	1b c0       	rjmp	.+54     	; 0x127e <OSQPost+0x8c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    1248:	a6 81       	ldd	r26, Z+6	; 0x06
    124a:	b7 81       	ldd	r27, Z+7	; 0x07
    124c:	0d 93       	st	X+, r16
    124e:	1d 93       	st	X+, r17
    1250:	b7 83       	std	Z+7, r27	; 0x07
    1252:	a6 83       	std	Z+6, r26	; 0x06
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    1254:	24 85       	ldd	r18, Z+12	; 0x0c
    1256:	35 85       	ldd	r19, Z+13	; 0x0d
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	35 87       	std	Z+13, r19	; 0x0d
    125e:	24 87       	std	Z+12, r18	; 0x0c
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    1260:	24 81       	ldd	r18, Z+4	; 0x04
    1262:	35 81       	ldd	r19, Z+5	; 0x05
    1264:	a2 17       	cp	r26, r18
    1266:	b3 07       	cpc	r27, r19
    1268:	21 f4       	brne	.+8      	; 0x1272 <OSQPost+0x80>
        pq->OSQIn = pq->OSQStart;
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	97 83       	std	Z+7, r25	; 0x07
    1270:	86 83       	std	Z+6, r24	; 0x06
    }
    OS_EXIT_CRITICAL();
    1272:	8f 2d       	mov	r24, r15
    1274:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_NONE);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	01 c0       	rjmp	.+2      	; 0x127e <OSQPost+0x8c>
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
        return (OS_ERR_EVENT_TYPE);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
        pq->OSQIn = pq->OSQStart;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	08 95       	ret

0000128a <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    128e:	68 e3       	ldi	r22, 0x38	; 56
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	87 e9       	ldi	r24, 0x97	; 151
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	0e 94 88 06 	call	0xd10	; 0xd10 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
        ix_next = ix + 1u;
        pq1 = &OSQTbl[ix];
        pq2 = &OSQTbl[ix_next];
        pq1->OSQPtr = pq2;
    129a:	e7 e9       	ldi	r30, 0x97	; 151
    129c:	f4 e0       	ldi	r31, 0x04	; 4
    129e:	a5 ea       	ldi	r26, 0xA5	; 165
    12a0:	b4 e0       	ldi	r27, 0x04	; 4
    12a2:	b1 83       	std	Z+1, r27	; 0x01
    12a4:	a0 83       	st	Z, r26
    12a6:	c3 eb       	ldi	r28, 0xB3	; 179
    12a8:	d4 e0       	ldi	r29, 0x04	; 4
    12aa:	cd 93       	st	X+, r28
    12ac:	dc 93       	st	X, r29
    12ae:	a1 ec       	ldi	r26, 0xC1	; 193
    12b0:	b4 e0       	ldi	r27, 0x04	; 4
    12b2:	b9 83       	std	Y+1, r27	; 0x01
    12b4:	a8 83       	st	Y, r26
    }
    pq1         = &OSQTbl[ix];
    pq1->OSQPtr = (OS_Q *)0;
    12b6:	1d 92       	st	X+, r1
    12b8:	1c 92       	st	X, r1
    OSQFreeList = &OSQTbl[0];
    12ba:	f0 93 d2 04 	sts	0x04D2, r31
    12be:	e0 93 d1 04 	sts	0x04D1, r30
#endif
}
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	8c 01       	movw	r16, r24
    if (OSSafetyCriticalStartFlag == OS_TRUE) {
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
    12d2:	80 91 d8 04 	lds	r24, 0x04D8
    12d6:	81 11       	cpse	r24, r1
    12d8:	1a c0       	rjmp	.+52     	; 0x130e <OSSemCreate+0x46>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
    12da:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    12de:	c0 91 d6 04 	lds	r28, 0x04D6
    12e2:	d0 91 d7 04 	lds	r29, 0x04D7
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    12e6:	20 97       	sbiw	r28, 0x00	; 0
    12e8:	b9 f0       	breq	.+46     	; 0x1318 <OSSemCreate+0x50>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    12ea:	29 81       	ldd	r18, Y+1	; 0x01
    12ec:	3a 81       	ldd	r19, Y+2	; 0x02
    12ee:	30 93 d7 04 	sts	0x04D7, r19
    12f2:	20 93 d6 04 	sts	0x04D6, r18
    }
    OS_EXIT_CRITICAL();
    12f6:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	88 83       	st	Y, r24
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    12fe:	1c 83       	std	Y+4, r17	; 0x04
    1300:	0b 83       	std	Y+3, r16	; 0x03
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    1302:	1a 82       	std	Y+2, r1	; 0x02
    1304:	19 82       	std	Y+1, r1	; 0x01
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    1306:	ce 01       	movw	r24, r28
    1308:	0e 94 83 06 	call	0xd06	; 0xd06 <OS_EventWaitListInit>
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <OSSemCreate+0x4a>
        OS_SAFETY_CRITICAL_EXCEPTION();
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    130e:	c0 e0       	ldi	r28, 0x00	; 0
    1310:	d0 e0       	ldi	r29, 0x00	; 0
    1312:	8c 2f       	mov	r24, r28
    1314:	9d 2f       	mov	r25, r29
    1316:	03 c0       	rjmp	.+6      	; 0x131e <OSSemCreate+0x56>
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    1318:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    131c:	fa cf       	rjmp	.-12     	; 0x1312 <OSSemCreate+0x4a>
        pevent->OSEventName    = (INT8U *)(void *)"?";
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    }
    return (pevent);
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	08 95       	ret

00001328 <OSSemPend>:
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	6a 01       	movw	r12, r20
    133e:	7b 01       	movw	r14, r22
    1340:	89 01       	movw	r16, r18
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1342:	88 81       	ld	r24, Y
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	21 f0       	breq	.+8      	; 0x1350 <OSSemPend+0x28>
        *perr = OS_ERR_EVENT_TYPE;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	f9 01       	movw	r30, r18
    134c:	80 83       	st	Z, r24
        return;
    134e:	5b c0       	rjmp	.+182    	; 0x1406 <OSSemPend+0xde>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
    1350:	80 91 d8 04 	lds	r24, 0x04D8
    1354:	88 23       	and	r24, r24
    1356:	21 f0       	breq	.+8      	; 0x1360 <OSSemPend+0x38>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	f9 01       	movw	r30, r18
    135c:	80 83       	st	Z, r24
        return;
    135e:	53 c0       	rjmp	.+166    	; 0x1406 <OSSemPend+0xde>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
    1360:	80 91 86 04 	lds	r24, 0x0486
    1364:	88 23       	and	r24, r24
    1366:	21 f0       	breq	.+8      	; 0x1370 <OSSemPend+0x48>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    1368:	8d e0       	ldi	r24, 0x0D	; 13
    136a:	f9 01       	movw	r30, r18
    136c:	80 83       	st	Z, r24
        return;
    136e:	4b c0       	rjmp	.+150    	; 0x1406 <OSSemPend+0xde>
    }
    OS_ENTER_CRITICAL();
    1370:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    1374:	b8 2e       	mov	r11, r24
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	3c 81       	ldd	r19, Y+4	; 0x04
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	49 f0       	breq	.+18     	; 0x1392 <OSSemPend+0x6a>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    1380:	21 50       	subi	r18, 0x01	; 1
    1382:	31 09       	sbc	r19, r1
    1384:	3c 83       	std	Y+4, r19	; 0x04
    1386:	2b 83       	std	Y+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    1388:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        *perr = OS_ERR_NONE;
    138c:	f8 01       	movw	r30, r16
    138e:	10 82       	st	Z, r1
        return;
    1390:	3a c0       	rjmp	.+116    	; 0x1406 <OSSemPend+0xde>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    1392:	e0 91 d9 04 	lds	r30, 0x04D9
    1396:	f0 91 da 04 	lds	r31, 0x04DA
    139a:	86 85       	ldd	r24, Z+14	; 0x0e
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	86 87       	std	Z+14, r24	; 0x0e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    13a0:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    13a2:	c2 86       	std	Z+10, r12	; 0x0a
    13a4:	d3 86       	std	Z+11, r13	; 0x0b
    13a6:	e4 86       	std	Z+12, r14	; 0x0c
    13a8:	f5 86       	std	Z+13, r15	; 0x0d
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 fd 05 	call	0xbfa	; 0xbfa <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    13b0:	8b 2d       	mov	r24, r11
    13b2:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    OS_Sched();                                       /* Find next highest priority task ready         */
    13b6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OS_Sched>
    OS_ENTER_CRITICAL();
    13ba:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    13be:	f8 2e       	mov	r15, r24
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    13c0:	e0 91 d9 04 	lds	r30, 0x04D9
    13c4:	f0 91 da 04 	lds	r31, 0x04DA
    13c8:	97 85       	ldd	r25, Z+15	; 0x0f
    13ca:	99 23       	and	r25, r25
    13cc:	19 f0       	breq	.+6      	; 0x13d4 <OSSemPend+0xac>
    13ce:	92 30       	cpi	r25, 0x02	; 2
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <OSSemPend+0xba>
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <OSSemPend+0xb2>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    13d4:	f8 01       	movw	r30, r16
    13d6:	10 82       	st	Z, r1
             break;
    13d8:	0b c0       	rjmp	.+22     	; 0x13f0 <OSSemPend+0xc8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    13da:	8e e0       	ldi	r24, 0x0E	; 14
    13dc:	f8 01       	movw	r30, r16
    13de:	80 83       	st	Z, r24
             break;
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <OSSemPend+0xc8>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    13e2:	be 01       	movw	r22, r28
    13e4:	cf 01       	movw	r24, r30
    13e6:	0e 94 29 06 	call	0xc52	; 0xc52 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    13ea:	8a e0       	ldi	r24, 0x0A	; 10
    13ec:	f8 01       	movw	r30, r16
    13ee:	80 83       	st	Z, r24
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    13f0:	e0 91 d9 04 	lds	r30, 0x04D9
    13f4:	f0 91 da 04 	lds	r31, 0x04DA
    13f8:	16 86       	std	Z+14, r1	; 0x0e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    13fa:	17 86       	std	Z+15, r1	; 0x0f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    13fc:	17 82       	std	Z+7, r1	; 0x07
    13fe:	16 82       	std	Z+6, r1	; 0x06
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
    1400:	8f 2d       	mov	r24, r15
    1402:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	bf 90       	pop	r11
    1418:	08 95       	ret

0000141a <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1422:	88 81       	ld	r24, Y
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	41 f5       	brne	.+80     	; 0x1478 <OSSemPost+0x5e>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    1428:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    142c:	18 2f       	mov	r17, r24
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	99 23       	and	r25, r25
    1432:	71 f0       	breq	.+28     	; 0x1450 <OSSemPost+0x36>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	ce 01       	movw	r24, r28
    143e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    1442:	81 2f       	mov	r24, r17
    1444:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OS_Sched();                                   /* Find HPT ready to run                         */
    1448:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OS_Sched>
        return (OS_ERR_NONE);
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	15 c0       	rjmp	.+42     	; 0x147a <OSSemPost+0x60>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	2f 3f       	cpi	r18, 0xFF	; 255
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	38 07       	cpc	r19, r24
    145a:	49 f0       	breq	.+18     	; 0x146e <OSSemPost+0x54>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    145c:	2f 5f       	subi	r18, 0xFF	; 255
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	3c 83       	std	Y+4, r19	; 0x04
    1462:	2b 83       	std	Y+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    1464:	81 2f       	mov	r24, r17
    1466:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_NONE);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	06 c0       	rjmp	.+12     	; 0x147a <OSSemPost+0x60>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    146e:	81 2f       	mov	r24, r17
    1470:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_SEM_OVF);
    1474:	83 e3       	ldi	r24, 0x33	; 51
    1476:	01 c0       	rjmp	.+2      	; 0x147a <OSSemPost+0x60>
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    1478:	81 e0       	ldi	r24, 0x01	; 1
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	08 95       	ret

00001482 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
    1482:	9f 92       	push	r9
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	8c 01       	movw	r16, r24
    149a:	7b 01       	movw	r14, r22
    149c:	6a 01       	movw	r12, r20
    149e:	92 2e       	mov	r9, r18
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    14a0:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
    14a4:	90 91 d8 04 	lds	r25, 0x04D8
    14a8:	99 23       	and	r25, r25
    14aa:	21 f0       	breq	.+8      	; 0x14b4 <OSTaskCreate+0x32>
        OS_EXIT_CRITICAL();
    14ac:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        return (OS_ERR_TASK_CREATE_ISR);
    14b0:	1c e3       	ldi	r17, 0x3C	; 60
    14b2:	45 c0       	rjmp	.+138    	; 0x153e <OSTaskCreate+0xbc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    14b4:	c9 2d       	mov	r28, r9
    14b6:	d0 e0       	ldi	r29, 0x00	; 0
    14b8:	fe 01       	movw	r30, r28
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	e8 59       	subi	r30, 0x98	; 152
    14c0:	f9 4f       	sbci	r31, 0xF9	; 249
    14c2:	01 90       	ld	r0, Z+
    14c4:	f0 81       	ld	r31, Z
    14c6:	e0 2d       	mov	r30, r0
    14c8:	ef 2b       	or	r30, r31
    14ca:	b1 f5       	brne	.+108    	; 0x1538 <OSTaskCreate+0xb6>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    14cc:	fe 01       	movw	r30, r28
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	e8 59       	subi	r30, 0x98	; 152
    14d4:	f9 4f       	sbci	r31, 0xF9	; 249
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	31 83       	std	Z+1, r19	; 0x01
    14dc:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    14de:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	a6 01       	movw	r20, r12
    14e8:	b7 01       	movw	r22, r14
    14ea:	c8 01       	movw	r24, r16
    14ec:	0e 94 54 04 	call	0x8a8	; 0x8a8 <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
    14f0:	a1 2c       	mov	r10, r1
    14f2:	b1 2c       	mov	r11, r1
    14f4:	c1 2c       	mov	r12, r1
    14f6:	d1 2c       	mov	r13, r1
    14f8:	e1 2c       	mov	r14, r1
    14fa:	f1 2c       	mov	r15, r1
    14fc:	87 01       	movw	r16, r14
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	bc 01       	movw	r22, r24
    1508:	89 2d       	mov	r24, r9
    150a:	0e 94 69 07 	call	0xed2	; 0xed2 <OS_TCBInit>
    150e:	18 2f       	mov	r17, r24
        if (err == OS_ERR_NONE) {
    1510:	81 11       	cpse	r24, r1
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <OSTaskCreate+0xa0>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    1514:	80 91 87 04 	lds	r24, 0x0487
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	89 f4       	brne	.+34     	; 0x153e <OSTaskCreate+0xbc>
                OS_Sched();
    151c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OS_Sched>
    1520:	0e c0       	rjmp	.+28     	; 0x153e <OSTaskCreate+0xbc>
            }
        } else {
            OS_ENTER_CRITICAL();
    1522:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    1526:	cc 0f       	add	r28, r28
    1528:	dd 1f       	adc	r29, r29
    152a:	c8 59       	subi	r28, 0x98	; 152
    152c:	d9 4f       	sbci	r29, 0xF9	; 249
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
    1532:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    1536:	03 c0       	rjmp	.+6      	; 0x153e <OSTaskCreate+0xbc>
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    1538:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
    return (OS_ERR_PRIO_EXIST);
    153c:	18 e2       	ldi	r17, 0x28	; 40
}
    153e:	81 2f       	mov	r24, r17
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	08 95       	ret

00001558 <OS_TaskReturn>:
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
    1558:	80 91 d9 04 	lds	r24, 0x04D9
    155c:	90 91 da 04 	lds	r25, 0x04DA
    1560:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    1564:	6a ef       	ldi	r22, 0xFA	; 250
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <OSTimeDly>
    1570:	f9 cf       	rjmp	.-14     	; 0x1564 <OS_TaskReturn+0xc>

00001572 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	6b 01       	movw	r12, r22
    157c:	7c 01       	movw	r14, r24
    OS_CPU_SR  cpu_sr = 0u;
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
    157e:	80 91 d8 04 	lds	r24, 0x04D8
    1582:	81 11       	cpse	r24, r1
    1584:	29 c0       	rjmp	.+82     	; 0x15d8 <OSTimeDly+0x66>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
    1586:	80 91 86 04 	lds	r24, 0x0486
    158a:	81 11       	cpse	r24, r1
    158c:	25 c0       	rjmp	.+74     	; 0x15d8 <OSTimeDly+0x66>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
    158e:	c1 14       	cp	r12, r1
    1590:	d1 04       	cpc	r13, r1
    1592:	e1 04       	cpc	r14, r1
    1594:	f1 04       	cpc	r15, r1
    1596:	01 f1       	breq	.+64     	; 0x15d8 <OSTimeDly+0x66>
        OS_ENTER_CRITICAL();
    1598:	0e 94 53 00 	call	0xa6	; 0xa6 <CPUGetSR>
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    159c:	e0 91 d9 04 	lds	r30, 0x04D9
    15a0:	f0 91 da 04 	lds	r31, 0x04DA
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
    15a4:	a2 89       	ldd	r26, Z+18	; 0x12
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ac 52       	subi	r26, 0x2C	; 44
    15aa:	bb 4f       	sbci	r27, 0xFB	; 251
    15ac:	93 89       	ldd	r25, Z+19	; 0x13
    15ae:	90 95       	com	r25
    15b0:	2c 91       	ld	r18, X
    15b2:	92 23       	and	r25, r18
    15b4:	9c 93       	st	X, r25
        if (OSRdyTbl[y] == 0u) {
    15b6:	91 11       	cpse	r25, r1
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <OSTimeDly+0x56>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
    15ba:	94 89       	ldd	r25, Z+20	; 0x14
    15bc:	90 95       	com	r25
    15be:	20 91 d3 04 	lds	r18, 0x04D3
    15c2:	92 23       	and	r25, r18
    15c4:	90 93 d3 04 	sts	0x04D3, r25
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    15c8:	c2 86       	std	Z+10, r12	; 0x0a
    15ca:	d3 86       	std	Z+11, r13	; 0x0b
    15cc:	e4 86       	std	Z+12, r14	; 0x0c
    15ce:	f5 86       	std	Z+13, r15	; 0x0d
        OS_EXIT_CRITICAL();
    15d0:	0e 94 56 00 	call	0xac	; 0xac <CPUSetSR>
        OS_Sched();                              /* Find next task to run!                             */
    15d4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <OS_Sched>
    }
}
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	08 95       	ret

000015e2 <main>:
	TIMSK1 = ex(OCIE1A);
}

int main(void)
{
	cli();
    15e2:	f8 94       	cli
	OSInit();
    15e4:	0e 94 93 06 	call	0xd26	; 0xd26 <OSInit>
static OS_STK stack0[256];
static OS_STK stack1[128];

static void tickInit( void )
{
	TCNT1 = 0;
    15e8:	10 92 85 00 	sts	0x0085, r1
    15ec:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 249;
    15f0:	89 ef       	ldi	r24, 0xF9	; 249
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	90 93 89 00 	sts	0x0089, r25
    15f8:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
    15fc:	10 92 8b 00 	sts	0x008B, r1
    1600:	10 92 8a 00 	sts	0x008A, r1
	TCCR1A = 0x00;
    1604:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0C;
    1608:	8c e0       	ldi	r24, 0x0C	; 12
    160a:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0x00;
    160e:	10 92 82 00 	sts	0x0082, r1
	TIFR1 = ex(OCF1A);
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = ex(OCIE1A);
    1616:	80 93 6f 00 	sts	0x006F, r24
{
	cli();
	OSInit();
	tickInit();
	
	enablePullup();
    161a:	0e 94 1b 01 	call	0x236	; 0x236 <enablePullup>
	ledInit();
    161e:	0e 94 1f 01 	call	0x23e	; 0x23e <ledInit>
	pwmInit();
    1622:	0e 94 c7 02 	call	0x58e	; 0x58e <pwmInit>
	usart0Init();
    1626:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0Init>
	usart0Init();
    162a:	0e 94 ed 02 	call	0x5da	; 0x5da <usart0Init>
	
	//OSTaskCreate(colorLEDDemo, (void *)0, &stack0[255], 0);
	OSTaskCreate(esp8266ColorLED, (void *)0, &stack0[255], 0);
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	44 e0       	ldi	r20, 0x04	; 4
    1632:	54 e0       	ldi	r21, 0x04	; 4
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	8c e6       	ldi	r24, 0x6C	; 108
    163a:	9b e0       	ldi	r25, 0x0B	; 11
    163c:	0e 94 41 0a 	call	0x1482	; 0x1482 <OSTaskCreate>
	OSTaskCreate(blink, (void *)0, &stack1[127], 2);
    1640:	22 e0       	ldi	r18, 0x02	; 2
    1642:	44 e8       	ldi	r20, 0x84	; 132
    1644:	54 e0       	ldi	r21, 0x04	; 4
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	86 e3       	ldi	r24, 0x36	; 54
    164c:	9b e0       	ldi	r25, 0x0B	; 11
    164e:	0e 94 41 0a 	call	0x1482	; 0x1482 <OSTaskCreate>
	
	OSStart();
    1652:	0e 94 94 05 	call	0xb28	; 0xb28 <OSStart>
	
	return 0;
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	08 95       	ret

0000165c <hexToInt>:
#include "task.h"

static boolean esp8266Initialized = FALSE;

static uint8 hexToInt(char *hex)
{
    165c:	fc 01       	movw	r30, r24
	return ((hex[0] - '0') << 4) | ((hex[1] - '0') & 0x0F);
    165e:	90 81       	ld	r25, Z
    1660:	92 95       	swap	r25
    1662:	90 7f       	andi	r25, 0xF0	; 240
    1664:	81 81       	ldd	r24, Z+1	; 0x01
    1666:	8f 70       	andi	r24, 0x0F	; 15
}
    1668:	89 2b       	or	r24, r25
    166a:	08 95       	ret

0000166c <blink>:

void blink(void *pdata)
{
	(void)pdata;
	while (1) {
		if (esp8266Initialized) {
    166c:	80 91 85 04 	lds	r24, 0x0485
    1670:	88 23       	and	r24, r24
    1672:	09 f1       	breq	.+66     	; 0x16b6 <blink+0x4a>
			ledOn();
    1674:	0e 94 21 01 	call	0x242	; 0x242 <ledOn>
			OSTimeDly(1);
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 b9 0a 	call	0x1572	; 0x1572 <OSTimeDly>
			ledOff();
    1684:	0e 94 23 01 	call	0x246	; 0x246 <ledOff>
			OSTimeDly(29);
    1688:	6d e1       	ldi	r22, 0x1D	; 29
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 b9 0a 	call	0x1572	; 0x1572 <OSTimeDly>
			ledOn();
    1694:	0e 94 21 01 	call	0x242	; 0x242 <ledOn>
			OSTimeDly(1);
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <OSTimeDly>
			ledOff();
    16a4:	0e 94 23 01 	call	0x246	; 0x246 <ledOff>
			OSTimeDly(219);
    16a8:	6b ed       	ldi	r22, 0xDB	; 219
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <OSTimeDly>
    16b4:	db cf       	rjmp	.-74     	; 0x166c <blink>
		} else {
			ledOn();
    16b6:	0e 94 21 01 	call	0x242	; 0x242 <ledOn>
			OSTimeDly(30);
    16ba:	6e e1       	ldi	r22, 0x1E	; 30
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <OSTimeDly>
			ledOff();
    16c6:	0e 94 23 01 	call	0x246	; 0x246 <ledOff>
			OSTimeDly(30);
    16ca:	6e e1       	ldi	r22, 0x1E	; 30
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <OSTimeDly>
    16d6:	ca cf       	rjmp	.-108    	; 0x166c <blink>

000016d8 <esp8266ColorLED>:
		OSTimeDly(6);
	}
}

void esp8266ColorLED(void *pdata)
{
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	a0 97       	sbiw	r28, 0x20	; 32
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
				break;
			}
			if (!esp8266Cmd("AT+CIPSERVER=1, 5678", "OK")) {
				break;
			}
			esp8266Initialized = TRUE;
    16ec:	11 e0       	ldi	r17, 0x01	; 1
	(void)pdata;
	red = 0;
	green = 0;
	blue = 0;
	hue = 0;
	while (!esp8266Initialized) {
    16ee:	21 c0       	rjmp	.+66     	; 0x1732 <esp8266ColorLED+0x5a>
		while (1) {
			if (!esp8266Cmd("AT+RST", "ready")) {
    16f0:	60 e4       	ldi	r22, 0x40	; 64
    16f2:	72 e0       	ldi	r23, 0x02	; 2
    16f4:	86 e4       	ldi	r24, 0x46	; 70
    16f6:	92 e0       	ldi	r25, 0x02	; 2
    16f8:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    16fc:	88 23       	and	r24, r24
    16fe:	c9 f0       	breq	.+50     	; 0x1732 <esp8266ColorLED+0x5a>
				break;
			}
			if (!esp8266Cmd("ATE0", "OK")) {
    1700:	63 e1       	ldi	r22, 0x13	; 19
    1702:	71 e0       	ldi	r23, 0x01	; 1
    1704:	8d e4       	ldi	r24, 0x4D	; 77
    1706:	92 e0       	ldi	r25, 0x02	; 2
    1708:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    170c:	88 23       	and	r24, r24
    170e:	89 f0       	breq	.+34     	; 0x1732 <esp8266ColorLED+0x5a>
				break;
			}
			if (!esp8266Cmd("AT+CIPMUX=1", "OK")) {
    1710:	63 e1       	ldi	r22, 0x13	; 19
    1712:	71 e0       	ldi	r23, 0x01	; 1
    1714:	82 e5       	ldi	r24, 0x52	; 82
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    171c:	88 23       	and	r24, r24
    171e:	49 f0       	breq	.+18     	; 0x1732 <esp8266ColorLED+0x5a>
				break;
			}
			if (!esp8266Cmd("AT+CIPSERVER=1, 5678", "OK")) {
    1720:	63 e1       	ldi	r22, 0x13	; 19
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	8e e5       	ldi	r24, 0x5E	; 94
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	0e 94 39 01 	call	0x272	; 0x272 <esp8266Cmd>
    172c:	81 11       	cpse	r24, r1
				break;
			}
			esp8266Initialized = TRUE;
    172e:	10 93 85 04 	sts	0x0485, r17
	(void)pdata;
	red = 0;
	green = 0;
	blue = 0;
	hue = 0;
	while (!esp8266Initialized) {
    1732:	80 91 85 04 	lds	r24, 0x0485
    1736:	88 23       	and	r24, r24
    1738:	d9 f2       	breq	.-74     	; 0x16f0 <esp8266ColorLED+0x18>
    173a:	f1 2c       	mov	r15, r1
    173c:	00 e0       	ldi	r16, 0x00	; 0
    173e:	10 e0       	ldi	r17, 0x00	; 0
			esp8266Initialized = TRUE;
			break;
		}
	}
	while (1) {
		str = esp8266Rx();
    1740:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <esp8266Rx>
    1744:	fc 01       	movw	r30, r24
		if (str[0] == 'R') {
    1746:	90 81       	ld	r25, Z
    1748:	92 35       	cpi	r25, 0x52	; 82
    174a:	71 f4       	brne	.+28     	; 0x1768 <esp8266ColorLED+0x90>
			red = hexToInt(str + 1);
    174c:	cf 01       	movw	r24, r30
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	0e 94 2e 0b 	call	0x165c	; 0x165c <hexToInt>
    1754:	18 2f       	mov	r17, r24
			ledRedSet(red);
    1756:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(green);
    175a:	80 2f       	mov	r24, r16
    175c:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(blue);
    1760:	8f 2d       	mov	r24, r15
    1762:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    1766:	ec cf       	rjmp	.-40     	; 0x1740 <esp8266ColorLED+0x68>
		} else if (str[0] == 'G') {
    1768:	97 34       	cpi	r25, 0x47	; 71
    176a:	79 f4       	brne	.+30     	; 0x178a <esp8266ColorLED+0xb2>
			green = hexToInt(str + 1);
    176c:	cf 01       	movw	r24, r30
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0e 94 2e 0b 	call	0x165c	; 0x165c <hexToInt>
    1774:	08 2f       	mov	r16, r24
			ledRedSet(red);
    1776:	81 2f       	mov	r24, r17
    1778:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(green);
    177c:	80 2f       	mov	r24, r16
    177e:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(blue);
    1782:	8f 2d       	mov	r24, r15
    1784:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    1788:	db cf       	rjmp	.-74     	; 0x1740 <esp8266ColorLED+0x68>
		} else if (str[0] == 'B') {
    178a:	92 34       	cpi	r25, 0x42	; 66
    178c:	79 f4       	brne	.+30     	; 0x17ac <esp8266ColorLED+0xd4>
			blue = hexToInt(str + 1);
    178e:	cf 01       	movw	r24, r30
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	0e 94 2e 0b 	call	0x165c	; 0x165c <hexToInt>
    1796:	f8 2e       	mov	r15, r24
			ledRedSet(red);
    1798:	81 2f       	mov	r24, r17
    179a:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(green);
    179e:	80 2f       	mov	r24, r16
    17a0:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(blue);
    17a4:	8f 2d       	mov	r24, r15
    17a6:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    17aa:	ca cf       	rjmp	.-108    	; 0x1740 <esp8266ColorLED+0x68>
		} else if (str[0] == 'H') {
    17ac:	98 34       	cpi	r25, 0x48	; 72
    17ae:	b9 f4       	brne	.+46     	; 0x17de <esp8266ColorLED+0x106>
			hue = hexToInt(str + 1);
    17b0:	cf 01       	movw	r24, r30
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	0e 94 2e 0b 	call	0x165c	; 0x165c <hexToInt>
    17b8:	e8 2e       	mov	r14, r24
			ledRedSet(hueToRed(hue));
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 41 02 	call	0x482	; 0x482 <hueToRed>
    17c0:	0e 94 be 02 	call	0x57c	; 0x57c <ledRedSet>
			ledGreenSet(hueToGreen(hue));
    17c4:	8e 2d       	mov	r24, r14
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 6f 02 	call	0x4de	; 0x4de <hueToGreen>
    17cc:	0e 94 c1 02 	call	0x582	; 0x582 <ledGreenSet>
			ledBlueSet(hueToBlue(hue));
    17d0:	8e 2d       	mov	r24, r14
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 96 02 	call	0x52c	; 0x52c <hueToBlue>
    17d8:	0e 94 c4 02 	call	0x588	; 0x588 <ledBlueSet>
    17dc:	b1 cf       	rjmp	.-158    	; 0x1740 <esp8266ColorLED+0x68>
		} else if (str[0] == 'N') {
    17de:	9e 34       	cpi	r25, 0x4E	; 78
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <esp8266ColorLED+0x11a>
			strCpy(str + 1, buf);
    17e2:	be 01       	movw	r22, r28
    17e4:	6f 5f       	subi	r22, 0xFF	; 255
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	cf 01       	movw	r24, r30
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <strCpy>
    17f0:	a7 cf       	rjmp	.-178    	; 0x1740 <esp8266ColorLED+0x68>
		} else if (str[0] == 'P') {
    17f2:	90 35       	cpi	r25, 0x50	; 80
    17f4:	99 f4       	brne	.+38     	; 0x181c <esp8266ColorLED+0x144>
			if (esp8266ConnectAP(buf, str + 1)) {
    17f6:	bf 01       	movw	r22, r30
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <esp8266ConnectAP>
    1804:	88 23       	and	r24, r24
    1806:	29 f0       	breq	.+10     	; 0x1812 <esp8266ColorLED+0x13a>
				/* TCP: esp8266TxLn(), UDP: esp8266Tx() */
				esp8266Tx("OK");
    1808:	83 e1       	ldi	r24, 0x13	; 19
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    1810:	97 cf       	rjmp	.-210    	; 0x1740 <esp8266ColorLED+0x68>
			} else {
				/* TCP: esp8266TxLn(), UDP: esp8266Tx() */
				esp8266Tx("FAIL");
    1812:	86 e1       	ldi	r24, 0x16	; 22
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    181a:	92 cf       	rjmp	.-220    	; 0x1740 <esp8266ColorLED+0x68>
			}
		} else if (str[0] == 'I') {
    181c:	99 34       	cpi	r25, 0x49	; 73
    181e:	09 f0       	breq	.+2      	; 0x1822 <esp8266ColorLED+0x14a>
    1820:	8f cf       	rjmp	.-226    	; 0x1740 <esp8266ColorLED+0x68>
			if (esp8266GetIP(buf)) {
    1822:	ce 01       	movw	r24, r28
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	0e 94 b1 01 	call	0x362	; 0x362 <esp8266GetIP>
    182a:	88 23       	and	r24, r24
    182c:	29 f0       	breq	.+10     	; 0x1838 <esp8266ColorLED+0x160>
				/* TCP: esp8266TxLn(), UDP: esp8266Tx() */
				esp8266Tx(buf);
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    1836:	84 cf       	rjmp	.-248    	; 0x1740 <esp8266ColorLED+0x68>
			} else {
				/* TCP: esp8266TxLn(), UDP: esp8266Tx() */
				esp8266Tx("FAIL");
    1838:	86 e1       	ldi	r24, 0x16	; 22
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 27 02 	call	0x44e	; 0x44e <esp8266Tx>
    1840:	7f cf       	rjmp	.-258    	; 0x1740 <esp8266ColorLED+0x68>

00001842 <__udivmodsi4>:
    1842:	a1 e2       	ldi	r26, 0x21	; 33
    1844:	1a 2e       	mov	r1, r26
    1846:	aa 1b       	sub	r26, r26
    1848:	bb 1b       	sub	r27, r27
    184a:	fd 01       	movw	r30, r26
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <__udivmodsi4_ep>

0000184e <__udivmodsi4_loop>:
    184e:	aa 1f       	adc	r26, r26
    1850:	bb 1f       	adc	r27, r27
    1852:	ee 1f       	adc	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	a2 17       	cp	r26, r18
    1858:	b3 07       	cpc	r27, r19
    185a:	e4 07       	cpc	r30, r20
    185c:	f5 07       	cpc	r31, r21
    185e:	20 f0       	brcs	.+8      	; 0x1868 <__udivmodsi4_ep>
    1860:	a2 1b       	sub	r26, r18
    1862:	b3 0b       	sbc	r27, r19
    1864:	e4 0b       	sbc	r30, r20
    1866:	f5 0b       	sbc	r31, r21

00001868 <__udivmodsi4_ep>:
    1868:	66 1f       	adc	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	88 1f       	adc	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	1a 94       	dec	r1
    1872:	69 f7       	brne	.-38     	; 0x184e <__udivmodsi4_loop>
    1874:	60 95       	com	r22
    1876:	70 95       	com	r23
    1878:	80 95       	com	r24
    187a:	90 95       	com	r25
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	bd 01       	movw	r22, r26
    1882:	cf 01       	movw	r24, r30
    1884:	08 95       	ret

00001886 <_exit>:
    1886:	f8 94       	cli

00001888 <__stop_program>:
    1888:	ff cf       	rjmp	.-2      	; 0x1888 <__stop_program>
